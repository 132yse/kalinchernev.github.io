<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Kalin Chernev</title>
    <link>https://kalinchernev.github.io/tags/javascript/index.xml</link>
    <description>Recent content in Javascript on Kalin Chernev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>All rights reserved - 2017</copyright>
    <atom:link href="https://kalinchernev.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Admin UI for Gatsby static site generator</title>
      <link>https://kalinchernev.github.io/admin-ui-gatsby-static-site-generator/</link>
      <pubDate>Wed, 16 Aug 2017 23:33:31 +0000</pubDate>
      
      <guid>https://kalinchernev.github.io/admin-ui-gatsby-static-site-generator/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Recently I was looking into &lt;a href=&#34;https://www.gatsbyjs.org/&#34;&gt;Gatsby.js&lt;/a&gt; as a generator for a blog site. As many others, I one of the first steps into using the system as other popular CMS solutions, I started to look around for an online back-end UI for the content creation part. I found this list of &lt;a href=&#34;https://headlesscms.org/&#34;&gt;headless CMS options&lt;/a&gt; and since &lt;a href=&#34;forestry.io&#34;&gt;forestry&lt;/a&gt; (the service I use for my blog) does not support Gatsby, I decided to try &lt;a href=&#34;https://www.netlifycms.org/&#34;&gt;NetlifyCMS&lt;/a&gt;. This tutorial will be about it :)&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not going into details on the separate services and software packages, their advantages and super features. Rather, I will keep the tutorial concise on how to integrate the systems within few steps.&lt;/p&gt;

&lt;p&gt;If, on the other hand, you like more background about the JAM stack, you can see previous mentions &lt;a href=&#34;https://kalinchernev.github.io/march-digest-2017/#jam-stack&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://kalinchernev.github.io/releasing-new-blog/&#34;&gt;here&lt;/a&gt; ;)&lt;/p&gt;

&lt;h3 id=&#34;start&#34;&gt;Start&lt;/h3&gt;

&lt;p&gt;For the tutorial, assume I&amp;rsquo;m speaking about &lt;a href=&#34;https://github.com/Vagr9K/gatsby-advanced-starter&#34;&gt;gatsby advanced starterkit&lt;/a&gt; although same principles can be applied to which-ever starterkit or gatsby setup. The important part is to have markdown as data source, as well as well-defined front-matter which is parsed by &lt;a href=&#34;https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-transformer-remark&#34;&gt;gatsby-transformer-remark&lt;/a&gt; and exposed to a GraphQL API within the Gatsby. In short, make sure you have markdown files so that the information you write could be understood by NetlifyCMS and Gatsby, and many others actually.&lt;/p&gt;

&lt;h3 id=&#34;netlifycms&#34;&gt;NetlifyCMS&lt;/h3&gt;

&lt;p&gt;NetlifyCMS is an open source decoupled back-end built on React, which &lt;a href=&#34;https://www.netlifycms.org/docs/intro/&#34;&gt;integrates with Github API&lt;/a&gt;. I personally really like this idea, because publishing workflows actually translate to steps developers already take on code repositories.&lt;/p&gt;

&lt;p&gt;To use this admin UI application easily, you can &lt;a href=&#34;https://github.com/netlify/netlify-cms/blob/master/docs/quick-start.md&#34;&gt;integrate it with the Netlify service&lt;/a&gt; which will watch for changes in your github repository and do the necessary builds, previews and deploys.&lt;/p&gt;

&lt;p&gt;In order to make Gatsby work with this tutorial, you will need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;make a &lt;a href=&#34;https://www.gatsbyjs.org/docs/building-with-components/#page-components&#34;&gt;page component&lt;/a&gt; for the admin page, this should include the scripts loading the NetlifyCMS app&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;include the &lt;code&gt;config.yml&lt;/code&gt;&lt;span style=&#34;font-size: 1rem;&#34;&gt;​ file in&amp;nbsp;&lt;/span&gt;&lt;code&gt;static&lt;/code&gt;&lt;span style=&#34;font-size: 1rem;&#34;&gt;​ folder of Gatsby, as it does not need to be optimized by webpack&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have configured Netlify service to take your master branch and execute &lt;code&gt;npm run build&lt;/code&gt; on new deployments, a new push will already give you access to the admin UI app.&lt;/p&gt;

&lt;h3 id=&#34;gatsby&#34;&gt;Gatsby&lt;/h3&gt;

&lt;p&gt;This side might seem a bit more complex compared to copy-paste and rework to a React component of few lines of code, but it&amp;rsquo;s actually a simple process.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;move all markdown files into 1 folder, you need a flat structure, otherwise NetlifyCMS won&amp;rsquo;t be able to list the existing content in the dashboard&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;configure the &lt;code&gt;SiteConfig.js&lt;/code&gt;&lt;span style=&#34;font-size: 1rem;&#34;&gt;​to point to this folder containing the files&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;configure also, by the way, configure also the &lt;code&gt;config.yml&lt;/code&gt; of Netlify to be the same target&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check if all works, and if yes, just make another deployment to the your repository. I personally removed all the unnecessary content manually and had to flush the cache of the last deploy in the console.&lt;/p&gt;

&lt;h3 id=&#34;the-result&#34;&gt;The result&lt;/h3&gt;

&lt;p&gt;You have a modern toolchain of React, GraphQL, webpack and similar called Getsby, and you have a working Admin UI to manage your content when you&amp;rsquo;re lazy to open your editor ;)&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a &lt;a href=&#34;https://github.com/kalinchernev/kalinchernev.github.io/blob/blog/static/videos/netlify-cms-gatsby.mp4&#34;&gt;video to demonstrate the process&lt;/a&gt; from making a draft which is a pull request, opening a preview and then publishing the change which gets automatically deployed on the site.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/uploads/2017/08/16/Aug%2017%202017%2012-41%20AM.mp4&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Serverless github bot with AWS Lambda and API Gateway </title>
      <link>https://kalinchernev.github.io/serverless-github-bot-aws-lambda-api-gateway-nodejs/</link>
      <pubDate>Tue, 11 Jul 2017 22:40:00 +0000</pubDate>
      
      <guid>https://kalinchernev.github.io/serverless-github-bot-aws-lambda-api-gateway-nodejs/</guid>
      <description>

&lt;p&gt;This tutorial will show you how to build a small github bot app which is &amp;ldquo;listening&amp;rdquo; for pull requests&amp;rsquo; events on &amp;ldquo;open&amp;rdquo; and &amp;ldquo;reopen&amp;rdquo; by &lt;a href=&#34;https://greenkeeper.io/&#34;&gt;greenkeeper.io&lt;/a&gt;. When the author is the greenkeeper bot, our bot will in turn, correct the title and the tags of the pull request to match conventions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/uploads/2017/07/12/github_bot_correcting_greenkeeper-1.png&#34; alt=&#34;Github bot correcting the greenkeeper bot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve come to this article because you already have knowledge about the technical topics, but you are more interested in the concrete steps, you can skip the following introductory parts and go directly to the technical specifics below. To go to the technical details scroll down to the &lt;strong&gt;&amp;ldquo;10 steps to make it happen&amp;rdquo;&lt;/strong&gt; section ;)&lt;/p&gt;

&lt;p&gt;The script will actually be pretty small and simple, though there are quite some interesting ideas you might get on the way.&lt;/p&gt;

&lt;h2 id=&#34;serverless&#34;&gt;Serverless&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Serverless_computing&#34;&gt;Serverless computing&lt;/a&gt; is a relatively new trend which is getting greater popularity after Amazon released their &lt;a href=&#34;https://aws.amazon.com/lambda/&#34;&gt;AWS Lambda&lt;/a&gt; service in the end of 2014. I published about this topic in a bit &lt;a href=&#34;https://kalinchernev.github.io/january-digest-2017/#cloud&#34;&gt;more details earlier this year&lt;/a&gt;. In one sentence, serverless architectures (aka cloud functions) are getting traction in cases where high-level architecture control is sufficient for developers who delegate the details about the infrastructure management to a hidden underlying layer managed by a cloud provider.&lt;/p&gt;

&lt;p&gt;In addition to the low maintenance efforts, pricing per resource is also a lucrative opportunity for app developers - at the moment 1 million requests to AWS Lambda are &lt;a href=&#34;https://aws.amazon.com/free/&#34;&gt;free&lt;/a&gt; - this is generous! Later, &lt;a href=&#34;https://aws.amazon.com/lambda/pricing/&#34;&gt;pricing&lt;/a&gt; continues to be calculated based on actual usage. This means that applications cost money when they actually compute. That&amp;rsquo;s good for both up-scaling and down-scaling.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a graphic from &lt;a href=&#34;https://acloud.guru/&#34;&gt;acloud.guru&lt;/a&gt; which explains this evolution step in simple terms, I think:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/uploads/2017/07/11/brief-history-of-cloud-acloud-guru.png&#34; alt=&#34;Where is the serverless in the history of the cloud&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Lastly, cloud functions such as AWS Lambda come well into play in event-oriented designs. Here&amp;rsquo;s a simplified list of some &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/use-cases.html&#34;&gt;official use cases&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;event-driven services where the cloud function is run in response to other events - usually triggered by AWS S3, SNS, DynamoDB, etc.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;services responding to HTTP requests - triggered by Amazon API Gateway or other AWS clients.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A github bot app can be considered as a service from the second set of scenarios. The end result is an API endpoint responding to &lt;code&gt;POST&lt;/code&gt; requests (events) from &lt;a href=&#34;https://developer.github.com/webhooks/&#34;&gt;github webhooks&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;notes-on-the-aws-serverless-stack&#34;&gt;Notes on the AWS serverless stack&lt;/h2&gt;

&lt;p&gt;Watching videos and reading tutorials on the topic can get you pretty excited. Here are some notes about steps which didn&amp;rsquo;t go totally smooth during my journey, i.e. I want to prepare you for the reality before you get frustrated ;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) The AWS services ain&amp;rsquo;t that easy, especially if you&amp;rsquo;re relatively new to AWS in overall&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/documentation/lambda/&#34;&gt;AWS Lambda developer guide&lt;/a&gt; - 300+ pages&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/documentation/apigateway/&#34;&gt;Amazon API Gateway developer guide&lt;/a&gt; - 450+ pages&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/documentation/iam/&#34;&gt;IAM documentation&lt;/a&gt; - I don&amp;rsquo;t even want to check &amp;hellip;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short - there&amp;rsquo;s a lot of information and you have to find your way through the important parts which will help you in the specific case.&lt;/p&gt;

&lt;p&gt;For our case in this tutorial, let&amp;rsquo;s assume we can follow the getting started guide and build a simple cloud function working behind an &lt;a href=&#34;http://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started.html&#34;&gt;API gateway endpoint&lt;/a&gt;. If you want to do it right, you will have to have an idea about concepts such as: &lt;a href=&#34;http://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html&#34;&gt;mapping request and response data&lt;/a&gt;, getting to know some new &lt;a href=&#34;http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html&#34;&gt;template language for mapping variables&lt;/a&gt;, etc. These are the basics of API Gateway to get you going with the request and response management. Then come some fundamentals you&amp;rsquo;ll need about the AWS Lambda too - knowing what is a &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-handler.html&#34;&gt;handler function&lt;/a&gt; (the cloud function), figure &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-context.html&#34;&gt;the parameters of the handler&lt;/a&gt; and &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-logging.html&#34;&gt;reading logs&lt;/a&gt; from another AWS service.&lt;/p&gt;

&lt;p&gt;In short, &amp;ldquo;keep calm and learn AWS services&amp;rdquo;, at least the basics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) We speak cloud abstraction here - it is not easily reproducible for local development&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I spent quite some time researching on ways to have the whole AWS API Gateway + AWS Lambda setup locally so that I can start hacking quickly on my computer, but I haven&amp;rsquo;t found anything so far. If you have one or some in mind - please tell me!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) We still write JavaScript and Node.js - be ready for the regular hurdles you&amp;rsquo;ll normally have&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The fact that you&amp;rsquo;re delegating the infrastructure complexity to someone else out there doesn&amp;rsquo;t mean that your code will automagically work, at least not in the Node.js world, not at the moment.&lt;/p&gt;

&lt;p&gt;For example, sometimes you would receive errors &lt;a href=&#34;https://forums.aws.amazon.com/thread.jspa?threadID=229528&#34;&gt;like this&lt;/a&gt; and you will have to apply your JavaScript knowledge and patience to switch between versions of Node, transpile the code for the Lambda to be able to show you useful error messages &amp;hellip;&lt;/p&gt;

&lt;p&gt;For me, the &lt;a href=&#34;https://serverless.com/&#34;&gt;serverless&lt;/a&gt; framework worked pretty well in the deployment part. It definitely hid most of the complexity of understanding template languages and setting up boilerplate code for the function to work.&lt;/p&gt;

&lt;h2 id=&#34;notes-on-the-serverless-https-serverless-com-framework&#34;&gt;Notes on the &lt;a href=&#34;https://serverless.com/&#34;&gt;serverless&lt;/a&gt; framework&lt;/h2&gt;

&lt;p&gt;If you, like me, feel that the setup of the framework is a bit too much, then just go directly to the &lt;a href=&#34;https://github.com/serverless/examples&#34;&gt;example repository&lt;/a&gt; and get to know the &lt;a href=&#34;https://github.com/serverless/examples/tree/master/aws-node-github-webhook-listener&#34;&gt;aws-node-github-webhook-listener&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By using this example boilerplate, you will need only 2 keys auth components to make the communication between services work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/&#34;&gt;Github user token&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/general/latest/gr/managing-aws-access-keys.html&#34;&gt;AWS user tokens&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Try to keep the scope of permissions to a minimum to ensure best security in your applications. Both AWS and serverless provide other authentication options you might feel more comfortable with.&lt;/p&gt;

&lt;h2 id=&#34;notes-on-the-github-part&#34;&gt;Notes on the github part&lt;/h2&gt;

&lt;p&gt;The setup on github is simpler than AWS. Basically, you&amp;rsquo;ll need to read about &lt;a href=&#34;https://developer.github.com/webhooks/&#34;&gt;webhooks&lt;/a&gt;. The documentation is without a doubt - great - it walks you through all the stages from setting up a local dev environment, testing a hook, and also having a good knowledge of the structure of the webhooks&amp;rsquo; payloads.&lt;/p&gt;

&lt;p&gt;This is a high-level action plan:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Have an account, a repo, etc.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Generate a user token. (&lt;a href=&#34;https://help.github.com/articles/differences-between-user-and-organization-accounts/&#34;&gt;user can be a bot&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Setup webhooks for a repository.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter information about the API Gateway endpoint which works with the cloud function, this is your bot.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;10-steps-to-make-it-happen&#34;&gt;10 steps to make it happen&lt;/h2&gt;

&lt;p&gt;Ok, enough introductory talks, that&amp;rsquo;s the more visual part of the article containing the main milestones making the things actually work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Create a user that can work with AWS Lambda and API Gateway services.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/uploads/2017/07/12/create_aws_user_lambda.gif&#34; alt=&#34;Creating an AWS user you can operate with&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For simplicity, I&amp;rsquo;m adding the user to the group of admins. Then I&amp;rsquo;m downloading the tokens for later use with the serverless framework.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Go to your github profile settings page and &lt;a href=&#34;https://github.com/settings/tokens/new&#34;&gt;generate a user token&lt;/a&gt; by which the bot will act on your behalf.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can make a cool bot separate from your account, of course.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/uploads/2017/07/12/new_user_token_github.png&#34; alt=&#34;Creating a new user token on github.com&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you save this form, you will see the token, which you have to save somewhere with the same attention you would have to your password:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;a href=&#34;https://developer.github.com/webhooks/securing&#34;&gt;Generate a webhook secret&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/uploads/2017/07/12/generate_webhook_secret-1.png&#34; alt=&#34;Generating a webhook on github.com&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Input the user token and the webhook secret in the serverless config file&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/uploads/2017/07/12/save_config.png&#34; alt=&#34;Saving configurations in the serverless framework config file&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Put function code in the &lt;code&gt;handler.js&lt;/code&gt; file&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/uploads/2017/07/12/handler.png&#34; alt=&#34;Editing the cloud function&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. You can try to deploy the function:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ serverless deploy

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Watch it fail ;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/uploads/2017/07/12/enter_credentials_serverless.png&#34; alt=&#34;Failing deployment in the serverless framework&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Export your keys (which you downloaded in the &lt;code&gt;credentials.csv&lt;/code&gt; files earlier as:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ export AWS_ACCESS_KEY_ID=
$ export AWS_SECRET_ACCESS_KEY=
# AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY are now available for serverless to use
serverless deploy

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;8. Run &lt;code&gt;serverless deploy&lt;/code&gt; again and watch it succeeding&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/uploads/2017/07/12/serverless_deploy_success.gif&#34; alt=&#34;Showing a successful deployment of a function on AWS&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Take the provided URL and add it to the webhooks of your repository where you want the bot to take effect&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/uploads/2017/07/12/adding_webhook_github.png&#34; alt=&#34;Adding a new webhook on github.com&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Few notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This is the secret you previously generated via the command line&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It&amp;rsquo;s a good practice to filter only the necessary events in order to minimize the load to the endpoint&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;10. Trigger the webhook either by github or by closing and re-opening an existing pull request which has been opened by greenkeeper bot.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s an example script you can use:
&lt;script src=&#34;https://gist.github.com/kalinchernev/d1e79a7f883a4d37f50519d9b05df0c5.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;extras&#34;&gt;Extras&lt;/h2&gt;

&lt;p&gt;When you have this automated corrections on pull request titles and tags, you might also need to &lt;a href=&#34;https://github.com/greenkeeperio/greenkeeper-lockfile&#34;&gt;update the lock files&lt;/a&gt; of the pull request to make all ready for merging.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>March digest 2017</title>
      <link>https://kalinchernev.github.io/march-digest-2017/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/march-digest-2017/</guid>
      <description>

&lt;p&gt;This one will be on various personal thoughts on Medium, the JAM stack, the OpenAPI specification, and coding katas.&lt;/p&gt;

&lt;h3 id=&#34;medium&#34;&gt;Medium&lt;/h3&gt;

&lt;p&gt;If you’re a regular reader or writer on Medium, you already know about the &lt;a href=&#34;https://medium.com/3minread&#34;&gt;latest changes&lt;/a&gt;. Together with the new features, a &lt;a href=&#34;https://help.medium.com/hc/en-us/articles/115004750267-Medium-Membership-Partner-Program-FAQ&#34;&gt;partner program&lt;/a&gt; came into play, where companies and vendors will be more motivated to publish content about their products and services.&lt;/p&gt;

&lt;p&gt;Being a small fish without financial interests in blogging (at least here and now), I decided to research new channels of communicating my ideas out of Medium. As a casual happy writer, I really wish Medium best of luck in their search of even more and better ways of monetizing their great platform and continue connecting deep thinkers.&lt;/p&gt;

&lt;p&gt;Medium is aiming to solve problems at large scale for businesses and important individuals in the mission of un-breaking the internet and the publishing again. As a technical blogger, I’m interested in achieving smaller goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;I want to share about my wider “deep” thinking working with various technologies and tools&lt;/strong&gt;. I am not vendor-interested in this communication channel. I’m more into experimenting with many tools and using only a few, later sharing my findings from hands-on work. For this, I can place my thoughts anywhere I decide to — I lately admire &lt;a href=&#34;https://dev.to/&#34;&gt;dev.to&lt;/a&gt; which feels like “the right place to be” — but the editor is not as easy as in Medium. So yeah, I can just do the markdowns in a static site generator and re-post wherever …&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I want to be part of a community somehow.&lt;/strong&gt; Here at Medium, things tend to happen naturally. For example, I post &lt;a href=&#34;https://medium.com/@kalin.chernev/the-guide-to-learn-graphql-i-wish-i-found-few-months-go-97f9d9ca6f12&#34;&gt;a story about GraphQL&lt;/a&gt; which reaches 1.5k visitors, 7 of which come &lt;a href=&#34;http://dev-blog.apollodata.com/&#34; title=&#34;dev-blog.apollodata.com&#34;&gt;dev-blog.apollodata.com&lt;/a&gt;. I mean, that’s amazing — If I hadn’t shared my short notes on Medium, no-one using or reading about Apollo would have ever have visited my blog post. For this, I plan on &lt;a href=&#34;https://disqus.com/&#34;&gt;disqus&lt;/a&gt; integration which seems straight-forward and covering this “business requirement”.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I want my code to look really good, and I want it to be more interactive.&lt;/strong&gt; This comes simply from the fact that I write mostly about code, so I want it to look nice. Medium allows effective snippets placement and github gists, yet there are many nice-looking styling options for code parsed out of markdown. Having control over the parsed version of your writing is an advantage in some aspects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I want to have statistics.&lt;/strong&gt; Medium provides stats on each story and it’s really useful to have a global idea what’s going on. For the same GraphQL article I mentioned above, over 1k of the visits come from flipboard.com. That’s all I know as my application request to have a publication with Google Analytics required a payment I got informed a month after making the application. No Google Analytics on Medium unless you are having business goals. I think I’ll manage to integrate Google Analytics in my new stack without 70 dollars for the infrastructure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the moment, I’ve jotted just a few high-level milestones in the upcoming digital transformation …&lt;/p&gt;

&lt;h3 id=&#34;jam-stack&#34;&gt;JAM stack&lt;/h3&gt;

&lt;p&gt;As Medium evolves, as my interests into improving the ways of expressing my casual tech thoughts in writing. Researching on some of the nerdiest ways I can make a blog for myself — the JAM stack came into light. The &lt;a href=&#34;https://jamstack.org/&#34;&gt;JAM stack&lt;/a&gt; is an acronym of having JavaScript, APIs and Markup. It’s absolutely revolutionary — I mean — nobody ever though so far in history that the web could handle HTML, CSS and JavaScript in such ways. (That’s ironic) The stack is tightly related to the topic of &lt;a href=&#34;https://www.staticgen.com/&#34;&gt;static sites generators&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;J&lt;/strong&gt; will maybe be in React. At this stage, I’ve found a decent &lt;a href=&#34;https://www.packtpub.com/web-development/mastering-react&#34;&gt;book to follow&lt;/a&gt; on the way. At any case, investing into learning React will pay much better for me rather than writing new articles on a platform which can change its business goals tomorrow and just go offline.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;A&lt;/strong&gt; will be the &lt;a href=&#34;https://developer.github.com/v3/&#34;&gt;github API&lt;/a&gt;. With inspirations from &lt;a href=&#34;https://www.netlifycms.org/&#34;&gt;netlifycms&lt;/a&gt;, a well-known &lt;a href=&#34;https://www.netlifycms.org/docs/editorial-workflow/&#34;&gt;git flow translates to my upcoming publishing workflow&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;M&lt;/strong&gt; part of the stack — I didn’t manage to decide upon this yet as the trends are moving too fast.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So cool this is, google will show you a &lt;a href=&#34;https://www.kickstarter.com/projects/846364129/jamstack-the-worlds-first-attachable-guitar-amplif?lang=fr&#34;&gt;kickstarter campaign for the jam stack&lt;/a&gt; and there is a song to play while working:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/oFRbZJXjWIA?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;open-api-specification&#34;&gt;Open API specification&lt;/h3&gt;

&lt;p&gt;In this month, I wrote a story about &lt;a href=&#34;https://restful.io/prototyping-your-api-project-with-the-open-api-specification-and-node-js-tools-7cb19f47f72d&#34;&gt;prototyping with the OpenAPI specifcation&lt;/a&gt;. It’s describing some techniques using the &lt;a href=&#34;https://github.com/Rebilly/generator-openapi-repo&#34;&gt;generator-openapi&lt;/a&gt; — made by the team of &lt;a href=&#34;https://apis.guru/&#34;&gt;APIs.guru&lt;/a&gt; — really nice product to use!&lt;/p&gt;

&lt;p&gt;I’m personally impressed by the community progress made around v3 of the latest spec. A release candidate was published in the beginning of the month, and various software packages literally sprouted in weeks.&lt;/p&gt;

&lt;p&gt;I think there are mainly few links to follow the fast progress:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openapi.toolbox.apievangelist.com/&#34;&gt;OpenAPI toolbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mermade/awesome-openapi3&#34;&gt;Unofficial awesome list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification&#34;&gt;The github repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the awesome list, there are few tools I hadn’t seen before. They seem to be made in quite a different way than the swagger-ui and swagger-editor, etc. that still keep popular positions in the toolbox.&lt;/p&gt;

&lt;p&gt;Another good news this month for fans of the OpenAPI initiative was the &lt;a href=&#34;https://github.com/swagger-api/swagger-editor/releases/tag/v3.0.0&#34;&gt;v3 release of the swagger-editor&lt;/a&gt; which brought a warmly-welcomed auto-suggest feature:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*n9qpZymZykXOuG9zxdUryQ.png&#34; alt=&#34;Nice autocomplete feature of the swagger editor&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;coding-katas&#34;&gt;Coding katas&lt;/h3&gt;

&lt;p&gt;The first competitive learning event (coding battle) from the Hack League team took place.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*aqpQIY4DURgBoYGJTDyIQg.jpeg&#34; alt=&#34;An image from the hack event&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It was my first event since a very long time, so I could see some new people and technologies during the event :)&lt;/p&gt;

&lt;p&gt;As organizers mentioned, the &lt;a href=&#34;http://git.hackleague.io/root/cb-2017-03-20&#34;&gt;problems of the competition&lt;/a&gt; are open after the event and you are encouraged to see them and get encouraged to join the next event :)&lt;/p&gt;

&lt;p&gt;I think (and I feel) that the problems are not the most complex thing you can see as a developer, but they definitely get closer to testing developers’ shape in solving problems fast and with confidence in the small steps.&lt;/p&gt;

&lt;p&gt;As I really suck at making small steps really fast, I’m trying to get into the habit making regular exercise at &lt;a href=&#34;https://www.codewars.com&#34;&gt;codewars.com&lt;/a&gt; with the idea of improving shape through &lt;a href=&#34;https://en.wikipedia.org/wiki/Kata&#34;&gt;katas&lt;/a&gt;. This is not a radically new idea for me, as there are the &lt;a href=&#34;http://es6katas.org/&#34;&gt;ES6katas&lt;/a&gt; teaching TDD as codewards and &lt;a href=&#34;https://nodeschool.io/&#34;&gt;nodeschool&lt;/a&gt; which provides various exercises for developers. (If you really enjoy them, you can give me a hand at the &lt;a href=&#34;https://github.com/workshopper/stream-adventure/issues&#34;&gt;stream-adventure workshopper&lt;/a&gt; and I promise quick reviews and quick contribution gratification)&lt;/p&gt;

&lt;p&gt;I believe in the important of taking care of my coding shape. I think it’s similar to doing sports and exercising or playing musical instruments. The tricky part being that &lt;a href=&#34;https://hackhands.com/dont-code-katas/&#34;&gt;programmers tend to overthink it sometimes&lt;/a&gt; …&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Prototyping APIs with Open API Specification and Node.js</title>
      <link>https://kalinchernev.github.io/prototyping-apis-open-api-specification/</link>
      <pubDate>Fri, 10 Mar 2017 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/prototyping-apis-open-api-specification/</guid>
      <description>

&lt;p&gt;A story about using Node.js community-built tools effectively in order to speed up the prototyping phase of your API project. In the whole article, &lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification&#34;&gt;Open API specification&lt;/a&gt; (which recently reached a RC on version 3) refers to version 2, also known as &lt;a href=&#34;http://swagger.io/&#34;&gt;Swagger specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article I’ll briefly demonstrate how you can to make use of few community-driven tools which I came across recently and I definitely recommend: &lt;a href=&#34;https://medium.com/@typicode&#34;&gt;Typicode&lt;/a&gt;’s &lt;a href=&#34;https://github.com/typicode/json-server&#34;&gt;json-server&lt;/a&gt; and &lt;a href=&#34;https://medium.com/@Rebilly&#34;&gt;Rebilly&lt;/a&gt;’s &lt;a href=&#34;https://github.com/Rebilly/generator-openapi-repo&#34;&gt;Open API generator&lt;/a&gt;. By using a combination of them, you can quickly achieve a mock API server with really nice and useful documentation based in short deadlines.&lt;/p&gt;

&lt;h3 id=&#34;the-open-api-generator-http-generator-openapi-repo-specification-is-first&#34;&gt;The &lt;a href=&#34;http://generator-openapi-repo&#34;&gt;Open API generator&lt;/a&gt;: specification is first&lt;/h3&gt;

&lt;p&gt;I think it’s better to start with the specification as it answers many questions, even before making any real or fake data for the API.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/Rebilly/generator-openapi-repo/blob/master/README.md&#34;&gt;official documentation&lt;/a&gt; is sufficient to get started. There’s really no need for detailed tutorial here on how to use the tool in order to make a working project — just follow the steps. (And maybe push an empty commit on the &lt;code&gt;gh-pages&lt;/code&gt; branch before first deploy just to make sure)&lt;/p&gt;

&lt;p&gt;More importantly, you have to know why this generator is good and why I recommend it 😌&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It works with &lt;a href=&#34;http://swagger.io/swagger-editor/&#34;&gt;&lt;strong&gt;swagger editor&lt;/strong&gt;&lt;/a&gt; out of the box, which feels like having a back-end for building your specification and documentation&lt;/li&gt;
&lt;li&gt;Your specification (aka swagger spec) can be split into several files, which makes the project more manageable and mainteanable&lt;/li&gt;
&lt;li&gt;Sleek documentation with &lt;a href=&#34;http://swagger.io/redoc-openapi-powered-documentation/&#34;&gt;&lt;strong&gt;ReDoc&lt;/strong&gt;&lt;/a&gt; (though &lt;a href=&#34;http://swagger.io/swagger-ui/&#34;&gt;swagger-ui&lt;/a&gt; is also generated) I think ReDoc is excellent in following the API documentation trends.&lt;/li&gt;
&lt;li&gt;The results of your work can easily be deployed to &lt;a href=&#34;https://pages.github.com/&#34;&gt;&lt;strong&gt;github pages&lt;/strong&gt;&lt;/a&gt;. It’s possible to make requests from here to external API server like the one we’ll have with json-server, as it supports CORS out of the box. Basically, as long as the server can accept requests from your github pages, these server really effectively as living documentation.&lt;/li&gt;
&lt;li&gt;Continuous integration with &lt;strong&gt;Travis&lt;/strong&gt; comes out of the box. Every time you push an update in the specification on the master branch, Travis checks for errors and deploys to github pages if everything is ok.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you follow the steps correctly, you’ll end up with a simplified version of &lt;a href=&#34;https://github.com/Rebilly/RebillyAPI&#34;&gt;RebillyAPI repository&lt;/a&gt;. That’s the final outcome that’ll motivate you to try the generator now, if you haven’t already done so 😊&lt;/p&gt;

&lt;p&gt;Probably you might find other similar tools such as &lt;a href=&#34;https://github.com/sourcey/spectacle&#34;&gt;spectacle&lt;/a&gt;, however this tool worked really well for me and it covers everything I think one might need during a prototyping phase of an API project.&lt;/p&gt;

&lt;p&gt;Thus, you have a tool to develop an Open API specification and deploy its documentation to github pages, making it nice and accessible for the public. With this Open API specification, you can later generate server/client code with &lt;a href=&#34;http://swagger.io/swagger-codegen/&#34;&gt;Codegen&lt;/a&gt;, or just deploy the spec to services such as &lt;a href=&#34;https://cloud.google.com/endpoints/docs/open-api-spec&#34;&gt;Cloud Endpoints&lt;/a&gt; or any other that will soon come with similar integration.&lt;/p&gt;

&lt;p&gt;Basically, there are many opportunities available for you when you have the specification. Next step is to generate a server with mock data which matches the specification’s “contract” with the documentation or just any front-end app meant to work with the specification.&lt;/p&gt;

&lt;h3 id=&#34;the-json-server-generator-fake-it-till-you-make-it&#34;&gt;The JSON server generator: fake it till you make it&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/typicode/json-server/blob/master/README.md&#34;&gt;JSON server tool&lt;/a&gt; is not really a generator per se, however it’s easy to integrate it as such in your toolchain. What I mean is, the tool is based on &lt;a href=&#34;http://com&#34;&gt;express.js&lt;/a&gt; and its popular middleware. You won’t need the express generator as you focus on the server. The endpoints are automatically discovered out of JSON files and you do not need express’ sophisticated templates views, routes, etc.&lt;/p&gt;

&lt;p&gt;A simple &lt;a href=&#34;https://github.com/typicode/json-server/blob/master/README.md#generate-random-data&#34;&gt;function&lt;/a&gt; in a script run by a npm task can easily do for having a generator for the server part. Also, &lt;a href=&#34;https://www.npmjs.com/package/faker&#34;&gt;faker&lt;/a&gt; plays really well with this “generator” function. (no word play intended here) &lt;a href=&#34;https://coligo.io/create-mock-rest-api-with-json-server/&#34;&gt;Check an example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main ideas you should understand with JSON server:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It’s an easy start out of an example or existing JSON files&lt;/li&gt;
&lt;li&gt;It’s easy to make a generator script to work with the tool&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, another benefit is that the server can be easily deployed. For example, if you decide to deploy on heroku, you’ll only need to update your server to use &lt;code&gt;process.env.IP&lt;/code&gt; and &lt;code&gt;process.env.PORT&lt;/code&gt;. The documentation points to the &lt;a href=&#34;http://jsonplaceholder.typicode.com/&#34;&gt;jsonplaceholder&lt;/a&gt; example, but surely &lt;a href=&#34;http://hook.io/&#34;&gt;hook.io&lt;/a&gt; or a similar cloud service will work just fine. Just keep it simple and working — the main idea of using this tool is to move fast and effectively.&lt;/p&gt;

&lt;p&gt;Another option for generating a server on top of an existing specification is the &lt;a href=&#34;https://www.npmjs.com/package/swagger-server&#34;&gt;swagger-server&lt;/a&gt; package which also integrates with express.js, however does not necessarily provide the ready filters, sorts, etc. that json-server does.&lt;/p&gt;

&lt;h3 id=&#34;additional-ideas&#34;&gt;Additional ideas&lt;/h3&gt;

&lt;p&gt;I personally separated both tools in 2 repositories for the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The mock API server can be managed and deployed independently&lt;/li&gt;
&lt;li&gt;Data from the mock server can be easily fetched from the github pages documentation, as JSON Server comes with CORS enabled by default&lt;/li&gt;
&lt;li&gt;This same mock API server can be just thrown away when the real server comes into place to work with the documentation and/or application&lt;/li&gt;
&lt;li&gt;It’s also good to have the documentation repository separate to make it easier to manage in a similar way as the server. Good example is how both swagger ui, swagger editor and ReDoc are integrated into a single project focusing on developing specification and documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;further-notes&#34;&gt;Further notes&lt;/h3&gt;

&lt;p&gt;That was a brief article sharing some love about open source projects which deserve an applause for being simple and effective helpers for developers.&lt;/p&gt;

&lt;p&gt;If this article gets any positive feedback, I will make a follow-up story to this one showing few tips to improve the workflow of editing and publishing specification to documentation to a working API.&lt;/p&gt;

&lt;p&gt;At any case, the search of more effective and well-integrated API prototyping, documentation and deployment continues.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>February digest 2017</title>
      <link>https://kalinchernev.github.io/february-digest-2017/</link>
      <pubDate>Wed, 01 Mar 2017 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/february-digest-2017/</guid>
      <description>

&lt;p&gt;After my &lt;a href=&#34;https://kalinchernev.github.io/january-digest-2017&#34;&gt;January digest&lt;/a&gt;, I got feedback from a precious reader that these stories must be toilet-friendly, so I’ll keep it short, directly to the essence :)&lt;/p&gt;

&lt;h3 id=&#34;productivity&#34;&gt;Productivity&lt;/h3&gt;

&lt;p&gt;Without a question, the first thing coming to my mind in this month is the set of small changes I made with regards to my typing habits.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en&#34;&gt;Vimium&lt;/a&gt; turned out to be really useful utility in my daily work on my &lt;a href=&#34;http://shop.lenovo.com/us/en/laptops/thinkpad/x-series-tablet/x220tablet/&#34;&gt;x220t&lt;/a&gt;. Together with the &lt;a href=&#34;https://en.wikipedia.org/wiki/Pointing_stick&#34;&gt;clit mouse&lt;/a&gt;, browsing becomes more straight-forward, even when clicking is inevitable. Yes, I feel more comfortable in vim after having vimium in my life, but I still prefer to &lt;a href=&#34;https://www.toptal.com/php/how-to-be-efficient-in-phpstorm&#34;&gt;be pragmatic at work&lt;/a&gt;. In the end, it all comes to wiring up an effective association between the brain and the computer which boils down to having &lt;a href=&#34;http://www.ratatype.com/learn/&#34;&gt;effective typing habits&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another big discovery for me this month was the &lt;a href=&#34;https://www.imagemagick.org/script/convert.php&#34;&gt;imagemagick’s&lt;/a&gt; &lt;code&gt;[conver](https://www.imagemagick.org/script/convert.php)&lt;/code&gt; &lt;a href=&#34;https://www.imagemagick.org/script/convert.php&#34;&gt;cli tools&lt;/a&gt;. After spending more than 30 minutes of trying to make a &lt;a href=&#34;https://twitter.com/kalinchernev/status/835053566632964097&#34;&gt;screenshot of gmail message for a tweet&lt;/a&gt; and not managing to convert paged pdf into a single continuous image, that command in the CLI really did magic:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ convert in.pdf -append out.png
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;graphql&#34;&gt;GraphQL&lt;/h3&gt;

&lt;p&gt;I managed to spend few hours with this technology this month and I will remember few highlights as a result of that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@kalin.chernev/the-guide-to-learn-graphql-i-wish-i-found-few-months-go-97f9d9ca6f12#.7ss1zopsu&#34;&gt;My short sharing session&lt;/a&gt; got more than 1000 visits on day 1, scoring for more than 1.4k at present moment.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://graphql-docs.com/&#34;&gt;GraphQL docs&lt;/a&gt; got published by &lt;a href=&#34;https://scaphold.io/&#34;&gt;Scaphold&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/APIs-guru/graphql-voyager&#34;&gt;GraphQL voyager&lt;/a&gt; got published by &lt;a href=&#34;https://medium.com/@apis.guru&#34;&gt;APIs.guru&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The technology is getting further traction and community love.&lt;/p&gt;

&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;

&lt;p&gt;Although there have been numerous resources coming by on a daily basis, these are the most prominent to my humble opinion:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opensource.guide/&#34;&gt;Open source guides&lt;/a&gt; by github&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dev-books.com/&#34;&gt;Dev books&lt;/a&gt; summary based on stackoverflow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoy, and keep reading and writing code for pleasure! :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The guide to learn GraphQL I wish I found few months go</title>
      <link>https://kalinchernev.github.io/graphql-guide-wish-found-before/</link>
      <pubDate>Thu, 16 Feb 2017 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/graphql-guide-wish-found-before/</guid>
      <description>

&lt;p&gt;Although I consider myself an intermediate JavaScript developer, I struggled for weeks to understand fundamental concepts which are obvious for those living in the React.js ecosystem. So, this is a list of things I now see which I consider to be not documented or explained well enough for people like myself — those who like the ideas behind GraphQL and want to use it, but not necessarily having any experience with the React.js toolchain.&lt;/p&gt;

&lt;p&gt;The list will follow the style of &lt;a href=&#34;https://medium.com/@dceddia&#34;&gt;Dave Ceddia&lt;/a&gt; who made &lt;a href=&#34;https://daveceddia.com/timeline-for-learning-react/&#34;&gt;a timeline to learn React&lt;/a&gt;. It was really handy when I was experimenting with React few months ago, because it’s splitting the topics clearly and logically, smoothing the learning curve for newcomers. (At least it smoothed mine)&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;0-introduction&#34;&gt;0. Introduction&lt;/h3&gt;

&lt;p&gt;As a most fundamental start of everything, you have to have an idea what GraphQL is, and what it’s not.&lt;/p&gt;

&lt;p&gt;Get motivated:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/UBGzsb2UkeY?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Get the basic concepts:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/WQLzZf34FJ8?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;For me, there are few reasons to invest time in learning GraphQL, even if I’m not a React developer, but an API enthusiast:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Less round trips to the server&lt;/li&gt;
&lt;li&gt;Declare what you want, get exactly what you need&lt;/li&gt;
&lt;li&gt;Introspection is convenient and useful&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://graphql.org/swapi-graphql/&#34;&gt;GraphiQL IDE&lt;/a&gt; is amazing&lt;/li&gt;
&lt;li&gt;Building proxy servers on top of existing REST APIs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GraphQL is a specification, it’s language independent, yet the most popular one is the JavaScript one. So, it’s useful to be comfortable with JavaScript for understanding the official documentation. (More or this later)&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;1-languages&#34;&gt;1. Languages&lt;/h3&gt;

&lt;p&gt;First, you have to be comfortable with at least one programming language and the concepts behind the GraphQL query language. Regardless of the language of choice, you have to be OK with 2 languages.&lt;/p&gt;

&lt;h3 id=&#34;2-syntax&#34;&gt;2. Syntax&lt;/h3&gt;

&lt;p&gt;Assuming that you follow the official track of &lt;a href=&#34;http://graphql.org/learn/&#34;&gt;learning GraphQL&lt;/a&gt; you will get some ideas about the syntax of GraphQL. You can improve your skills with it following &lt;a href=&#34;https://learngraphql.com/&#34;&gt;an online hands-on course&lt;/a&gt; as a complementary. By the end of these two, you will feel the power of querying information in a declarative way, which is as special as writing declarative components in React.&lt;/p&gt;

&lt;p&gt;Then, if you follow the &lt;a href=&#34;http://graphql.org/graphql-js/&#34;&gt;graphql.js&lt;/a&gt; track of the official website, which is something that I did, you will have to be comfortable with the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript syntax&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://es6katas.org/&#34;&gt;ES6&lt;/a&gt; syntax&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flowtype.org/&#34;&gt;Flow&lt;/a&gt; syntax&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The majority of developers will get around the ES6 for sure, but the Flow part was really problematic for me. Why? Because, it’s natural to head directly to the &lt;a href=&#34;http://graphql.org/graphql-js/type/&#34;&gt;types&lt;/a&gt; section as you already know that everything goes around types, but the syntax is nothing you have seen before. (I hadn’t)&lt;/p&gt;

&lt;p&gt;So, after a while, you will most probably end up on a higher-level scenario of using graphql.js with express, reading about &lt;a href=&#34;http://graphql.org/graphql-js/type/#graphqlobjecttype&#34;&gt;GraphQLObjectType&lt;/a&gt;. The documentation is highly concise on types and what is what and what is where, etc. Without having an idea that it’s written in Flow syntax (with ES6), you will be guessing a lot.&lt;/p&gt;

&lt;p&gt;The first eye-opening moment of syntax difference could be that you can &lt;a href=&#34;http://graphql.org/graphql-js/constructing-types/&#34;&gt;build types in several ways&lt;/a&gt;. The second one could be that &lt;a href=&#34;http://graphql.org/learn/execution/#root-fields-resolvers&#34;&gt;context, fields and resolvers&lt;/a&gt; start to speak to you. It’s one thing to follow the tutorials and achieving results mimicking the example code, but it’s a totally different thing when you can read the documentation and see that you can work with promises, globals, and how to work with fields in circular dependencies.&lt;/p&gt;

&lt;p&gt;At the moment of writing this article there is no single mentioning of Flow in the official documentation on the website.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;3-resolve&#34;&gt;3. Resolve()&lt;/h3&gt;

&lt;p&gt;If you come from React, &lt;code&gt;resolve()&lt;/code&gt; will maybe ring an association with &lt;code&gt;render()&lt;/code&gt; It serves a totally different purpose, as it’s basically answering the question of what a given field should consider part of the given type, but for me it bears a similar simplicity and importance to the declarative nature.&lt;/p&gt;

&lt;p&gt;Again, the documentation is good in giving a &lt;a href=&#34;http://graphql.org/learn/execution/#root-fields-resolvers&#34;&gt;simple explanation what you can do with these&lt;/a&gt;, however it took me some time to decipher the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fields: GraphQLFieldConfigMapThunk | GraphQLFieldConfigMap;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It was not easy to understand that &lt;code&gt;GraphQLFieldConfigMapThunk&lt;/code&gt; is used when fields should be able to handle circular dependencies.&lt;/p&gt;

&lt;p&gt;I have to be honest, it also took me more time to understand what are the magical parameters that go in this function. Different tutorials follow different ways to get the arguments they need, such as using &lt;code&gt;_&lt;/code&gt; for first arg (to skip using it), or using the &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&#34;&gt;destructing assignment&lt;/a&gt; to get part of the context, etc. Again, understanding documentation with Flow helps more than the &lt;code&gt;console.log(...args)&lt;/code&gt; I was using to figure them out.&lt;/p&gt;

&lt;h3 id=&#34;4-relay&#34;&gt;4. Relay&lt;/h3&gt;

&lt;p&gt;Relay is the tool that loosely couples with GraphQL. You need it for more sophisticated scenarios when you need caching, pagination, etc. I haven’t used it yet, as I’m on the fundamentals of GraphQL, but I know it’s out there and I will use it when “relay compliance” is necessary in bigger projects or special client scenarios.&lt;/p&gt;

&lt;p&gt;Not required to learn GraphQL.&lt;/p&gt;

&lt;h3 id=&#34;5-apollo&#34;&gt;5. Apollo&lt;/h3&gt;

&lt;p&gt;I follow it even more than relay, (because of &lt;a href=&#34;https://www.meteor.com/&#34;&gt;MDG&lt;/a&gt;) but I haven’t had the reasons to use it until now. From aside, it seems shiny and well supported. I think this is the direction to go when using non-React toolchain and when you need more sophisticated solutions with MDG-level of quality and coolness :)&lt;/p&gt;

&lt;p&gt;Also not required to learn GraphQL.&lt;/p&gt;

&lt;h3 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;I think that React.js developers are in a better position of understanding and working with GraphQL at this time. That is normal, as little by little I start to see how the different tools work together to solve problems in specific ways that come naturally by understanding concepts behind the declarative ways of thinking in facebook products at the moment.&lt;/p&gt;

&lt;p&gt;So, if you are a developer that does not know all the facebook products, like me, start small by understanding the syntax and the documentation well, experiment with small projects, and use the variety of more sophisticated tools when your projects grow and require more control and flexibility.&lt;/p&gt;

&lt;p&gt;Think client-first approach. The client as your consumer of the API, and the client who wants to get something done. There must be a reason why the documentation of GraphQL does not mention inter-related and more sophisticated tools directly — you use them when you need them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reflecting on node.js design patterns</title>
      <link>https://kalinchernev.github.io/reflecting-nodejs-design-patterns/</link>
      <pubDate>Sat, 04 Feb 2017 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/reflecting-nodejs-design-patterns/</guid>
      <description>

&lt;p&gt;Once upon on a time, there was a designer …&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*o-Igk7ZgpSz2Zu4syTG3-A.jpeg&#34; alt=&#34;funny JavaScript image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;No matter if the story is true or not, working with JavaScript on the server with Node.js at the moment is a very different experience compared to working with Python, Ruby or PHP. I’d personally say that the advantage of working with a single language everywhere comes with the price of having to learn different design patterns in order to use the language effectively.&lt;/p&gt;

&lt;p&gt;One of these fundamental concepts to learn is the asynchronous programming. There are many articles in the Node.js/JavaScript community about asynchronous programming in terms of what callbacks are and how to &lt;a href=&#34;https://www.npmjs.com/package/async&#34;&gt;solve problems of control flow with a library&lt;/a&gt;, a &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;promise&lt;/a&gt;, &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&#34;&gt;async/await&lt;/a&gt;, etc. These are useful when the question is generally:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How to use node modules in a good way?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And although it’s important to learn and follow best practices in implementation, I sometimes miss articles which answer another question:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How to organize my code in node modules in a good way?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this story I’ll be reflecting on few patterns which answer the latter.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;continuation-passing-style-pattern&#34;&gt;Continuation-passing style pattern&lt;/h3&gt;

&lt;p&gt;This is an easy concept to understand, but really fundamental for working with asynchronous code&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Synopsis&lt;/strong&gt;: In your continuation-passing style function (CPS):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;cb(null, data)&lt;/code&gt; instead of &lt;code&gt;return&lt;/code&gt; to pass on result.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;return cb(err)&lt;/code&gt; to pass on an error and exit the function.&lt;/li&gt;
&lt;li&gt;Communicate one single outcome from the function.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Synchronous
function add(a, b) {
  return a + b;
}

console.log(add(2, 2));

// Asynchronous
function addAsync(a, b, cb) {
  cb(a + b);
}

addAsync(2, 2, function add(result) {
  console.log(result);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it! Honestly, the first time I saw this type of snippet, I already felt an eye-opening moment. If you know this already, give yourself a tap on the shoulder! Good job!&lt;/p&gt;

&lt;p&gt;For aesthetics, you can re-factor the last function as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;addAsync(2, 2, result =&amp;gt; console.log(result));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of even:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;addAsync(2, 2, console.log);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important take-away here is that functions can be passed as arguments to other functions. These are &lt;strong&gt;functions acting like a return statement&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Node.js, conventions say that when you’re writing such CPS you must &lt;a href=&#34;https://nodejs.org/api/errors.html#errors_error_propagation_and_interception&#34;&gt;send the error to the first argument&lt;/a&gt; of the callback function.&lt;/p&gt;

&lt;p&gt;Let’s do something a bit more practical — define a function which takes a list of files. If there are files, just return them, but if no files are supplied, return an error message.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function readFiles (files, cb) {
  if (files.length) {
    cb(null, files)
  } else {
    cb(&#39;no files supplied&#39;)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function will then be consumed in this way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;readFiles(process.argv.slice(2), (err, data) =&amp;gt; {
  if (err) return console.error(err)
  console.log(data)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I highly encourage you to test this if you’re not sure how it works. If you are lazy to open a terminal session, just fire a &lt;a href=&#34;https://runkit.com/home&#34;&gt;RunKit&lt;/a&gt; and copy-paste these in the browser ;)&lt;/p&gt;

&lt;p&gt;Notice the &lt;code&gt;return&lt;/code&gt; is used in the case of an error to exit the function. This pattern is very popular and comes handy for almost any case where the consumer of your module needs to do one single thing and get a result.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;observer-pattern-with-eventemitter&#34;&gt;Observer pattern with EventEmitter&lt;/h3&gt;

&lt;p&gt;Node.js developers use the &lt;a href=&#34;https://nodejs.org/api/events.html#events_emitter_on_eventname_listener&#34;&gt;EventEmitter&lt;/a&gt; interface from day one as it’s “under the hood” of almost all node core modules. Especially when we speak about functions which take time to finish.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Synopsis&lt;/strong&gt;: Using the event emitter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You create observable objects with &lt;em&gt;multiple listeners,&lt;/em&gt; where each listener is a callable function, i.e each &lt;em&gt;listener is a possible outcome.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;emitter.emit(eventName[, …args])&lt;/code&gt; instead of &lt;code&gt;cb(null, data)&lt;/code&gt;to pass on a result on listener function.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;emit(&#39;error&#39;, err)&lt;/code&gt; to pass on an error and exit.&lt;/li&gt;
&lt;li&gt;Communicate multiple possible outcomes from your function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The EventEmitter provides a popular &lt;code&gt;on()&lt;/code&gt; method which “hooks” functions on an object. Then, it invokes them synchronously one by one when a given event happens. This approach provides more granularity and control than CPS which gives one outcome per function.&lt;/p&gt;

&lt;p&gt;Let’s expand our previous function &lt;code&gt;readFiles()&lt;/code&gt; to &lt;code&gt;filterFiles()&lt;/code&gt; in order to provide a way to message all subscriber consumers on the event of finding a file during a search.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kalinchernev/15cbee0731612dc6388c2f0e1cafa6b7.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Then, in order to use this function, we’ll have an implementation like:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kalinchernev/4fb5f5129a202bd14bb9518bcef74244.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;We can also use some sugar to make the same functionality sweeter:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kalinchernev/223e3170b53307b5ca0e3d02afcd93ea.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;If you’ve visited the chapter about the observer patterns in the &lt;a href=&#34;https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented-ebook/dp/B000SEIBB8&#34;&gt;famous design patterns book&lt;/a&gt; you must already see a big difference in the way how you can implement the pattern. I like “the node-way” better — it’s simpler and you can express same ideas with less code. And honestly, if I were to teach this pattern to web developers, I am sure that I’d have a better chance of success relating on familiarity of jQuery’s popular &lt;code&gt;.on()&lt;/code&gt; method, without too much talking about abstractions and interfaces.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;combining-cps-and-observer-patterns&#34;&gt;Combining CPS and Observer patterns&lt;/h3&gt;

&lt;p&gt;Our new function &lt;code&gt;findFiles()&lt;/code&gt; is definitely more flexible than &lt;code&gt;readFiles()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;findFiles()&lt;/code&gt; provides a way for the user to listen to events during the processing of each file, which could give useful control of the processing.&lt;/p&gt;

&lt;p&gt;But what if we want to make it even more flexible, like letting the user choose whether he wants this control or not? What if the user is not actually interested in each file, but wants to get only the final result?&lt;/p&gt;

&lt;p&gt;Well, let’s make our event emitter function CPS-friendly!&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kalinchernev/985b975fe6591675ce2272b53846b2c8.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This is only a demo implementation which you should not copy-paste into your code without including better checks on the various edge cases of the input, etc. However, the example gives a basic idea on how to make the callback argument optional and use it depending on the scenario.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;I hope that in the end of this article you have some useful high-level ideas about few options you have when designing your node modules. It’s good to start with the end in mind, imagining how you want your modules to be used. This will help you balance your decisions better between the level of flexibility and easiness of use that you want to provide to your users.&lt;/p&gt;

&lt;p&gt;And remember — in most cases your choice of a programming language to use is less important than the way you use the programming language.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>January Digest 2017</title>
      <link>https://kalinchernev.github.io/january-digest-2017/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/january-digest-2017/</guid>
      <description>

&lt;p&gt;I’ve prepared a warm-up digest for those of you who made a resolution to improve their JavaScript skills in 2017, so let’s get it started!&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;stories&#34;&gt;Stories&lt;/h3&gt;

&lt;p&gt;I published 2 articles this month and I enjoyed writing both of them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://medium.com/@kalin.chernev/problem-first-problem-solving-87369b84551f#.zg5l97itd&#34;&gt;Problem-first problem-solving&lt;/a&gt; — don’t be mislead by the title, it’s about positive concepts going randomly through my brain.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://restful.io/agile-documentation-for-your-api-driven-project-based-on-open-api-standards-11e54d4326bb#.jaw6kcohk&#34;&gt;Agile documentation for your API-driven project&lt;/a&gt; — this got a tweet from the community few minutes after being published. So, the spread started before I make a tweet about the new publication myself. Nothing makes me happier than that as a writer.&lt;/p&gt;

&lt;p&gt;I got enthusiastic to write this article after release 1.9.0 of &lt;a href=&#34;https://github.com/Surnet/swagger-jsdoc&#34;&gt;swagger-jsdoc&lt;/a&gt; which introduced 2 new features. Both of them being focused on developers’ experience and productivity.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;javascript&#34;&gt;JavaScript&lt;/h3&gt;

&lt;p&gt;It’s just the beginning of 2017, so let’s warm up right for it!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nodesource.com/blog/the-21-most-awesome-awesome-lists-for-node-js-developers&#34;&gt;The 21 Most Awesome Awesome Lists for Node.js Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://risingstars2016.js.org/&#34;&gt;2016 rising stars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.mybridge.co/node-js-top-10-articles-of-the-year-v-2017-79df8269d0f3#.naz5q020y&#34;&gt;Node.JS Top 10 Articles of the Year (v.2017)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.risingstack.com/node-js-async-best-practices-avoiding-callback-hell-node-js-at-scale/&#34;&gt;Node.js Async Best Practices &amp;amp; Avoiding Callback Hell — Node.js at Scale&lt;/a&gt; — this article is full of advertisements just as a typical American TV show. It’s also as good as such because it shows you problems and solutions that you might actually have in your real life.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And one more which is not only about JavaScript but the broader spectrum of front-end development: &lt;a href=&#34;https://www.gitbook.com/book/frontendmasters/front-end-handbook-2017/details&#34;&gt;Front-End Developer Handbook 2017&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;cloud&#34;&gt;Cloud&lt;/h3&gt;

&lt;p&gt;I feel that video gives a useful overview of one of the new hypes: serverless.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Dh_UXXtSvjQ?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;In addition, this feels down-to-earth about production usage:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/c4rvh_Iq6LE?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;In my personal opinion, this “serverless” hype is not a ground-breaking new technology, but a smooth transition towards customer-oriented architectures and services. Containers could be considered as a ground-breaking thing which solve problems in infrastructure management, and they will probably be still the background “hidden” behind serverless.&lt;/p&gt;

&lt;p&gt;When I visualize a transition towards customer-oriented API architectures and services, I imagine services like &lt;a href=&#34;http://swagger.io/go-serverless-with-swaggerhub-and-amazon/&#34;&gt;SwaggerHub&lt;/a&gt; which hide complexity of infrastructure management and let’s the user focus on building products.&lt;/span&gt; I also imagine that at some point Amazon will be in a position to offer amazing user AND developers experience directly in the cloud when &lt;a href=&#34;http://www.forbes.com/sites/janakirammsv/2016/07/18/the-master-plan-behind-amazons-acquisition-of-cloud9-ide/#6e580c0028db&#34;&gt;Cloud9 comes move integrated&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At some point, AWS (? will ?) be the de-facto platform for building cloud applications where the user starts off easily — just clicking here and there and making configurations which integrate what-ever is necessary, where-ever necessary. And when super-specific tweak is necessary, code editor with all &lt;a href=&#34;https://medium.com/@kalin.chernev/debugging-node-js-in-cloud9-ide-59712c043fb2&#34;&gt;debugging capabilities&lt;/a&gt; will be at hand. Thus, covering scenarios from small startup projects that don’t want to focus on infrastructure, to enterprise which is there because of the fine control over the server side.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;trends&#34;&gt;Trends&lt;/h3&gt;

&lt;p&gt;On a similar note about trends, &lt;a href=&#34;https://www.oracle.com/corporate/acquisitions/apiary/index.html&#34;&gt;Apiary got acquired by Oracle&lt;/a&gt;. Though I’m not a pro at understanding mergers, it’s obvious that API economy companies are on success reaping wave. Only few months ago &lt;a href=&#34;http://www.forbes.com/sites/greatspeculations/2016/09/13/heres-why-google-is-acquiring-apigee/#52eceafc693f&#34;&gt;Apigee was in the news in a similar way&lt;/a&gt;, and there is a compelling reason for these trending acquisitions.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;time-saving-tricks&#34;&gt;Time-saving tricks&lt;/h3&gt;

&lt;h4 id=&#34;phpstorm-convert-between-array-syntax&#34;&gt;PHPStorm convert between array syntax&lt;/h4&gt;

&lt;p&gt;Laugh at me, but I still sometimes see &lt;code&gt;array()&lt;/code&gt; syntax during my work (and not &lt;code&gt;[]&lt;/code&gt;) It appeared to be an easy thing to change automatically in the editor.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Code | Inspect Code...&lt;/code&gt; — run it on your files. One of the inspections called &lt;strong&gt;&amp;ldquo;Traditional syntax array literal detected&amp;rdquo;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Alternatively just run that specific inspection only via &lt;code&gt;Code | Run Inspection by Name...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Once done, you will see a list with results. Find that particular inspection in results (in case if 1st option was used (all inspections)).&lt;/li&gt;
&lt;li&gt;From there you can apply “Fix it” action on all (or individual) results of that inspection.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*t5kfn0iW_I3uC3mWxA5Ntg.png&#34; alt=&#34;php storm converting array syntax&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Checking the daily ebook by&lt;/strong&gt; &lt;a href=&#34;https://www.packtpub.com/packt/offers/free-learning&#34;&gt;&lt;strong&gt;Packt’s Free Leaning campaign&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There’s an option to subscribe for updates via twitter or facebook, which is understandable. This is a good way to have leads and metrics of the campaign. However, it’s not very practical to open the website and see it every day, thus I made a lazy-logic implementation to be able to check this from the command line like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ node ~/scripts/freeEbook.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There’s the gist for it (it’s super-lazy)&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kalinchernev/5f67405d46914897ee8ff95b46b55898.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This script is just the basic concept that can be integrated with internal cron tasks or cloud services to automate the check. For example, I imagine that with some investigation it will be possible to work out an &lt;a href=&#34;https://auth0.com/blog/if-this-then-node-dot-js-extending-ifttt-with-webtask-dot-io/&#34;&gt;integration with IFTTT&lt;/a&gt; or a similar service.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Holidays digest 2016</title>
      <link>https://kalinchernev.github.io/holiday-digest-2016/</link>
      <pubDate>Sat, 07 Jan 2017 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/holiday-digest-2016/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://medium.com/digital-beer/holidays-digest-68ecc2b115a8&#34; title=&#34;Permalink to Holidays digest – Digital Beer – Medium&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I decided to try a new format of writing a story — a &amp;ldquo;digest&amp;rdquo; one. In this format, I&amp;rsquo;ll be able to mix subjects and share about things I find interesting. Although I don&amp;rsquo;t plan to follow a strict structure, topics will be divided into sections to make it easy to jump between without having to read it all.&lt;/p&gt;

&lt;h3 id=&#34;medium&#34;&gt;Medium&lt;/h3&gt;

&lt;p&gt;Certainly, the trending topic in the context of this blog is the story about &lt;a href=&#34;https://blog.medium.com/renewing-mediums-focus-98f374a960be#.yuaggxs6c&#34;&gt;Renewing Medium&amp;rsquo;s focus&lt;/a&gt;. I think there are few really good points about the &amp;ldquo;why&amp;rdquo; and I hope that Medium will find the new way to provide the value they want for publishers.&lt;/p&gt;

&lt;h3 id=&#34;kadira&#34;&gt;Kadira&lt;/h3&gt;

&lt;p&gt;On a similar note, &lt;a href=&#34;https://voice.kadira.io/kadira-shutting-down-7d35994db85d#.mmph3hury&#34;&gt;Kadira: Shutting Down&lt;/a&gt; was an expected story from &lt;a href=&#34;https://medium.com/@arunoda&#34;&gt;Arunoda Susiripala&lt;/a&gt;. The decision is understandable from a business point of view. In a more global view, I feel that this story is a historic event for the JavaScript community in overall. It&amp;rsquo;s a reminder of how fierce the competition in the JavaScript ecosystem is and how important it is for vendors like MDG to manage their relations with driving contributors.&lt;/p&gt;

&lt;h3 id=&#34;progressive-web-nbsp-apps&#34;&gt;Progressive Web&amp;nbsp;Apps&lt;/h3&gt;

&lt;p&gt;My last post was about &lt;a href=&#34;https://medium.com/@kalin.chernev/think-about-apps-not-websites-13757f9736de#.5v5yhw1p3&#34;&gt;thinking about apps, not websites&lt;/a&gt;. My goal was to start a collection of good examples of making modern apps. I had plans to continue on this story-line by making a case study of an app with information about first aid that works offline, demonstrating both the technical and informational side.&lt;/p&gt;

&lt;p&gt;To find a re-usable information about first aid was a tougher cookie that I thought. First, information on the web is not well structured. I was looking for a topical steps on how to help in a given urgent situation, but couldn&amp;rsquo;t find anything organized. Secondly — the information was copyright and it would have taken a massive amount of waiting time to get information for a demo case study. I managed to find some open information in &lt;a href=&#34;https://en.wikibooks.org/wiki/First_Aid&#34;&gt;wiki books&lt;/a&gt;, which got me started on the content. Finding free photos I could use was a bit easier as &lt;a href=&#34;https://medium.com/@disastacre&#34;&gt;Vladimir Vassilev&lt;/a&gt; suggested me a source collection of &lt;a href=&#34;http://re-wp.com/stock-photos/&#34;&gt;free stock photos&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By the time I got my content prepared, the team of &lt;a href=&#34;https://medium.com/@auth0&#34;&gt;Auth0&lt;/a&gt; had already published 2 great articles on the same subject!&amp;nbsp;:D&lt;/p&gt;

&lt;p&gt;The first one (actually the second one), which continued on the same story line as I aimed to, was about &lt;a href=&#34;https://auth0.com/blog/introduction-to-progressive-web-apps-instant-loading-part-2/&#34;&gt;instant loading and storage&lt;/a&gt;. At the same time, I was testing &lt;a href=&#34;https://github.com/GoogleChrome/sw-precache&#34;&gt;sw-precache&lt;/a&gt; more thoroughly and I had issues with the offline storage that erased the cache in an unpredictable ways on my mobile phone. Seeing that article during my work on the first aid case study, just discarded much of the things I wanted to share, as the article of &lt;a href=&#34;https://auth0.com/&#34;&gt;Auth0&lt;/a&gt; is much more thorough and deeper explained.&lt;/p&gt;

&lt;p&gt;Then, just before NY, came the second nice article from the same team, this time about &lt;a href=&#34;https://auth0.com/blog/introduction-to-progressive-web-apps-push-notifications-part-3/&#34;&gt;push notifications&lt;/a&gt;. With this, I decided that it&amp;rsquo;s better to recommend these, rather than writing or trying to complete the first aid app. Mainly because I don&amp;rsquo;t believe it will be of any value added.&lt;/p&gt;

&lt;p&gt;Anyway, if you read this and still consider it&amp;rsquo;s a good idea to make a progressive web app for first aid, then I&amp;rsquo;d recommend you check the &lt;a href=&#34;https://www.mediawiki.org/wiki/API:Main_page&#34;&gt;wikibooks REST API&lt;/a&gt; to get the information about the book I linked earlier, following the &lt;a href=&#34;https://wikimediafoundation.org/wiki/Developer_app_guidelines&#34;&gt;guidelines&lt;/a&gt;. From the little experience making the app, I&amp;rsquo;d recommend &lt;a href=&#34;https://visionmedia.github.io/page.js/&#34;&gt;page.js&lt;/a&gt; and reading &lt;a href=&#34;https://medium.com/@krasimirtsonev&#34;&gt;Krasimir Tsonev&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;http://krasimirtsonev.com/blog/article/deep-dive-into-client-side-routing-navigo-pushstate-hash&#34;&gt;Deep dive into client-side routing&lt;/a&gt;, that&amp;rsquo;s of course if you want to keep it simple, rather than using React (w/ react router) or Angular, etc.&lt;/p&gt;

&lt;h3 id=&#34;pishi-kur-18&#34;&gt;&lt;a href=&#34;https://pishikur.com/&#34;&gt;Pishi Kur&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;That&amp;rsquo;s a tiny project that I released around Christmas. It&amp;rsquo;s just taking an example app from &lt;a href=&#34;https://firebase.google.com/&#34;&gt;Firebase&lt;/a&gt; and has some changed strings here and there. The idea of the project is to entertain Bulgarians travelling or living abroad by collecting pictures of a word. The idea came along in &lt;a href=&#34;https://en.wikipedia.org/wiki/Plovdiv&#34;&gt;Plovdiv&lt;/a&gt; when few Bulgarians shared that they see that word in France, Germany, in the mountains, etc. The project will not be translated in Bulgarian and will not encourage vandalism, or anything like this. It&amp;rsquo;s rather a surrealistic platform of sharing funny moments while being in special places around the world.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also my first time to use Firebase. My impressions so far are positive: it was easy to setup the social authentication and deploy the app. The developer experience is close to what Meteor was about an year ago — easy development, ready plugin-like functionalities, etc. Only that, Meteor killed a lot of its interest by making Galaxy nothing more than a place to host your app, not providing a lot of services around it. With Firebase, Google services are easy to integrate at the finger tips of the developer.&lt;/p&gt;

&lt;p&gt;So far, there are more than 30 registered users, average of 30 visits per day. If this grows organically, it will be an interesting case study to work with Firebase tools to scale and tweak the platform. Otherwise, I don&amp;rsquo;t plan to push advertising or any type of campaigns to make it bigger than that&amp;nbsp;:)&lt;/p&gt;

&lt;h3 id=&#34;apis&#34;&gt;APIs&lt;/h3&gt;

&lt;p&gt;Feeling that I strayed a bit from this topic in the last few months, I renewed reading and researching ways to get my hands back on things about APIs.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;&lt;a href=&#34;https://hackernoon.com/how-i-made-a-saas-webservice-earning-1000-monthly-profit-6d2b782b95c8#.jrv7pfxuz&#34;&gt;How I made a SaaS webservice earning $1000 monthly profit&lt;/a&gt;&amp;rdquo; is a motivating piece about taking small steps towards monetization of a service.&lt;/p&gt;

&lt;p&gt;Another interesting piece of information is the &lt;a href=&#34;https://www.programmableweb.com/news/programmablewebs-most-interesting-apis-2016-application-development-and-developer-tools/brief/2016/12/23&#34;&gt;ProgrammableWeb&amp;rsquo;s Most Interesting APIs in 2016: Application Development and Developer Tools&lt;/a&gt;. I really love the idea of website to API tools like the &lt;a href=&#34;https://www.jamapi.xyz/&#34;&gt;Jam API&lt;/a&gt; mentioned. It reminds me of &lt;a href=&#34;https://medium.com/@kimonolabs&#34;&gt;Kimono Labs&lt;/a&gt; who got acquired almost an year ago.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.npmjs.com/package/swagger-jsdoc&#34;&gt;swagger-jsdoc&lt;/a&gt; module that I sometimes work on in my free time continue on its path of wider adoption:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*yJ4w5B4sAANmTqrJlHpcFw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Based on data from &lt;https: npm-stat.com=&#34;&#34;&gt;&lt;/p&gt;

&lt;p&gt;It might be that the CLI tool played an important role in August. And because the module targets the developers&amp;rsquo; audience, I plan to work on a feature to &amp;ldquo;watch&amp;rdquo; for changes in the input files.&lt;/p&gt;

&lt;p&gt;I believe it&amp;rsquo;s worth investing in learning and doing more of swagger apis this year, mainly for 2 reasons:&lt;/p&gt;

&lt;p&gt;Trends look good:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*bVdbmTcQZsE4tYunE7Jh5Q.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Taken from &lt;a href=&#34;https://www.google.com/trends/explore?q=swagger%20api&#34;&gt;Google&amp;nbsp;Trends&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adoption of &lt;a href=&#34;https://www.openapis.org/&#34;&gt;Open API specification&lt;/a&gt; also looks positive, and also the big players also support it. It&amp;rsquo;s hard to say what exactly will happen in 2017 after some of the &lt;a href=&#34;https://medium.com/the-era-of-apis/over-500m-invested-in-api-companies-in-2016-with-16-acquisitions-cc4f3d2beef8#.99codaicj&#34;&gt;acquisitions of 2016&lt;/a&gt;. Nevertheless, my gut feeling is that having a solid specification (with such adoption) is a key to having the true interoperability to other specifications and solutions such as GraphQL, in potential interest &lt;a href=&#34;https://medium.com/@raxwunter/moving-existing-api-from-rest-to-graphql-205bab22c184#.h6rctdrxm&#34;&gt;moving existing API from REST to GraphQL&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;my-chat-bot-story-32-became-my-best-story-of-2016-because-of-chatbots-life-33-publication&#34;&gt;&lt;a href=&#34;https://chatbotslife.com/building-a-chat-bot-who-understands-emotions-though-your-selfies-e9fa7cc4b627#.rgfcezwnz&#34;&gt;My chat bot story&lt;/a&gt; became my best story of 2016 because of &lt;a href=&#34;https://medium.com/@ChatBotsLife&#34;&gt;Chatbots Life&lt;/a&gt; publication&lt;/h3&gt;

&lt;p&gt;Being published on 1st December, and being one my last articles for 2016, the &amp;ldquo;Building a chat bot who understands emotions though your selfies&amp;rdquo; story grew to be my best story of the year, thanks to &lt;a href=&#34;https://medium.com/@kojouharov&#34;&gt;Stefan Kojouharov&lt;/a&gt; including it in a publication.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*HgTPQnk-aW0wxKdFitxtzg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The only story that could have been a competition in fame to this one was the &amp;ldquo;&lt;a href=&#34;https://medium.com/@kalin.chernev/drupal-8-on-cloud9-ide-1a294328e1aa#.g3a7u6t68&#34;&gt;Drupal 8 on Cloud9 IDE&lt;/a&gt;&amp;rdquo; which got more views because of being included in the &lt;a href=&#34;http://www.theweeklydrop.com/archive/issue-258&#34;&gt;Weekly Drop issue 258&lt;/a&gt;, but didn&amp;rsquo;t reach as many number of reads and recommends.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Think about apps, not websites</title>
      <link>https://kalinchernev.github.io/think-about-apps-not-websites/</link>
      <pubDate>Tue, 13 Dec 2016 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/think-about-apps-not-websites/</guid>
      <description>

&lt;p&gt;Admiring the progress of &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/API&#34;&gt;Web APIs&lt;/a&gt;, I decided to shortly summarize some feelings. They are mostly about a borderline (common-sense) why it is worth knowing what is a web app and why we have to shift our paradigm thinking from building websites to building web apps. For this reason, I include few steps as a tutorial to encourage hands-on experimentation.&lt;/p&gt;

&lt;h3 id=&#34;state-of-internet&#34;&gt;State of internet&lt;/h3&gt;

&lt;p&gt;Unsurprisingly, &lt;a href=&#34;http://www.internetlivestats.com/internet-users/#chart_trend&#34;&gt;more than 40% of the world has access to the Internet&lt;/a&gt;, and this number is yet to grow having in mind the vast popularity of campaigns which ensure that each one in the world is connected. It seems that we are in rush to make the &lt;a href=&#34;https://en.wikipedia.org/wiki/Global_village_%28term%29&#34;&gt;Global village reality&lt;/a&gt;. Yes, I still remember when making a dynamic website with mobile-friendly design was innovation, however, it’s simply &lt;a href=&#34;https://techcrunch.com/2014/08/21/majority-of-digital-media-consumption-now-takes-place-in-mobile-apps/&#34;&gt;not anything special any more&lt;/a&gt;. In fact, the digital world is much more accessible than before with smart-watches, smart-TVs, VRs, etc.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Web as I envisaged it, we have not seen it yet. The future is still so much bigger than the past. —&lt;a href=&#34;https://en.wikipedia.org/wiki/Tim_Berners-Lee&#34;&gt;Tim Berners-Lee&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;reality-check&#34;&gt;Reality check&lt;/h3&gt;

&lt;p&gt;All the new software or hardware technologies do not make any sense if not used properly and effectively. For example, managing our user data and documents synchronization in &lt;a href=&#34;https://en.wikipedia.org/wiki/Cloud_computing&#34;&gt;the cloud&lt;/a&gt; is a vital skill you have to master. This way, you can take advantage of the technological opportunities of keeping your information safe and available anywhere you have a browser and an internet connection.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Google_Docs,_Sheets_and_Slides&#34;&gt;Google docs&lt;/a&gt; got available to us a decade ago, and Microsoft followed with their &lt;a href=&#34;https://en.wikipedia.org/wiki/OneDrive&#34;&gt;OneDrive&lt;/a&gt; few years later. So, regardless of the device (tablet, laptop, PC, etc.) we can work with our documents through our browser, AND have a safe backup of our work. Not taking advantage of cloud technologies to have synchronized backup of our important documents is a missed opportunity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Making a website that shows only information is a missed opportunity.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Why is that? Well, simple — the problems we are solving today are different than the problems we were solving 10 years ago. Even if the criticism of the accelerated change were true, why would we encounter so many examples of transformation we did not anticipate with this speed?&lt;/p&gt;

&lt;p&gt;Another example higher user expectation: being able to work with mobile applications offline. A decade ago, a website was a good solution to having an online presence, i.e. having a business card, etc. Probably printing pages was ok. However, today, &lt;a href=&#34;http://www.pcworld.com/article/3145946/streaming-services/you-can-finally-watch-netflix-offline-now.html&#34;&gt;Netflix offline capabilities&lt;/a&gt; or editing documents in Google Drive offline mode are making customers happy, because users are mobile.&lt;/p&gt;

&lt;p&gt;In similar conditions, building a website to just share information is not something special any more, because users expect a whole different, more engaging digital experience — think about SMS notifications. They were standard some years ago, but not anymore. Today, push notifications are everywhere. And there is no way that trend goes down, as the future connected world will involve even higher amount of notifications.&lt;/p&gt;

&lt;h3 id=&#34;web-apps&#34;&gt;Web apps&lt;/h3&gt;

&lt;p&gt;“Web apps” is probably something you already know. Web apps are consisted of HTML, CSS and JavaScript. Difference between them and regular websites, is that the same technologies are used with “spices”: new methods to achieve better results. Meet the Progressive Web Apps, aka &lt;a href=&#34;https://developers.google.com/web/&#34;&gt;PWA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The term has been around for awhile, so starter tutorials are accessible:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/web/fundamentals/getting-started/codelabs/your-first-pwapp/&#34;&gt;Your first PWA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2016/12/progressive-web-amps/&#34;&gt;Progressive Web AMPs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2016/08/a-beginners-guide-to-progressive-web-apps/&#34;&gt;A beginners guide to PWA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2016/09/the-building-blocks-of-progressive-web-apps/&#34;&gt;The Building Blocks Of Progressive Web Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In summary, there are many benefits of adding an some extra efforts into your existing (or new) web pages to make them available in bad network conditions (when offline), and provide functionalities that are normally expected by users in mobile, but in the browser. And browsers are something you have almost everywhere.&lt;/p&gt;

&lt;p&gt;If you’re a decision maker or a company owner with a business around &lt;a href=&#34;https://blog.chromium.org/2016/08/from-chrome-apps-to-web.html&#34;&gt;Chrome Apps or extensions&lt;/a&gt;, you have an even bigger motivation to follow this trend, in order to maintain your business in near future.&lt;/p&gt;

&lt;p&gt;Thus, get into the habit to use your browser effectively as a tool in your skill-set of the future :) Even if you are not a developer, you have to imagine that at some point of time, &lt;a href=&#34;https://medium.com/swlh/browsers-not-apps-are-the-future-of-mobile-c552752ff75#.ackczpqrj&#34;&gt;the browser will be the app you are running everywhere&lt;/a&gt; regardless of your operating system.&lt;/p&gt;

&lt;p&gt;And a bonus for seasoned developers reaching this point of the article: this &lt;a href=&#34;https://auth0.com/blog/chromedevsummit-summary/&#34;&gt;summary of chrome dev summit&lt;/a&gt; would be worth a look.&lt;/p&gt;

&lt;h3 id=&#34;making-a-web-app&#34;&gt;Making a web app&lt;/h3&gt;

&lt;p&gt;I’ve marked some initial milestones that worked for me, the order shouldn’t be important, but that’s more or less how I see the process — hopefully easy to understand and follow with a bit of hands-on practice.&lt;/p&gt;

&lt;p&gt;I’ll be going through the most popular and basic features of PWA which could complement existing websites and make them more app-like. I believe that gradual improvements in existing websites is a good strategy for making the best of the modern web, while avoiding regressions in working solutions. This way, everybody win — business owners invest smartly into new enhancements, developers upgrade their solutions taking small doable steps, also, the end-user (the king) receives improved experience.&lt;/p&gt;

&lt;p&gt;So, what we want to achieve is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User can save our application to his phone for quick access&lt;/li&gt;
&lt;li&gt;User can open the application without access to the Internet, and still see meaningful contents that help him continue working with the application&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;devtools&#34;&gt;DevTools&lt;/h3&gt;

&lt;p&gt;Before kicking off the tutorial part, please, use Google Chrome while working out the rest of the items — ensuring you have really great experience and least amount of hurdles on browser support during your journey. Firefox, Edge and Opera could be alternatives, however, Chrome has the best support for modern JavaScript at the moment.&lt;/p&gt;

&lt;p&gt;This video is an entertaining summary of the documentation about &lt;a href=&#34;https://developers.google.com/web/tools/chrome-devtools/progressive-web-apps&#34;&gt;debugging progressive web apps with Chrome DevTools&lt;/a&gt;. Most certainly, general familiarity with the &lt;a href=&#34;https://developers.google.com/web/tools/chrome-devtools/&#34;&gt;DevTools&lt;/a&gt; would help you understand it, although the panel for debugging PWA is much simpler than the rest.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/IWgNn1kqrsA?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;create-a-manifest-file&#34;&gt;&lt;strong&gt;Create a manifest file&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The manifest file should comply to a &lt;a href=&#34;https://w3c.github.io/manifest/&#34;&gt;specification&lt;/a&gt; which serves a similar purpose as of the &lt;a href=&#34;https://developer.chrome.com/extensions/manifest&#34;&gt;Chrome Platform API manifest file&lt;/a&gt; — it&amp;rsquo;s a set of definitions. &lt;a href=&#34;https://developers.google.com/web/updates/2015/03/increasing-engagement-with-app-install-banners-in-chrome-for-android&#34;&gt;The installation of a web app&lt;/a&gt; is more engaging than the one of a native app, i.e. one doesn&amp;rsquo;t need to go to a &amp;ldquo;store&amp;rdquo;, but take it right away. Note that a service worker file should be loaded (and activated, etc.) to achieve this interaction.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*DYjPm6A9VuxueEU7mD_lPQ.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Image taken from&amp;nbsp;&lt;a href=&#34;https://developers.google.com/web/updates/2015/03/increasing-engagement-with-app-install-banners-in-chrome-for-android&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At the time of writing this article, these are the criteria:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;definition manifest file is present&lt;/li&gt;
&lt;li&gt;the manifest file contains at least the following properties: &lt;code&gt;short_name&lt;/code&gt; and &lt;code&gt;144x144&lt;/code&gt; PNG icon with its corresponding mime type meta info&lt;/li&gt;
&lt;li&gt;app is served over HTTPS&lt;/li&gt;
&lt;li&gt;The user has visited your site at least twice, with at least five minutes between visits&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the way, this year &lt;a href=&#34;https://developer.android.com/topic/instant-apps/index.html&#34;&gt;instant apps&lt;/a&gt; were announced. They are something similar for Android native apps. It seems like a unified direction into making the content and functionalities more accessible for the user. For the install, If you have a native app, and you want to suggest it to the user, &lt;a href=&#34;https://developers.google.com/web/updates/2015/03/increasing-engagement-with-app-install-banners-in-chrome-for-android#native&#34;&gt;use the manifest for this&lt;/a&gt;, &lt;a href=&#34;https://developers.google.com/web/fundamentals/engage-and-retain/push-notifications/good-notification#dont-advertise-native&#34;&gt;do NOT advertise the native app via a push notification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To try and experiment with this basic step, take either any of the tutorials in &lt;a href=&#34;https://codelabs.developers.google.com/&#34;&gt;codelabs&lt;/a&gt; or by use &lt;a href=&#34;https://googlesamples.github.io/&#34;&gt;sample snippets&lt;/a&gt; (don&amp;rsquo;t really know if it&amp;rsquo;s the same as &lt;a href=&#34;https://www.chromestatus.com/samples&#34;&gt;chrome samples&lt;/a&gt;), or just clone &lt;a href=&#34;https://github.com/kalinchernev/pwa/tree/basics/manifest&#34;&gt;this branch&lt;/a&gt;. I&amp;rsquo;m personally using &lt;a href=&#34;https://medium.com/@kalin.chernev/cloud9-ide-6e26940c6130#.cotqpyn8b&#34;&gt;cloud9 editor&lt;/a&gt; for development, as it serves the applications over HTTPS by default, which is really convenient to just go and try things. There are many alternatives for both the editor and server: just choose what works best for you and don&amp;rsquo;t over-think or over-prepare, focus on the doing.&lt;/p&gt;

&lt;p&gt;By the end of this, you must already have a feeling of achievement! Creating a manifest file that loads some assets and an empty JavaScript file is easy, but rewarding enough to keep your momentum to continue further.&lt;/p&gt;

&lt;p&gt;If you are like me, testing the behavior of &amp;ldquo;Add to homescreen&amp;rdquo; in both the desktop browser and the mobile phone, you will surely notice that &amp;ldquo;homescreen&amp;rdquo; of the browser is the browser&amp;rsquo;s home of apps:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*L63xgn3aL-6YTv7LnpwpVQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;add to homescreen behavior on your desktop&amp;nbsp;browser&lt;/p&gt;

&lt;p&gt;Depending on the &lt;a href=&#34;https://www.w3.org/TR/appmanifest/#dfn-display-mode&#34;&gt;`display mode&lt;/a&gt;` the app can run in a separate standalone window that looks like a desktop app (and in mobile it looks like mobile), by hiding the address bar. This is how &lt;a href=&#34;https://developer.chrome.com/apps/about_apps&#34;&gt;Chrome Apps&lt;/a&gt; should be build in the future too, not only websites.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*mowO5VIVEwFBcOJcXY4OUQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The same app open in a normal browser and in a standalone window&lt;/p&gt;

&lt;p&gt;The same code (HTML+CSS+manifest file and an empty JavaScript file loaded as a service worker) produce good mobile experience:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*qDNI5CsWyWWPty5qcM6KaA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Add to home screen is same as installing the app on the&amp;nbsp;device&lt;/p&gt;

&lt;p&gt;Then, the icon is added to the desktop as expected:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*u1QOfgyz4iEdl1dZ2zrDPg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;and when the icon is clicked, the user gets a nice welcoming screen, colors defined as &lt;code&gt;theme_color&lt;/code&gt; and &lt;code&gt;background_color&lt;/code&gt; properties in the manifest.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*HLOcyRrmJu2AvKN4aqrlCQ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Lastly, in standalone display mode, no URL address bar is visible. Use a &lt;a href=&#34;https://www.google.com/search?q=best+mobile-first+CSS+frameworks+today&#34;&gt;good front-end framework&lt;/a&gt; to make the look and feel of your web page as a native app — the user will be delighted!&amp;nbsp;:)&lt;/p&gt;

&lt;h3 id=&#34;the-app-nbsp-shell&#34;&gt;The app&amp;nbsp;shell&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s mostly conceptual yet important task to think about: in order to deliver good user experience, it&amp;rsquo;s useful to have access to fundamental assets offline in order to react well in case of a network going offline. So, when you build and develop your web site, consider it&amp;rsquo;s a real shell that stays the same and only the contents is changing. This article gives good &lt;a href=&#34;https://developers.google.com/web/fundamentals/architecture/app-shell&#34;&gt;concept overview&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not something super-new for people who are used to thinking about apps already, or developers of &lt;a href=&#34;https://en.wikipedia.org/wiki/Single-page_application&#34;&gt;SPAs&lt;/a&gt;. It&amp;rsquo;s just something to always have in the back of your mind when you look at your own website — what resources are important to deliver to the user even when he&amp;rsquo;s offline? What are the repetitive elements of my web pages? Normally these are the navigation and its surroundings. All these become the &amp;ldquo;shell&amp;rdquo;, being cached on the device for easy access, and the content is dynamically fetched when available.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*dEvx7lPNJT-r-tKjqvAXxg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/web/fundamentals/architecture/app-shell&#34;&gt;Image credits&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to implement this strategy for saving resources, one must know how to use the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Cache&#34;&gt;Cache API&lt;/a&gt; through a service worker. The API can also be accessed through the global &lt;code&gt;window&lt;/code&gt; object as well, but working through a SW, we can &amp;ldquo;hook&amp;rdquo; into the events in the worker&amp;rsquo;s life-cycle, i.e. we can validate cache when network connection toggles.&lt;/p&gt;

&lt;h3 id=&#34;creating-a-servic-worker&#34;&gt;Creating a servic worker&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Rich offline experiences, periodic background syncs, push notifications — functionality that would normally require a native application — are coming to the web. Service workers provide the technical foundation that all these features rely on. — taken from &amp;ldquo;&lt;a href=&#34;https://developers.google.com/web/fundamentals/getting-started/primers/service-workers&#34;&gt;Service Workers: an Introduction&lt;/a&gt;&amp;ldquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In basic terms, the service worker is a proxy layer between your stack (HTML+CSS+JS) and the network. The API of service workers boost the functionality of your otherwise normal web pages.&lt;/p&gt;

&lt;p&gt;A good starting point could be the sample for &lt;a href=&#34;https://googlechrome.github.io/samples/service-worker/custom-offline-page/index.html&#34;&gt;Service Worker Sample: Custom Offline Page Sample&lt;/a&gt;. If the amount of code seems too much, have a look at the &lt;a href=&#34;https://developers.google.com/web/tools/service-worker-libraries/&#34;&gt;tools section&lt;/a&gt; where some libraries are already published to make these functionalities more accessible. For example, if your project uses a task runner, you can implement &lt;a href=&#34;https://github.com/GoogleChrome/sw-precache#install&#34;&gt;`sw-precache&lt;/a&gt;` (&lt;a href=&#34;https://codelabs.developers.google.com/codelabs/sw-precache/#0&#34;&gt;tutorial&lt;/a&gt; is also available&amp;nbsp;;)&lt;/p&gt;

&lt;p&gt;For me, personally, it was fun to play a bit with the service worker file, not having access to the DOM directly, but yet having a Web API that should communicate with it was an interesting thing. In the end, I used the example code provided in the &lt;a href=&#34;https://github.com/GoogleChrome/sw-precache/tree/master/demo&#34;&gt;demo&lt;/a&gt; of &lt;code&gt;sw-precache&lt;/code&gt; because I&amp;rsquo;m really lazy.&lt;/p&gt;

&lt;p&gt;By the end of the exercise, I have this branch for &lt;a href=&#34;https://github.com/kalinchernev/pwa/tree/basics/caching&#34;&gt;the basics of caching the application shell&lt;/a&gt;. What I really like as a side-effect of stealing the gulp file of the demo above is that now I have a basic build system. That helps me in generating a comparatively sophisticated service-worker handling the offline behavior of my web app. Also, it gives me a nicely working &lt;a href=&#34;https://pages.github.com/&#34;&gt;gh-pages website&lt;/a&gt; that can be accessed by anyone over HTTPS on &lt;https: kalinchernev.github.io=&#34;&#34; pwa=&#34;&#34;&gt; This makes me really happy, because of several reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I already have a self-hosted, manageable (easy to update and deploy), modern web app, that looks like a mobile app. It can be viewed and installed on a mobile device, and later opened in a &amp;ldquo;shell&amp;rdquo;, i.e. not showing broken pages offline mode.&lt;/li&gt;
&lt;li&gt;Having a task runner like &lt;a href=&#34;http://gulpjs.com/&#34;&gt;gulp&lt;/a&gt; opens a door of opportunities to make my development life even easier than before: I can integrate live reload, include any preprocessing of LESS/SASS, can include babel to turn my ES6 code in ES5 for older browsers, etc.&lt;/li&gt;
&lt;li&gt;Using the &lt;code&gt;sw-precache&lt;/code&gt; even as simple as it is right now, provides me with benefits of easier asset management, as I don&amp;rsquo;t have to go too much into the details of the Cache API if I don&amp;rsquo;t want to, and the mechanism of implementing the worker is easier to update in the future, as I believe the project will be well maintained. So, my task for future maintenance will be to re-generate the worker which is already included on the page.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I hope that you already see more opportunities than before. In particular, next time you want to publish information that is important and useful for your users when, say, they travel, consider these options. Imagine you want to provide accessible guides and documentation — just follow the same steps and provide enhanced experience, I&amp;rsquo;m sure it&amp;rsquo;ll pay off.&lt;/p&gt;

&lt;h3 id=&#34;push-notification&#34;&gt;Push notification&lt;/h3&gt;

&lt;p&gt;Let me briefly indicate some resources that I consider useful for the topic, without going into details, as this feature is going a bit beyond the browser and won&amp;rsquo;t be as beginner-friendly as I&amp;rsquo;d like it to be. This topic deserves another separate article.&lt;/p&gt;

&lt;p&gt;For a start, you can start with &lt;a href=&#34;https://developers.google.com/web/fundamentals/getting-started/codelabs/push-notifications/&#34;&gt;Adding Push Notifications to a Web App&lt;/a&gt;. It can be well-complemented with &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/API/Push_API/Using_the_Push_API&#34;&gt;Using the Push API&lt;/a&gt; and &lt;a href=&#34;https://medium.com/dev-channel/designing-a-web-push-service-3076c0599f3e#.6xi4d77ds&#34;&gt;Designing a Web Push Service&lt;/a&gt; by &lt;a href=&#34;https://medium.com/@paul_kinlan&#34;&gt;Paul Kinlan&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;the-future&#34;&gt;The future&lt;/h3&gt;

&lt;p&gt;Apart from being bright, it will be filled with advancements and further variety in the developers&amp;rsquo; toolbox. Having in mind that browsers have always been an inconsistent environment, it will be vital to keep the following resources at hand and get fresh information every now and then.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/Apps/Progressive&#34;&gt;MDN App Center&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/web/updates/&#34;&gt;Google Web Updates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/home&#34;&gt;Chrome&lt;/a&gt;, &lt;a href=&#34;https://blogs.windows.com/msedgedev/#aJK7cy6m0YfVUByl.97&#34;&gt;Microsoft Edge&lt;/a&gt;, etc. of interest&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.html5rocks.com/en/&#34;&gt;HTML5Rocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/&#34;&gt;The standards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s important to underline, that &lt;a href=&#34;https://medium.com/@nekrtemplar/progressive-web-apps-aint-google-s-thing-31ca581e7a1#.faazl83yx&#34;&gt;Progressive Web Apps isn&amp;rsquo;t a Google-only thing&lt;/a&gt; although many of the references in this article are going to resources authored by community contributions to Google documentation. This is mainly because the dedication and organization of knowledge seems to the best at the moment. &lt;a href=&#34;https://blogs.windows.com/msedgedev/2016/07/08/the-progress-of-web-apps/#ZeJAshXJM2BuqDRB.97&#34;&gt;Microsoft are also supporters of PWA&lt;/a&gt;. In fact, &lt;a href=&#34;http://manifoldjs.com&#34;&gt;manifoldjs&lt;/a&gt; is an interesting project you will probably meet should you decide to make PWA that works as a nice app in Windows.&lt;/p&gt;

&lt;p&gt;In general, Web APIs will surely continue to evolve. You can bookmark the good ol&amp;rsquo; &lt;a href=&#34;http://caniuse.com/#search=push&#34;&gt;caniuse.com&lt;/a&gt; to verify whether an API you want to use is supported natively or you&amp;rsquo;ll have to search for a shim/polyfill and similar. Of course, there are many existing libraries and frameworks which are already taking developers attention (causing fatigue&amp;nbsp;:)&lt;/p&gt;

&lt;p&gt;Here I speak about experimental features that will change, but I firmly believe that browser vendors are on a good way of collaborating to support native APIs more consistently rapidly in very near future, so these features will be standard before you realize it. Knowing the standards helps you produce more maintainable code and gives you a good idea about the direction of Web, regardless of the popularity and influence of vendor frameworks and libraries.&lt;/p&gt;

&lt;h3 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;There are simple steps that anyone can take in order to convert their existing websites and web pages in progressive web apps, i.e. pages with HTML+CSS+JavaScript which act like native apps for important functionalities. Installation, caching and push notifications are a growing trend for a reason — they increase user engagement and provide great experience.&lt;/p&gt;

&lt;p&gt;So, during the upcoming holidays, have a look at the following Web APIs, and hopefully play with them, provide more value via your web pages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a &lt;code&gt;manifest.json&lt;/code&gt; file describing your app with its assets&lt;/li&gt;
&lt;li&gt;implement caching for the vital assets necessary when offline&lt;/li&gt;
&lt;li&gt;make a simple push notification for events of new content on your pages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully, using native Web APIs will be fun during this experimentation, as &lt;a href=&#34;http://kangax.github.io/compat-table/es6/&#34;&gt;Chrome supports a lot of ES6 features&lt;/a&gt; and there is no need for you to transpile your code to see immediate results of your work.&lt;/p&gt;

&lt;p&gt;Enjoy and good luck!&amp;nbsp;:)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Triage stream-adventure issue queue</title>
      <link>https://kalinchernev.github.io/stream-adventure-triage/</link>
      <pubDate>Sun, 06 Nov 2016 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/stream-adventure-triage/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/workshopper/stream-adventure&#34;&gt;stream-adventure&lt;/a&gt; is one of the first &lt;a href=&#34;https://nodeschool.io/about.html&#34;&gt;workshopper&lt;/a&gt; node modules which teaches &lt;a href=&#34;https://nodejs.org/api/stream.html&#34;&gt;Streams&lt;/a&gt; in node.js. Working on the challenges myself, I got frustrated when simple things did not work for me, so I ended up on the &lt;a href=&#34;https://github.com/workshopper/stream-adventure&#34;&gt;github repository&lt;/a&gt; doing a bit of triage during my free time.&lt;/p&gt;

&lt;h3 id=&#34;the-project-why-how&#34;&gt;The project: why &amp;amp; how&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;The Why&lt;/strong&gt;: stream-adventure is a popular project among developers who want to learn &lt;a href=&#34;https://nodejs.org/&#34;&gt;node.js&lt;/a&gt; and its Streams API which is fundamental. The “workshopper” provides simple and doable steps for learning the subject matter in a practical way . Also, the project is pointed as a historic milestone of &lt;a href=&#34;https://nodeschool.io/about.html&#34;&gt;nodeschool&lt;/a&gt;. Accodring to me, it’s good value: &lt;em&gt;learning node.js while contributing back to a big-impact project&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How&lt;/strong&gt;: installing the project is the same as any other &lt;a href=&#34;https://www.npmjs.com/package/stream-adventure#install&#34;&gt;node module&lt;/a&gt;. You can do that either locally (when having node+npm) or by using a cloud service like &lt;a href=&#34;https://kalinchernev.github.io/cloud9-editor&#34;&gt;Cloud 9 IDE&lt;/a&gt;. I use C9 as it’s convenient to work on the challenges any time and anywhere, in the browser, and the environment has nvm, which makes it easy for me to switch between node versions in case I need to test something special.
That’s how it looks — not so bad ;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/1400/1*ha_bEZaLR_t9Kc13Tac-Qw.png&#34; alt=&#34;workshopper on cloud9 editor&#34; /&gt;&lt;/p&gt;

&lt;p&gt;By the way, I recently got feedback similar to &lt;a href=&#34;http://forum.freecodecamp.com/t/cloud9-requiring-credit-card/23482&#34;&gt;this one&lt;/a&gt; about a requirement of a credit card during registration in C9. Remember that the choice of tools is always up to a personal preferences, i.e. feel free to choose whatever works best for you.&lt;/p&gt;

&lt;p&gt;To possible program commands, run &lt;code&gt;stream-adventure help&lt;/code&gt;. Most of the time, you’ll need only &lt;code&gt;stream-adventure&lt;/code&gt;, stream-adventure print and &lt;code&gt;stream-adventure verify program.js&lt;/code&gt; where the program.js is the file containing your solution of the given challenge.&lt;/p&gt;

&lt;h3 id=&#34;reporting-issues&#34;&gt;Reporting issues&lt;/h3&gt;

&lt;p&gt;Reporting issues is really good! Only one suggestion: search the &lt;a href=&#34;https://github.com/workshopper/stream-adventure/issues&#34;&gt;issue queue&lt;/a&gt; and or the &lt;a href=&#34;https://github.com/workshopper/stream-adventure/pulls&#34;&gt;list of pull requests&lt;/a&gt; to check if the issue you’re experiencing is not already reported or worked upon.&lt;/p&gt;

&lt;p&gt;Naturally, if the issue is already reported or worked upon, try to support the people working on it in order to speed up the process of solving the issue.&lt;/p&gt;

&lt;h3 id=&#34;working-on-the-issue-nbsp-queue&#34;&gt;Working on the issue&amp;nbsp;queue&lt;/h3&gt;

&lt;p&gt;As I wanted to work on the queue for my own benefit of figuring out what is what, etc. initially, I started working in one way and changed my approach on the way. The goal was simple: organize issues and pull request in an effective way for a maintainer to quickly and easily take yes/no decision on solving a given problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Strategy 1: Prioritize pull requests&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since I am a &amp;ldquo;newbie&amp;rdquo; in both the subject of matter (the streams) and in the project, my first idea was to go through the list of pull requests and categorize them in a way that indicates the readiness to be merged. This way, I imagine, the pull requests being validated and tested can be quickly skimmed and hopefully merged.&lt;/p&gt;

&lt;p&gt;This strategy didn&amp;rsquo;t work very effective for me, since the process was not linear, i.e. frequently I open 1 pull request which solves 1 issue, and then from this issue, I tend to find related or duplicates, and what if there are other pull requests that solve the same issue in another way?&lt;/p&gt;

&lt;p&gt;I think that strategy could be effective if the project has a roadmap or a well-defined list of important bugs/features to be handled in a given sprint or milestone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Strategy 2: Work-out &amp;ldquo;low-hanging fruits&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This strategy seemed a natural reflex for quick gratification after the first strategy didn&amp;rsquo;t work quite well&amp;nbsp;:) The idea is simple: go through issues and find such that are either already solved, duplicates, general questions that are already answered successfully, old issues that are not valid any more, etc. These are quick-wins that give a good feeling similar to the one that you experience when you cross an item from the todo list.&lt;/p&gt;

&lt;p&gt;I think that this strategy could be the starting point, rather than a bounce-back reflex as I did. The process of sorting easy or already done issues is a low-barrier entrance into the issue queue. And it naturally leads to the need of reading/searching other related issues which is something that has to be done at any case.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Strategy 3: Categorize issues by topic&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This small and probably super-obvious step was actually more gratifying than the low-handing fruits. At this stage, I decided that the process of triage the issue queue will be a complementary activity to my own learning path of the module. So, I made a list of the issues, categorized by the topic of the workshopper, i.e. &amp;ldquo;concat&amp;rdquo;, &amp;ldquo;http_server&amp;rdquo;, &amp;ldquo;http_client&amp;rdquo;, etc. and then sorted them in the same way as I would go through them in the workshopper. This way, I reached a natural flow of working on the problem myself trying to solve it (experiencing the same problems as I&amp;rsquo;d see in the issue queue) and then going through the list of related issues and pull requests.&lt;/p&gt;

&lt;p&gt;Sure enough, the sole act of first doing the challenge myself and then reading information and reports about the issue gives a very good background and picture on the way I&amp;rsquo;d approach the issues and the pull requests. Sometimes opening a pull request suggesting an update in the problem definition could be solving many issues coming from misunderstanding the problem or misunderstanding the expected code implementation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Strategy 4: Prioritize most recent communication&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s an approach of working out issues in open source projects in software or software modules that one does not necessarily use directly everyday or is not affected/blocked at a current time. I didn&amp;rsquo;t prioritize latest communication at this triage because the project is not so big and there aren&amp;rsquo;t so many issues or pull requests. In case the project involves thousand of developers or sub-functionalities that are not easy to see or figure out, but still feels good to contribute back, that strategy could be useful to get into effective flow of solving problems that are important/actual/active at the current moment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Strategy 5: Follow your own interest&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In a similar way of strategy 3, which involved prioritizing issues by topic, I could say that it&amp;rsquo;s pretty important to work on issues that are genuinely interesting for oneself. This means that, even if the project was bigger and harder to maintain, the passion which someone has about a topic would always win over a non-interested trivial going through the issue queue solving issues that are not really motivation enough to learn from.&lt;/p&gt;

&lt;h3 id=&#34;your-feedback-is-nbsp-valuable&#34;&gt;Your feedback is&amp;nbsp;valuable&lt;/h3&gt;

&lt;p&gt;To summarize this meta-article, your feedback on both the &lt;a href=&#34;https://github.com/workshopper/stream-adventure/issues&#34;&gt;repository of the project&lt;/a&gt; and my thoughts are very welcome&amp;nbsp;:)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sharing is caring!&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a node.js client for the EU Open Data Portal</title>
      <link>https://kalinchernev.github.io/eu-data-portal-nodejs-client/</link>
      <pubDate>Sun, 02 Oct 2016 12:10:11 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/eu-data-portal-nodejs-client/</guid>
      <description>

&lt;p&gt;Planning to make an open data GraphQL server, it was natural to first build a small abstraction wrapper which can be re-used in other projects. Basically, the &lt;a href=&#34;https://www.npmjs.com/package/odp&#34;&gt;odp library&lt;/a&gt; I&amp;rsquo;m going to talk about is just a simplified client for fetching data from the EU Open Data Portal.&lt;/p&gt;

&lt;h3 id=&#34;getting-the-library&#34;&gt;Getting the library&lt;/h3&gt;

&lt;p&gt;When you have &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;node.js&lt;/a&gt;, the module can be installed by npm:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install odp
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;library-api&#34;&gt;Library API&lt;/h3&gt;

&lt;p&gt;The API of the module is pretty simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Get a range of the whole list of datasets:
odp.getDatasets({query: {limit: 100, offset: 1}}).then((data) =&amp;gt; {
  console.log(data);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Currently, there are 4 methods which match the brief information from the &lt;a href=&#34;https://data.europa.eu/euodp/en/developerscorner&#34;&gt;developers&amp;rsquo; corner&lt;/a&gt;. Methods are: &lt;code&gt;getDatasets()&lt;/code&gt;, &lt;code&gt;getTags()&lt;/code&gt;, &lt;code&gt;getDataset()&lt;/code&gt; and &lt;code&gt;datasetSearch()&lt;/code&gt;. It could be that there are more options than that in the API, but these are all I know so far as user of the website.&lt;/p&gt;

&lt;p&gt;An &lt;a href=&#34;https://github.com/kalinchernev/odp/blob/master/README.md#examples&#34;&gt;Examples section&lt;/a&gt; is included in the README file for further details.&lt;/p&gt;

&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;

&lt;p&gt;Suggestions and pull requests are welcome at the &lt;a href=&#34;https://github.com/kalinchernev/odp&#34;&gt;github page of the project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For inspirations of use, more information about the data or introduction training of the benefits of using open data, visit the &lt;a href=&#34;https://www.europeandataportal.eu/&#34;&gt;europeandataportal.eu&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Debugging node.js in Cloud9 IDE</title>
      <link>https://kalinchernev.github.io/debugging-nodejs-in-cloud9-ide/</link>
      <pubDate>Sun, 04 Sep 2016 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/debugging-nodejs-in-cloud9-ide/</guid>
      <description>

&lt;p&gt;In this article I&amp;rsquo;ll be sharing some of my level-up experience learning how to debug node.js apps. It was not easy at first, but once I got it, I felt empowered that now I can work with any code base.&lt;/p&gt;

&lt;p&gt;Debugging is useful for solving vague problems in other people&amp;rsquo;s code and it&amp;rsquo;s also useful for learning how something actually works. The article might be particularly useful for those used to having debugger experience in WebStorm or similar IDEs.&lt;/p&gt;

&lt;h3 id=&#34;quick-reference&#34;&gt;Quick reference&lt;/h3&gt;

&lt;p&gt;That article is meant to be more like a cheat sheet rather than too detailed step by step guide, here&amp;rsquo;s a go-to list of techniques:&lt;/p&gt;

&lt;h3 id=&#34;node-debugger&#34;&gt;Node debugger&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s start by the basics — using the &lt;a href=&#34;https://nodejs.org/api/debugger.html&#34;&gt;node&amp;rsquo;s native debugger&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, &lt;a href=&#34;https://github.com/Surnet/swagger-jsdoc/blob/master/example/app.js&#34;&gt;this app&lt;/a&gt; contains a simple server returning a JSON object which is a &lt;a href=&#34;https://www.google.be/url?sa=t&amp;amp;amp;rct=j&amp;amp;amp;q=&amp;amp;amp;esrc=s&amp;amp;amp;source=web&amp;amp;amp;cd=1&amp;amp;amp;cad=rja&amp;amp;amp;uact=8&amp;amp;amp;ved=0ahUKEwiG4Pi0qfbOAhUEOhQKHaQICOAQFggcMAA&amp;amp;amp;url=http%3A%2F%2Fswagger.io%2Fspecification%2F&amp;amp;amp;usg=AFQjCNH_jZB7rkJVVCg-JHFmeLAHwMnUfw&amp;amp;amp;sig2=R2rG7_9EH1ctFeFwtJ7cPw&amp;amp;amp;bvm=bv.131783435,d.d24&#34;&gt;swagger specification&lt;/a&gt; and I need to debug and see its value. So, in this example, I&amp;rsquo;ll follow this steps to see the contents of the variable:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set a break point with &lt;code&gt;debugger&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run the script with &lt;code&gt;node debug example/app.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Work with the controls of the debugger to reach a good value: &lt;code&gt;c&lt;/code&gt; to continue and &lt;code&gt;n&lt;/code&gt; for next&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;repl&lt;/code&gt; to execute some code which access current state of the system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*CHRmYU912yZDRmqz7Z490w.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;simple-script&#34;&gt;Simple script&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add a break point&lt;/li&gt;
&lt;li&gt;Press the Run button to execute the default node runner (ensure the debugger is enabled — &lt;a href=&#34;https://docs.c9.io/docs/debugging-your-code&#34;&gt;more info&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*I-mVNLptBFDG-EaJpLR6rQ.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;mocha-tests&#34;&gt;Mocha tests&lt;/h3&gt;

&lt;p&gt;This is an &lt;a href=&#34;https://docs.c9.io/docs/experimental-features&#34;&gt;experimental feature&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*-8oDjYBTEU4-G8H5_vw5lg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enable &amp;lsquo;Tests&amp;rdquo; from the editor settings&lt;/li&gt;
&lt;li&gt;Refresh the page and see the panel&lt;/li&gt;
&lt;li&gt;Put a break point in the test&lt;/li&gt;
&lt;li&gt;Enable debugging in the &amp;ldquo;Test&amp;rdquo; panel&lt;/li&gt;
&lt;li&gt;Run the test suite or scenario&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This feature actually worked for me, I felt just the same way when I made my first &lt;a href=&#34;http://mortalkombat.wikia.com/wiki/Animality&#34;&gt;animality in MK3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*OHINaf_jcvN75EN1M0ozlQ.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;command-line-apps&#34;&gt;Command-line apps&lt;/h3&gt;

&lt;p&gt;In fact it&amp;rsquo;s almost identical to debugging a simple script, the only detail you have to notice is an input box where you put the actual command as if ran in the command line.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open the command-line app and place a break point&lt;/li&gt;
&lt;li&gt;Use the Run menu to start the process in debug more&lt;/li&gt;
&lt;li&gt;Change the input process name and restart the runner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*V9xHSnqzwCasqzHiHyBD5Q.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;feedback-is-nbsp-welcome&#34;&gt;Feedback is&amp;nbsp;welcome&lt;/h3&gt;

&lt;p&gt;Use the comments below to share your techniques and opinions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Drupalaton 2016</title>
      <link>https://kalinchernev.github.io/drupalaton-2016/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/drupalaton-2016/</guid>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Recently, I joined an event on &lt;a href=&#34;http://drupal.org&#34;&gt;Drupal&lt;/a&gt; in Hungary — the &lt;a href=&#34;http://drupalaton.hu&#34;&gt;Drupalaton&lt;/a&gt;. It is one of the most exciting yearly Drupal events in Europe, organized by the local community. It gathers hundreds of contributors who collaborate on Drupal issues, share knowledge and have fun together&amp;nbsp;:)&lt;/p&gt;

&lt;p&gt;I really enjoyed this year&amp;rsquo;s event since it covered a lot of my favorite topics. (discussed shortly after) Good sessions, pleasant talks with the community, and also — a lot of new things to learn. The event took place at the shore of the biggest warm-water lake in Europe, at Lake Balaton.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*ME6rgg3pXT8oid14R5RNVg.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;sessions&#34;&gt;Sessions&lt;/h3&gt;

&lt;p&gt;Sure enough, sessions were covering important &lt;a href=&#34;https://www.drupal.org/8&#34;&gt;Drupal 8&lt;/a&gt; features. There were several tracks, as well as sprints, where participants were able to collaborate.&lt;/p&gt;

&lt;p&gt;I visited mainly the workshops related to the &lt;a href=&#34;http://buytaert.net/a-roadmap-for-making-drupal-more-api-first&#34;&gt;API-first initiative&lt;/a&gt;. This is a futuristic initiative, involving many JavaScript tools and modern concepts and practices for building service-oriented apps, not only websites.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a vital initiative for Drupal as a platform for the future. Presently, Drupal is one of the best systems for content modelling, querying, and building websites in general. This means that normal people can make websites with complex information structures with very little or no programming.&lt;/p&gt;

&lt;p&gt;The API-first initiative could potentially take Drupal into a place where &lt;strong&gt;the content modelling and querying becomes data modelling and querying, enabling non-developers to build complex APIs for the next generation apps.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apart from these, there were also sessions about Drupal-specific modules being upgraded between Drupal 7 and 8. In overall, I think we&amp;rsquo;ll see more &amp;ldquo;good stuff&amp;rdquo; of &lt;a href=&#34;https://symfony.com/&#34;&gt;Symfony&lt;/a&gt;, PHP OOP, design patterns, etc topics during next Drupal events.&lt;/p&gt;

&lt;h3 id=&#34;workshops&#34;&gt;Workshops&lt;/h3&gt;

&lt;p&gt;This is my humble list of highlighted sessions I focused on.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://2016.drupalaton.hu/schedule#speaker-166&#34;&gt;&lt;strong&gt;REST APIs&lt;/strong&gt;&lt;/a&gt; by Pieter Frenssen (&lt;a href=&#34;https://www.drupal.org/u/pfrenssen&#34;&gt;pfrenssen&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*4o8SJ8Q9EhrUt4fkz8DKpQ.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Well-formed, step-by-step guide, covering all important concepts of having Drupal as both server and/or a client in &lt;a href=&#34;http://www.restapitutorial.com/&#34;&gt;REST API architectures&lt;/a&gt;. If you want to skip the details in this section, check &lt;a href=&#34;https://www.drupal.org/developing/api/8/rest#practical&#34;&gt;Drupal REST API docs&lt;/a&gt; which covers great amount of information around the topic.&lt;/p&gt;

&lt;p&gt;The beginning was a general information about what REST actually is. This included status codes, methods, design patterns, etc.&lt;/p&gt;

&lt;p&gt;After presenting the basics, the next step was to use Drupal as a client, fetching data from &lt;a href=&#34;https://www.drupal.org/drupalorg/docs/api&#34;&gt;drupal.org REST API&lt;/a&gt; and displaying it in a block.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://hechoendrupal.gitbooks.io/drupal-console/content/en/commands/generate-plugin-block.html&#34;&gt;Creating a block with Drupal Console&lt;/a&gt; was super-easy. That was a really neat way to demonstrate injecting the &lt;a href=&#34;https://api.drupal.org/api/drupal/core%21lib%21Drupal.php/function/Drupal%3A%3AhttpClient/8.2.x&#34;&gt;http_client service&lt;/a&gt; via the cli from the &lt;a href=&#34;https://api.drupal.org/api/drupal/core!core.api.php/group/container/8.2.x&#34;&gt;container&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There was also a demo of using the &lt;a href=&#34;https://www.drupal.org/documentation/modules/rest&#34;&gt;core REST API module&lt;/a&gt;, which transforms Drupal into an API server. &lt;a href=&#34;https://www.drupal.org/project/restui&#34;&gt;REST UI module&lt;/a&gt; was demonstrated as a site builders&amp;rsquo; tool to manage the configurations which are otherwise &lt;a href=&#34;https://www.chapterthree.com/blog/custom-restful-api-drupal-8&#34;&gt;managed through&amp;nbsp;.yml files&lt;/a&gt;. Here, it&amp;rsquo;s important to note, that the endpoints of the REST API are controllers. Developers have the freedom to choose which format of data to return and via which components. For example, one can use the &lt;a href=&#34;https://github.com/symfony/http-foundation&#34;&gt;Symfony&amp;rsquo;s HttpFoundation&lt;/a&gt; and its JsonResponse instance.&lt;/p&gt;

&lt;p&gt;In short, there was a lot of good advice, both about REST APIs in general, and Drupal-specific implementations, in combination with third-party tools and components.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://2016.drupalaton.hu/schedule#speaker-171&#34;&gt;&lt;strong&gt;Headless Drupal&lt;/strong&gt;&lt;/a&gt; by Ruben Teijeiro (&lt;a href=&#34;https://www.drupal.org/u/rteijeiro&#34;&gt;rteijeiro&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Even though I did not attend the workshop, it was still part of the Drupal API-first series of topics. &lt;a href=&#34;https://github.com/rteijeiro/headless-drupal8&#34;&gt;Code of the session&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://2016.drupalaton.hu/schedule#speaker-106&#34;&gt;&lt;strong&gt;Progressive web apps&lt;/strong&gt;&lt;/a&gt; by Théodore Biadala (&lt;a href=&#34;https://www.drupal.org/u/nod_&#34;&gt;nod_&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;That was an intermediate-level session. &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;Promises&lt;/a&gt; were in the core of all code snippets and demonstrations. Highlight APIs: &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/API/Fetch_API&#34;&gt;Fetch API&lt;/a&gt;, &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Cache&#34;&gt;Cache&lt;/a&gt;, &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers&#34;&gt;Service Workers&lt;/a&gt;, and &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API&#34;&gt;Web APIs&lt;/a&gt; in general. The main idea was to demonstrate how modern web APIs can be used to build web apps, having functionalities very similar to native apps.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/theodoreb/pwa-workshop&#34;&gt;The repository&lt;/a&gt; of the workshop is public, so go and check it for further details in case you&amp;rsquo;re interested into the interface implementations.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s interesting to note the example of &lt;a href=&#34;https://github.com/theodoreb/pwa-workshop/blob/master/js/1-promise.js#L12&#34;&gt;promise-based&lt;/a&gt; &lt;a href=&#34;https://www.drupal.org/node/756722#behaviors&#34;&gt;behaviors system&lt;/a&gt;. A modernized implementation of classic concept on managing JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://2016.drupalaton.hu/schedule#speaker-111&#34;&gt;&lt;strong&gt;GraphQL&lt;/strong&gt;&lt;/a&gt; by Sebastian Siemssen (&lt;a href=&#34;https://www.drupal.org/u/fubhy&#34;&gt;fubhy&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;The &lt;a href=&#34;https://twitter.com/hashtag/GraphQL?src=hash&#34;&gt;#GraphQL&lt;/a&gt; workshop w/ &lt;a href=&#34;https://twitter.com/thefubhy&#34;&gt;@thefubhy&lt;/a&gt;  at &lt;a href=&#34;https://twitter.com/hashtag/Drupalaton?src=hash&#34;&gt;#Drupalaton&lt;/a&gt; &lt;a href=&#34;https://t.co/AgfQGzCq81&#34;&gt;pic.twitter.com/AgfQGzCq81&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kalin Chernev (@kalinchernev) &lt;a href=&#34;https://twitter.com/kalinchernev/status/764072778773344256&#34;&gt;August 12, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Needless to say, that was the &amp;ldquo;cherry&amp;rdquo; session. It was about the &lt;a href=&#34;http://graphql.org/docs/getting-started/&#34;&gt;Facebook&amp;rsquo;s GraphQL&lt;/a&gt;, which developers were ready to understand, after touching upon REST APIs, JavaScript Frameworks, knowing what is a server and a client in general in the previous sessions.&lt;/p&gt;

&lt;p&gt;I personally enjoyed the workshop. In fact, I was even able follow along with the live coding on the main screen. It was also nice that it made a clear association between specification and language implementation. This means that same concepts of data architecture were demonstrated and practices with &lt;a href=&#34;https://github.com/graphql/express-graphql&#34;&gt;JavaScript&lt;/a&gt; and &lt;a href=&#34;https://github.com/Youshido/GraphQL&#34;&gt;PHP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the first part, the &lt;a href=&#34;https://github.com/graphql/swapi-graphql&#34;&gt;Star Wars API&lt;/a&gt; was used with the &lt;a href=&#34;http://graphql-swapi.parseapp.com/&#34;&gt;GraphiQL&lt;/a&gt; — a hands-on tutorial to &lt;a href=&#34;http://slides.com/sebastiansiemssen/graphql-meets-drupal-dd#/3/7&#34;&gt;understand the basic concepts&lt;/a&gt; like queries, fragments, variables, sub selections, etc.&lt;/p&gt;

&lt;p&gt;Second was the usage of node.js app with express, express-graphql, graphiql, graphql and other popular modules to transpile ES6 code. In this playground, the building part started. Various types were used: GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLInt, GraphQLNonNull, GraphQLList, etc. That was my first time to actually write something working out of the &lt;a href=&#34;https://learngraphql.com/&#34;&gt;learngraphql.com&lt;/a&gt; online tutorials.&lt;/p&gt;

&lt;p&gt;There was a demo of Relay in-between, as a bonus, to grab a general understanding of the additional features provided on top of the fundamental specification.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*tpPTqCyZnfPqhb1er6ECpw.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After the GraphQL implementation in JavaScript was getting convenient, then we continued using the same concepts, but to build a server in PHP and the &lt;a href=&#34;https://www.drupal.org/project/graphql&#34;&gt;Drupal GraphQL module&lt;/a&gt;. Sure enough, the approach was similar, but this time extending SchemaProviderBase and implementing framework-specific EntityTypeManager (&lt;a href=&#34;https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Entity%21EntityTypeManagerInterface.php/interface/EntityTypeManagerInterface/8.2.x&#34;&gt;Interface&lt;/a&gt;) to manage &lt;a href=&#34;https://www.drupal.org/node/2192175&#34;&gt;Content Entity&lt;/a&gt; items.&lt;/p&gt;

&lt;h3 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;The event was awesome, the people were great, and the sessions were truly useful. I feel somehow privileged with the opportunity to attend such a good series of sessions related to API-s in the Drupal community!&lt;/p&gt;

&lt;p&gt;There are a lot of new technologies and tools to learn and play with. I hope the summary above is a good starter for anyone enthusiastic about the future of the tools mentioned.&lt;/p&gt;

&lt;h3 id=&#34;community&#34;&gt;Community&lt;/h3&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;End of the first day at &lt;a href=&#34;https://twitter.com/drupalaton&#34;&gt;@drupalaton&lt;/a&gt; we have a great dinner. &lt;a href=&#34;https://t.co/CN795wXixz&#34;&gt;pic.twitter.com/CN795wXixz&lt;/a&gt;&lt;/p&gt;&amp;mdash; 5NET Interactive (@5NEThu) &lt;a href=&#34;https://twitter.com/5NEThu/status/763818240954998789&#34;&gt;August 11, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Many thanks to the local Drupal community in Hungary!&amp;nbsp;:)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Coding battle with Skygate @MolenGeek</title>
      <link>https://kalinchernev.github.io/coding-battle-molengeek/</link>
      <pubDate>Sat, 09 Jul 2016 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/coding-battle-molengeek/</guid>
      <description>

&lt;p&gt;The last event from the series of coding battles organized by &lt;a href=&#34;https://www.philos.io/&#34;&gt;Philos&lt;/a&gt;, this time in cooperation with Skygate on a life-saving topic using tools like Google Maps and Firebase.&lt;/p&gt;

&lt;h4 id=&#34;introduction&#34;&gt;Introduction&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/denisomelcenco&#34;&gt;Denis Omelcenco&lt;/a&gt; from Skygate presented the challenge: make an app to locate the closest defibrillator. The initial code base contained helpful starting materials such as a &lt;a href=&#34;https://github.com/DenisSkygate/CodingBattle/blob/master/Defibrillators.json&#34;&gt;JSON file listing the defibrillators&lt;/a&gt; and their locations, together with some &lt;a href=&#34;https://github.com/DenisSkygate/CodingBattle&#34;&gt;HTML files&lt;/a&gt; to facilitate the app building. Also, &lt;a href=&#34;https://twitter.com/maxczet&#34;&gt;Max&lt;/a&gt; provided additional helpful resources on &lt;a href=&#34;https://developers.google.com/maps/&#34;&gt;Google Maps API&lt;/a&gt;, &lt;a href=&#34;https://www.firebase.com/&#34;&gt;Firebase&lt;/a&gt;, etc. As you can imagine, the topic inspired the developers since it&amp;rsquo;s based on meaningful cause.&lt;/p&gt;

&lt;p&gt;In the spirit of &amp;ldquo;Never too early to start&amp;rdquo;, there was a very young participant. I wish this inspires more lads and ladies to join in next events&amp;nbsp;:)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*ZiiIav-nONmY-C8LqOIxdw.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;the-tools&#34;&gt;The tools&lt;/h4&gt;

&lt;p&gt;The &lt;strong&gt;Google Maps API&lt;/strong&gt; was the easiest for the developers, probably because it&amp;rsquo;s a popular tool many of us had used before. Needless to say, good start examples were present, together with many answers on the internet on how to handle the various topics like directions, geo-locations, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Firebase&lt;/strong&gt; was a new tool for my team. The tool came super-handy on building an API based on an existing &lt;a href=&#34;https://www.firebase.com/docs/rest/quickstart.html&#34;&gt;JSON really really easy&lt;/a&gt;. The only step necessary was to normalize the key:value pairs to have good naming for the import. Otherwise, we built a RESTful back-end with data about defibrillators in minutes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/swift/&#34;&gt;&lt;strong&gt;Swift&lt;/strong&gt;&lt;/a&gt; was also useful tool for some who decided to build a native app&amp;nbsp;:)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*EEgjG4Ja_L5iScKDLYM2Yg.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;winners-and-working-nbsp-apps&#34;&gt;Winners and working&amp;nbsp;apps&lt;/h4&gt;

&lt;p&gt;In the end, there were 2 working apps: the one with Swift, and one with &lt;a href=&#34;https://github.com/DenisSkygate&#34;&gt;the &amp;ldquo;starterkit&amp;rdquo;&lt;/a&gt;. The final presentations of the projects gave some insights on the Google Maps APIs used.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*A5RYiojFrUUUxRklNiRT8Q.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;time-to-enjoy-the-summer-nbsp&#34;&gt;Time to enjoy the summer&amp;nbsp;:)&lt;/h4&gt;

&lt;p&gt;Next event will be somewhere in September, but it&amp;rsquo;s not fixed yet because of the forthcoming summer months. To get notified for the next editions, just sign in the &lt;a href=&#34;http://www.meetup.com/javascriptlab/&#34;&gt;meetup group&lt;/a&gt; or in the facebook group page.&lt;/p&gt;

&lt;p&gt;Thanks to Philos we saw a growing community and interest of hacking making small useful apps in very short time. Wish them luck and more opportunities for organizing even bigger projects in the future!&amp;nbsp;:)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*T1IwXqRxsa26rQ2Wu1Sf8A.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>