<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graphql on Kalin Chernev</title>
    <link>https://kalinchernev.github.io/tags/graphql/index.xml</link>
    <description>Recent content in Graphql on Kalin Chernev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>All rights reserved - 2017</copyright>
    <atom:link href="https://kalinchernev.github.io/tags/graphql/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>February digest 2017</title>
      <link>https://kalinchernev.github.io/february-digest-2017/</link>
      <pubDate>Wed, 01 Mar 2017 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/february-digest-2017/</guid>
      <description>

&lt;p&gt;After my &lt;a href=&#34;https://kalinchernev.github.io/january-digest-2017&#34;&gt;January digest&lt;/a&gt;, I got feedback from a precious reader that these stories must be toilet-friendly, so I’ll keep it short, directly to the essence :)&lt;/p&gt;

&lt;h3 id=&#34;productivity&#34;&gt;Productivity&lt;/h3&gt;

&lt;p&gt;Without a question, the first thing coming to my mind in this month is the set of small changes I made with regards to my typing habits.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en&#34;&gt;Vimium&lt;/a&gt; turned out to be really useful utility in my daily work on my &lt;a href=&#34;http://shop.lenovo.com/us/en/laptops/thinkpad/x-series-tablet/x220tablet/&#34;&gt;x220t&lt;/a&gt;. Together with the &lt;a href=&#34;https://en.wikipedia.org/wiki/Pointing_stick&#34;&gt;clit mouse&lt;/a&gt;, browsing becomes more straight-forward, even when clicking is inevitable. Yes, I feel more comfortable in vim after having vimium in my life, but I still prefer to &lt;a href=&#34;https://www.toptal.com/php/how-to-be-efficient-in-phpstorm&#34;&gt;be pragmatic at work&lt;/a&gt;. In the end, it all comes to wiring up an effective association between the brain and the computer which boils down to having &lt;a href=&#34;http://www.ratatype.com/learn/&#34;&gt;effective typing habits&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another big discovery for me this month was the &lt;a href=&#34;https://www.imagemagick.org/script/convert.php&#34;&gt;imagemagick’s&lt;/a&gt; &lt;code&gt;[conver](https://www.imagemagick.org/script/convert.php)&lt;/code&gt; &lt;a href=&#34;https://www.imagemagick.org/script/convert.php&#34;&gt;cli tools&lt;/a&gt;. After spending more than 30 minutes of trying to make a &lt;a href=&#34;https://twitter.com/kalinchernev/status/835053566632964097&#34;&gt;screenshot of gmail message for a tweet&lt;/a&gt; and not managing to convert paged pdf into a single continuous image, that command in the CLI really did magic:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ convert in.pdf -append out.png
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;graphql&#34;&gt;GraphQL&lt;/h3&gt;

&lt;p&gt;I managed to spend few hours with this technology this month and I will remember few highlights as a result of that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@kalin.chernev/the-guide-to-learn-graphql-i-wish-i-found-few-months-go-97f9d9ca6f12#.7ss1zopsu&#34;&gt;My short sharing session&lt;/a&gt; got more than 1000 visits on day 1, scoring for more than 1.4k at present moment.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://graphql-docs.com/&#34;&gt;GraphQL docs&lt;/a&gt; got published by &lt;a href=&#34;https://scaphold.io/&#34;&gt;Scaphold&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/APIs-guru/graphql-voyager&#34;&gt;GraphQL voyager&lt;/a&gt; got published by &lt;a href=&#34;https://medium.com/@apis.guru&#34;&gt;APIs.guru&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The technology is getting further traction and community love.&lt;/p&gt;

&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;

&lt;p&gt;Although there have been numerous resources coming by on a daily basis, these are the most prominent to my humble opinion:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opensource.guide/&#34;&gt;Open source guides&lt;/a&gt; by github&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dev-books.com/&#34;&gt;Dev books&lt;/a&gt; summary based on stackoverflow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoy, and keep reading and writing code for pleasure! :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The guide to learn GraphQL I wish I found few months go</title>
      <link>https://kalinchernev.github.io/graphql-guide-wish-found-before/</link>
      <pubDate>Thu, 16 Feb 2017 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/graphql-guide-wish-found-before/</guid>
      <description>

&lt;p&gt;Although I consider myself an intermediate JavaScript developer, I struggled for weeks to understand fundamental concepts which are obvious for those living in the React.js ecosystem. So, this is a list of things I now see which I consider to be not documented or explained well enough for people like myself — those who like the ideas behind GraphQL and want to use it, but not necessarily having any experience with the React.js toolchain.&lt;/p&gt;

&lt;p&gt;The list will follow the style of &lt;a href=&#34;https://medium.com/@dceddia&#34;&gt;Dave Ceddia&lt;/a&gt; who made &lt;a href=&#34;https://daveceddia.com/timeline-for-learning-react/&#34;&gt;a timeline to learn React&lt;/a&gt;. It was really handy when I was experimenting with React few months ago, because it’s splitting the topics clearly and logically, smoothing the learning curve for newcomers. (At least it smoothed mine)&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;0-introduction&#34;&gt;0. Introduction&lt;/h3&gt;

&lt;p&gt;As a most fundamental start of everything, you have to have an idea what GraphQL is, and what it’s not.&lt;/p&gt;

&lt;p&gt;Get motivated:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/UBGzsb2UkeY?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Get the basic concepts:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/WQLzZf34FJ8?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;For me, there are few reasons to invest time in learning GraphQL, even if I’m not a React developer, but an API enthusiast:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Less round trips to the server&lt;/li&gt;
&lt;li&gt;Declare what you want, get exactly what you need&lt;/li&gt;
&lt;li&gt;Introspection is convenient and useful&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://graphql.org/swapi-graphql/&#34;&gt;GraphiQL IDE&lt;/a&gt; is amazing&lt;/li&gt;
&lt;li&gt;Building proxy servers on top of existing REST APIs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GraphQL is a specification, it’s language independent, yet the most popular one is the JavaScript one. So, it’s useful to be comfortable with JavaScript for understanding the official documentation. (More or this later)&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;1-languages&#34;&gt;1. Languages&lt;/h3&gt;

&lt;p&gt;First, you have to be comfortable with at least one programming language and the concepts behind the GraphQL query language. Regardless of the language of choice, you have to be OK with 2 languages.&lt;/p&gt;

&lt;h3 id=&#34;2-syntax&#34;&gt;2. Syntax&lt;/h3&gt;

&lt;p&gt;Assuming that you follow the official track of &lt;a href=&#34;http://graphql.org/learn/&#34;&gt;learning GraphQL&lt;/a&gt; you will get some ideas about the syntax of GraphQL. You can improve your skills with it following &lt;a href=&#34;https://learngraphql.com/&#34;&gt;an online hands-on course&lt;/a&gt; as a complementary. By the end of these two, you will feel the power of querying information in a declarative way, which is as special as writing declarative components in React.&lt;/p&gt;

&lt;p&gt;Then, if you follow the &lt;a href=&#34;http://graphql.org/graphql-js/&#34;&gt;graphql.js&lt;/a&gt; track of the official website, which is something that I did, you will have to be comfortable with the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript syntax&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://es6katas.org/&#34;&gt;ES6&lt;/a&gt; syntax&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flowtype.org/&#34;&gt;Flow&lt;/a&gt; syntax&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The majority of developers will get around the ES6 for sure, but the Flow part was really problematic for me. Why? Because, it’s natural to head directly to the &lt;a href=&#34;http://graphql.org/graphql-js/type/&#34;&gt;types&lt;/a&gt; section as you already know that everything goes around types, but the syntax is nothing you have seen before. (I hadn’t)&lt;/p&gt;

&lt;p&gt;So, after a while, you will most probably end up on a higher-level scenario of using graphql.js with express, reading about &lt;a href=&#34;http://graphql.org/graphql-js/type/#graphqlobjecttype&#34;&gt;GraphQLObjectType&lt;/a&gt;. The documentation is highly concise on types and what is what and what is where, etc. Without having an idea that it’s written in Flow syntax (with ES6), you will be guessing a lot.&lt;/p&gt;

&lt;p&gt;The first eye-opening moment of syntax difference could be that you can &lt;a href=&#34;http://graphql.org/graphql-js/constructing-types/&#34;&gt;build types in several ways&lt;/a&gt;. The second one could be that &lt;a href=&#34;http://graphql.org/learn/execution/#root-fields-resolvers&#34;&gt;context, fields and resolvers&lt;/a&gt; start to speak to you. It’s one thing to follow the tutorials and achieving results mimicking the example code, but it’s a totally different thing when you can read the documentation and see that you can work with promises, globals, and how to work with fields in circular dependencies.&lt;/p&gt;

&lt;p&gt;At the moment of writing this article there is no single mentioning of Flow in the official documentation on the website.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;3-resolve&#34;&gt;3. Resolve()&lt;/h3&gt;

&lt;p&gt;If you come from React, &lt;code&gt;resolve()&lt;/code&gt; will maybe ring an association with &lt;code&gt;render()&lt;/code&gt; It serves a totally different purpose, as it’s basically answering the question of what a given field should consider part of the given type, but for me it bears a similar simplicity and importance to the declarative nature.&lt;/p&gt;

&lt;p&gt;Again, the documentation is good in giving a &lt;a href=&#34;http://graphql.org/learn/execution/#root-fields-resolvers&#34;&gt;simple explanation what you can do with these&lt;/a&gt;, however it took me some time to decipher the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fields: GraphQLFieldConfigMapThunk | GraphQLFieldConfigMap;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It was not easy to understand that &lt;code&gt;GraphQLFieldConfigMapThunk&lt;/code&gt; is used when fields should be able to handle circular dependencies.&lt;/p&gt;

&lt;p&gt;I have to be honest, it also took me more time to understand what are the magical parameters that go in this function. Different tutorials follow different ways to get the arguments they need, such as using &lt;code&gt;_&lt;/code&gt; for first arg (to skip using it), or using the &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&#34;&gt;destructing assignment&lt;/a&gt; to get part of the context, etc. Again, understanding documentation with Flow helps more than the &lt;code&gt;console.log(...args)&lt;/code&gt; I was using to figure them out.&lt;/p&gt;

&lt;h3 id=&#34;4-relay&#34;&gt;4. Relay&lt;/h3&gt;

&lt;p&gt;Relay is the tool that loosely couples with GraphQL. You need it for more sophisticated scenarios when you need caching, pagination, etc. I haven’t used it yet, as I’m on the fundamentals of GraphQL, but I know it’s out there and I will use it when “relay compliance” is necessary in bigger projects or special client scenarios.&lt;/p&gt;

&lt;p&gt;Not required to learn GraphQL.&lt;/p&gt;

&lt;h3 id=&#34;5-apollo&#34;&gt;5. Apollo&lt;/h3&gt;

&lt;p&gt;I follow it even more than relay, (because of &lt;a href=&#34;https://www.meteor.com/&#34;&gt;MDG&lt;/a&gt;) but I haven’t had the reasons to use it until now. From aside, it seems shiny and well supported. I think this is the direction to go when using non-React toolchain and when you need more sophisticated solutions with MDG-level of quality and coolness :)&lt;/p&gt;

&lt;p&gt;Also not required to learn GraphQL.&lt;/p&gt;

&lt;h3 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;I think that React.js developers are in a better position of understanding and working with GraphQL at this time. That is normal, as little by little I start to see how the different tools work together to solve problems in specific ways that come naturally by understanding concepts behind the declarative ways of thinking in facebook products at the moment.&lt;/p&gt;

&lt;p&gt;So, if you are a developer that does not know all the facebook products, like me, start small by understanding the syntax and the documentation well, experiment with small projects, and use the variety of more sophisticated tools when your projects grow and require more control and flexibility.&lt;/p&gt;

&lt;p&gt;Think client-first approach. The client as your consumer of the API, and the client who wants to get something done. There must be a reason why the documentation of GraphQL does not mention inter-related and more sophisticated tools directly — you use them when you need them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Drupalaton 2016</title>
      <link>https://kalinchernev.github.io/drupalaton-2016/</link>
      <pubDate>Mon, 22 Aug 2016 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/drupalaton-2016/</guid>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Recently, I joined an event on &lt;a href=&#34;http://drupal.org&#34;&gt;Drupal&lt;/a&gt; in Hungary — the &lt;a href=&#34;http://drupalaton.hu&#34;&gt;Drupalaton&lt;/a&gt;. It is one of the most exciting yearly Drupal events in Europe, organized by the local community. It gathers hundreds of contributors who collaborate on Drupal issues, share knowledge and have fun together&amp;nbsp;:)&lt;/p&gt;

&lt;p&gt;I really enjoyed this year&amp;rsquo;s event since it covered a lot of my favorite topics. (discussed shortly after) Good sessions, pleasant talks with the community, and also — a lot of new things to learn. The event took place at the shore of the biggest warm-water lake in Europe, at Lake Balaton.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*ME6rgg3pXT8oid14R5RNVg.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;sessions&#34;&gt;Sessions&lt;/h3&gt;

&lt;p&gt;Sure enough, sessions were covering important &lt;a href=&#34;https://www.drupal.org/8&#34;&gt;Drupal 8&lt;/a&gt; features. There were several tracks, as well as sprints, where participants were able to collaborate.&lt;/p&gt;

&lt;p&gt;I visited mainly the workshops related to the &lt;a href=&#34;http://buytaert.net/a-roadmap-for-making-drupal-more-api-first&#34;&gt;API-first initiative&lt;/a&gt;. This is a futuristic initiative, involving many JavaScript tools and modern concepts and practices for building service-oriented apps, not only websites.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a vital initiative for Drupal as a platform for the future. Presently, Drupal is one of the best systems for content modelling, querying, and building websites in general. This means that normal people can make websites with complex information structures with very little or no programming.&lt;/p&gt;

&lt;p&gt;The API-first initiative could potentially take Drupal into a place where &lt;strong&gt;the content modelling and querying becomes data modelling and querying, enabling non-developers to build complex APIs for the next generation apps.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apart from these, there were also sessions about Drupal-specific modules being upgraded between Drupal 7 and 8. In overall, I think we&amp;rsquo;ll see more &amp;ldquo;good stuff&amp;rdquo; of &lt;a href=&#34;https://symfony.com/&#34;&gt;Symfony&lt;/a&gt;, PHP OOP, design patterns, etc topics during next Drupal events.&lt;/p&gt;

&lt;h3 id=&#34;workshops&#34;&gt;Workshops&lt;/h3&gt;

&lt;p&gt;This is my humble list of highlighted sessions I focused on.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://2016.drupalaton.hu/schedule#speaker-166&#34;&gt;&lt;strong&gt;REST APIs&lt;/strong&gt;&lt;/a&gt; by Pieter Frenssen (&lt;a href=&#34;https://www.drupal.org/u/pfrenssen&#34;&gt;pfrenssen&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*4o8SJ8Q9EhrUt4fkz8DKpQ.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Well-formed, step-by-step guide, covering all important concepts of having Drupal as both server and/or a client in &lt;a href=&#34;http://www.restapitutorial.com/&#34;&gt;REST API architectures&lt;/a&gt;. If you want to skip the details in this section, check &lt;a href=&#34;https://www.drupal.org/developing/api/8/rest#practical&#34;&gt;Drupal REST API docs&lt;/a&gt; which covers great amount of information around the topic.&lt;/p&gt;

&lt;p&gt;The beginning was a general information about what REST actually is. This included status codes, methods, design patterns, etc.&lt;/p&gt;

&lt;p&gt;After presenting the basics, the next step was to use Drupal as a client, fetching data from &lt;a href=&#34;https://www.drupal.org/drupalorg/docs/api&#34;&gt;drupal.org REST API&lt;/a&gt; and displaying it in a block.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://hechoendrupal.gitbooks.io/drupal-console/content/en/commands/generate-plugin-block.html&#34;&gt;Creating a block with Drupal Console&lt;/a&gt; was super-easy. That was a really neat way to demonstrate injecting the &lt;a href=&#34;https://api.drupal.org/api/drupal/core%21lib%21Drupal.php/function/Drupal%3A%3AhttpClient/8.2.x&#34;&gt;http_client service&lt;/a&gt; via the cli from the &lt;a href=&#34;https://api.drupal.org/api/drupal/core!core.api.php/group/container/8.2.x&#34;&gt;container&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There was also a demo of using the &lt;a href=&#34;https://www.drupal.org/documentation/modules/rest&#34;&gt;core REST API module&lt;/a&gt;, which transforms Drupal into an API server. &lt;a href=&#34;https://www.drupal.org/project/restui&#34;&gt;REST UI module&lt;/a&gt; was demonstrated as a site builders&amp;rsquo; tool to manage the configurations which are otherwise &lt;a href=&#34;https://www.chapterthree.com/blog/custom-restful-api-drupal-8&#34;&gt;managed through&amp;nbsp;.yml files&lt;/a&gt;. Here, it&amp;rsquo;s important to note, that the endpoints of the REST API are controllers. Developers have the freedom to choose which format of data to return and via which components. For example, one can use the &lt;a href=&#34;https://github.com/symfony/http-foundation&#34;&gt;Symfony&amp;rsquo;s HttpFoundation&lt;/a&gt; and its JsonResponse instance.&lt;/p&gt;

&lt;p&gt;In short, there was a lot of good advice, both about REST APIs in general, and Drupal-specific implementations, in combination with third-party tools and components.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://2016.drupalaton.hu/schedule#speaker-171&#34;&gt;&lt;strong&gt;Headless Drupal&lt;/strong&gt;&lt;/a&gt; by Ruben Teijeiro (&lt;a href=&#34;https://www.drupal.org/u/rteijeiro&#34;&gt;rteijeiro&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Even though I did not attend the workshop, it was still part of the Drupal API-first series of topics. &lt;a href=&#34;https://github.com/rteijeiro/headless-drupal8&#34;&gt;Code of the session&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://2016.drupalaton.hu/schedule#speaker-106&#34;&gt;&lt;strong&gt;Progressive web apps&lt;/strong&gt;&lt;/a&gt; by Théodore Biadala (&lt;a href=&#34;https://www.drupal.org/u/nod_&#34;&gt;nod_&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;That was an intermediate-level session. &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;Promises&lt;/a&gt; were in the core of all code snippets and demonstrations. Highlight APIs: &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/API/Fetch_API&#34;&gt;Fetch API&lt;/a&gt;, &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Cache&#34;&gt;Cache&lt;/a&gt;, &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers&#34;&gt;Service Workers&lt;/a&gt;, and &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API&#34;&gt;Web APIs&lt;/a&gt; in general. The main idea was to demonstrate how modern web APIs can be used to build web apps, having functionalities very similar to native apps.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/theodoreb/pwa-workshop&#34;&gt;The repository&lt;/a&gt; of the workshop is public, so go and check it for further details in case you&amp;rsquo;re interested into the interface implementations.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s interesting to note the example of &lt;a href=&#34;https://github.com/theodoreb/pwa-workshop/blob/master/js/1-promise.js#L12&#34;&gt;promise-based&lt;/a&gt; &lt;a href=&#34;https://www.drupal.org/node/756722#behaviors&#34;&gt;behaviors system&lt;/a&gt;. A modernized implementation of classic concept on managing JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://2016.drupalaton.hu/schedule#speaker-111&#34;&gt;&lt;strong&gt;GraphQL&lt;/strong&gt;&lt;/a&gt; by Sebastian Siemssen (&lt;a href=&#34;https://www.drupal.org/u/fubhy&#34;&gt;fubhy&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;The &lt;a href=&#34;https://twitter.com/hashtag/GraphQL?src=hash&#34;&gt;#GraphQL&lt;/a&gt; workshop w/ &lt;a href=&#34;https://twitter.com/thefubhy&#34;&gt;@thefubhy&lt;/a&gt;  at &lt;a href=&#34;https://twitter.com/hashtag/Drupalaton?src=hash&#34;&gt;#Drupalaton&lt;/a&gt; &lt;a href=&#34;https://t.co/AgfQGzCq81&#34;&gt;pic.twitter.com/AgfQGzCq81&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kalin Chernev (@kalinchernev) &lt;a href=&#34;https://twitter.com/kalinchernev/status/764072778773344256&#34;&gt;August 12, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Needless to say, that was the &amp;ldquo;cherry&amp;rdquo; session. It was about the &lt;a href=&#34;http://graphql.org/docs/getting-started/&#34;&gt;Facebook&amp;rsquo;s GraphQL&lt;/a&gt;, which developers were ready to understand, after touching upon REST APIs, JavaScript Frameworks, knowing what is a server and a client in general in the previous sessions.&lt;/p&gt;

&lt;p&gt;I personally enjoyed the workshop. In fact, I was even able follow along with the live coding on the main screen. It was also nice that it made a clear association between specification and language implementation. This means that same concepts of data architecture were demonstrated and practices with &lt;a href=&#34;https://github.com/graphql/express-graphql&#34;&gt;JavaScript&lt;/a&gt; and &lt;a href=&#34;https://github.com/Youshido/GraphQL&#34;&gt;PHP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the first part, the &lt;a href=&#34;https://github.com/graphql/swapi-graphql&#34;&gt;Star Wars API&lt;/a&gt; was used with the &lt;a href=&#34;http://graphql-swapi.parseapp.com/&#34;&gt;GraphiQL&lt;/a&gt; — a hands-on tutorial to &lt;a href=&#34;http://slides.com/sebastiansiemssen/graphql-meets-drupal-dd#/3/7&#34;&gt;understand the basic concepts&lt;/a&gt; like queries, fragments, variables, sub selections, etc.&lt;/p&gt;

&lt;p&gt;Second was the usage of node.js app with express, express-graphql, graphiql, graphql and other popular modules to transpile ES6 code. In this playground, the building part started. Various types were used: GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLInt, GraphQLNonNull, GraphQLList, etc. That was my first time to actually write something working out of the &lt;a href=&#34;https://learngraphql.com/&#34;&gt;learngraphql.com&lt;/a&gt; online tutorials.&lt;/p&gt;

&lt;p&gt;There was a demo of Relay in-between, as a bonus, to grab a general understanding of the additional features provided on top of the fundamental specification.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*tpPTqCyZnfPqhb1er6ECpw.jpeg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After the GraphQL implementation in JavaScript was getting convenient, then we continued using the same concepts, but to build a server in PHP and the &lt;a href=&#34;https://www.drupal.org/project/graphql&#34;&gt;Drupal GraphQL module&lt;/a&gt;. Sure enough, the approach was similar, but this time extending SchemaProviderBase and implementing framework-specific EntityTypeManager (&lt;a href=&#34;https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Entity%21EntityTypeManagerInterface.php/interface/EntityTypeManagerInterface/8.2.x&#34;&gt;Interface&lt;/a&gt;) to manage &lt;a href=&#34;https://www.drupal.org/node/2192175&#34;&gt;Content Entity&lt;/a&gt; items.&lt;/p&gt;

&lt;h3 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;The event was awesome, the people were great, and the sessions were truly useful. I feel somehow privileged with the opportunity to attend such a good series of sessions related to API-s in the Drupal community!&lt;/p&gt;

&lt;p&gt;There are a lot of new technologies and tools to learn and play with. I hope the summary above is a good starter for anyone enthusiastic about the future of the tools mentioned.&lt;/p&gt;

&lt;h3 id=&#34;community&#34;&gt;Community&lt;/h3&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;End of the first day at &lt;a href=&#34;https://twitter.com/drupalaton&#34;&gt;@drupalaton&lt;/a&gt; we have a great dinner. &lt;a href=&#34;https://t.co/CN795wXixz&#34;&gt;pic.twitter.com/CN795wXixz&lt;/a&gt;&lt;/p&gt;&amp;mdash; 5NET Interactive (@5NEThu) &lt;a href=&#34;https://twitter.com/5NEThu/status/763818240954998789&#34;&gt;August 11, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Many thanks to the local Drupal community in Hungary!&amp;nbsp;:)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>