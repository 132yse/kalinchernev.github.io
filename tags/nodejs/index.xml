<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nodejs on Kalin Chernev</title>
    <link>https://kalinchernev.github.io/tags/nodejs/index.xml</link>
    <description>Recent content in Nodejs on Kalin Chernev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>All rights reserved - 2017</copyright>
    <atom:link href="https://kalinchernev.github.io/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Prototyping APIs with Open API Specification and Node.js</title>
      <link>https://kalinchernev.github.io/prototyping-apis-open-api-specification/</link>
      <pubDate>Fri, 10 Mar 2017 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/prototyping-apis-open-api-specification/</guid>
      <description>

&lt;p&gt;A story about using Node.js community-built tools effectively in order to speed up the prototyping phase of your API project. In the whole article, &lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification&#34;&gt;Open API specification&lt;/a&gt; (which recently reached a RC on version 3) refers to version 2, also known as &lt;a href=&#34;http://swagger.io/&#34;&gt;Swagger specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article I‚Äôll briefly demonstrate how you can to make use of few community-driven tools which I came across recently and I definitely recommend: &lt;a href=&#34;https://medium.com/@typicode&#34;&gt;Typicode&lt;/a&gt;‚Äôs &lt;a href=&#34;https://github.com/typicode/json-server&#34;&gt;json-server&lt;/a&gt; and &lt;a href=&#34;https://medium.com/@Rebilly&#34;&gt;Rebilly&lt;/a&gt;‚Äôs &lt;a href=&#34;https://github.com/Rebilly/generator-openapi-repo&#34;&gt;Open API generator&lt;/a&gt;. By using a combination of them, you can quickly achieve a mock API server with really nice and useful documentation based in short deadlines.&lt;/p&gt;

&lt;h3 id=&#34;the-open-api-generator-http-generator-openapi-repo-specification-is-first&#34;&gt;The &lt;a href=&#34;http://generator-openapi-repo&#34;&gt;Open API generator&lt;/a&gt;: specification is¬†first&lt;/h3&gt;

&lt;p&gt;I think it‚Äôs better to start with the specification as it answers many questions, even before making any real or fake data for the API.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/Rebilly/generator-openapi-repo/blob/master/README.md&#34;&gt;official documentation&lt;/a&gt; is sufficient to get started. There‚Äôs really no need for detailed tutorial here on how to use the tool in order to make a working project‚Ää‚Äî‚Ääjust follow the steps. (And maybe push an empty commit on the &lt;code&gt;gh-pages&lt;/code&gt; branch before first deploy just to make sure)&lt;/p&gt;

&lt;p&gt;More importantly, you have to know why this generator is good and why I recommend it üòå&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It works with &lt;a href=&#34;http://swagger.io/swagger-editor/&#34;&gt;&lt;strong&gt;swagger editor&lt;/strong&gt;&lt;/a&gt; out of the box, which feels like having a back-end for building your specification and documentation&lt;/li&gt;
&lt;li&gt;Your specification (aka swagger spec) can be split into several files, which makes the project more manageable and mainteanable&lt;/li&gt;
&lt;li&gt;Sleek documentation with &lt;a href=&#34;http://swagger.io/redoc-openapi-powered-documentation/&#34;&gt;&lt;strong&gt;ReDoc&lt;/strong&gt;&lt;/a&gt; (though &lt;a href=&#34;http://swagger.io/swagger-ui/&#34;&gt;swagger-ui&lt;/a&gt; is also generated) I think ReDoc is excellent in following the API documentation trends.&lt;/li&gt;
&lt;li&gt;The results of your work can easily be deployed to &lt;a href=&#34;https://pages.github.com/&#34;&gt;&lt;strong&gt;github pages&lt;/strong&gt;&lt;/a&gt;. It‚Äôs possible to make requests from here to external API server like the one we‚Äôll have with json-server, as it supports CORS out of the box. Basically, as long as the server can accept requests from your github pages, these server really effectively as living documentation.&lt;/li&gt;
&lt;li&gt;Continuous integration with &lt;strong&gt;Travis&lt;/strong&gt; comes out of the box. Every time you push an update in the specification on the master branch, Travis checks for errors and deploys to github pages if everything is ok.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you follow the steps correctly, you‚Äôll end up with a simplified version of &lt;a href=&#34;https://github.com/Rebilly/RebillyAPI&#34;&gt;RebillyAPI repository&lt;/a&gt;. That‚Äôs the final outcome that‚Äôll motivate you to try the generator now, if you haven‚Äôt already done so üòä&lt;/p&gt;

&lt;p&gt;Probably you might find other similar tools such as &lt;a href=&#34;https://github.com/sourcey/spectacle&#34;&gt;spectacle&lt;/a&gt;, however this tool worked really well for me and it covers everything I think one might need during a prototyping phase of an API project.&lt;/p&gt;

&lt;p&gt;Thus, you have a tool to develop an Open API specification and deploy its documentation to github pages, making it nice and accessible for the public. With this Open API specification, you can later generate server/client code with &lt;a href=&#34;http://swagger.io/swagger-codegen/&#34;&gt;Codegen&lt;/a&gt;, or just deploy the spec to services such as &lt;a href=&#34;https://cloud.google.com/endpoints/docs/open-api-spec&#34;&gt;Cloud Endpoints&lt;/a&gt; or any other that will soon come with similar integration.&lt;/p&gt;

&lt;p&gt;Basically, there are many opportunities available for you when you have the specification. Next step is to generate a server with mock data which matches the specification‚Äôs ‚Äúcontract‚Äù with the documentation or just any front-end app meant to work with the specification.&lt;/p&gt;

&lt;h3 id=&#34;the-json-server-generator-fake-it-till-you-make-it&#34;&gt;The JSON server generator: fake it till you make it&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/typicode/json-server/blob/master/README.md&#34;&gt;JSON server tool&lt;/a&gt; is not really a generator per se, however it‚Äôs easy to integrate it as such in your toolchain. What I mean is, the tool is based on &lt;a href=&#34;http://com&#34;&gt;express.js&lt;/a&gt; and its popular middleware. You won‚Äôt need the express generator as you focus on the server. The endpoints are automatically discovered out of JSON files and you do not need express‚Äô sophisticated templates views, routes, etc.&lt;/p&gt;

&lt;p&gt;A simple &lt;a href=&#34;https://github.com/typicode/json-server/blob/master/README.md#generate-random-data&#34;&gt;function&lt;/a&gt; in a script run by a npm task can easily do for having a generator for the server part. Also, &lt;a href=&#34;https://www.npmjs.com/package/faker&#34;&gt;faker&lt;/a&gt; plays really well with this ‚Äúgenerator‚Äù function. (no word play intended here) &lt;a href=&#34;https://coligo.io/create-mock-rest-api-with-json-server/&#34;&gt;Check an example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main ideas you should understand with JSON server:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It‚Äôs an easy start out of an example or existing JSON files&lt;/li&gt;
&lt;li&gt;It‚Äôs easy to make a generator script to work with the tool&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, another benefit is that the server can be easily deployed. For example, if you decide to deploy on heroku, you‚Äôll only need to update your server to use &lt;code&gt;process.env.IP&lt;/code&gt; and &lt;code&gt;process.env.PORT&lt;/code&gt;. The documentation points to the &lt;a href=&#34;http://jsonplaceholder.typicode.com/&#34;&gt;jsonplaceholder&lt;/a&gt; example, but surely &lt;a href=&#34;http://hook.io/&#34;&gt;hook.io&lt;/a&gt; or a similar cloud service will work just fine. Just keep it simple and working‚Ää‚Äî‚Ääthe main idea of using this tool is to move fast and effectively.&lt;/p&gt;

&lt;p&gt;Another option for generating a server on top of an existing specification is the &lt;a href=&#34;https://www.npmjs.com/package/swagger-server&#34;&gt;swagger-server&lt;/a&gt; package which also integrates with express.js, however does not necessarily provide the ready filters, sorts, etc. that json-server does.&lt;/p&gt;

&lt;h3 id=&#34;additional-ideas&#34;&gt;Additional ideas&lt;/h3&gt;

&lt;p&gt;I personally separated both tools in 2 repositories for the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The mock API server can be managed and deployed independently&lt;/li&gt;
&lt;li&gt;Data from the mock server can be easily fetched from the github pages documentation, as JSON Server comes with CORS enabled by default&lt;/li&gt;
&lt;li&gt;This same mock API server can be just thrown away when the real server comes into place to work with the documentation and/or application&lt;/li&gt;
&lt;li&gt;It‚Äôs also good to have the documentation repository separate to make it easier to manage in a similar way as the server. Good example is how both swagger ui, swagger editor and ReDoc are integrated into a single project focusing on developing specification and documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;further-notes&#34;&gt;Further notes&lt;/h3&gt;

&lt;p&gt;That was a brief article sharing some love about open source projects which deserve an applause for being simple and effective helpers for developers.&lt;/p&gt;

&lt;p&gt;If this article gets any positive feedback, I will make a follow-up story to this one showing few tips to improve the workflow of editing and publishing specification to documentation to a working API.&lt;/p&gt;

&lt;p&gt;At any case, the search of more effective and well-integrated API prototyping, documentation and deployment continues.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reflecting on node.js design patterns</title>
      <link>https://kalinchernev.github.io/reflecting-nodejs-design-patterns/</link>
      <pubDate>Sat, 04 Feb 2017 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/reflecting-nodejs-design-patterns/</guid>
      <description>

&lt;p&gt;Once upon on a time, there was a designer ‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*o-Igk7ZgpSz2Zu4syTG3-A.jpeg&#34; alt=&#34;funny JavaScript image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;No matter if the story is true or not, working with JavaScript on the server with Node.js at the moment is a very different experience compared to working with Python, Ruby or PHP. I‚Äôd personally say that the advantage of working with a single language everywhere comes with the price of having to learn different design patterns in order to use the language effectively.&lt;/p&gt;

&lt;p&gt;One of these fundamental concepts to learn is the asynchronous programming. There are many articles in the Node.js/JavaScript community about asynchronous programming in terms of what callbacks are and how to &lt;a href=&#34;https://www.npmjs.com/package/async&#34;&gt;solve problems of control flow with a library&lt;/a&gt;, a &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;promise&lt;/a&gt;, &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&#34;&gt;async/await&lt;/a&gt;, etc. These are useful when the question is generally:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How to use node modules in a good way?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And although it‚Äôs important to learn and follow best practices in implementation, I sometimes miss articles which answer another question:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How to organize my code in node modules in a good way?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this story I‚Äôll be reflecting on few patterns which answer the latter.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;continuation-passing-style-pattern&#34;&gt;Continuation-passing style pattern&lt;/h3&gt;

&lt;p&gt;This is an easy concept to understand, but really fundamental for working with asynchronous code&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Synopsis&lt;/strong&gt;: In your continuation-passing style function (CPS):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;cb(null, data)&lt;/code&gt; instead of &lt;code&gt;return&lt;/code&gt; to pass on result.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;return cb(err)&lt;/code&gt; to pass on an error and exit the function.&lt;/li&gt;
&lt;li&gt;Communicate one single outcome from the function.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Synchronous
function add(a, b) {
  return a + b;
}

console.log(add(2, 2));

// Asynchronous
function addAsync(a, b, cb) {
  cb(a + b);
}

addAsync(2, 2, function add(result) {
  console.log(result);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That‚Äôs it! Honestly, the first time I saw this type of snippet, I already felt an eye-opening moment. If you know this already, give yourself a tap on the shoulder! Good job!&lt;/p&gt;

&lt;p&gt;For aesthetics, you can re-factor the last function as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;addAsync(2, 2, result =&amp;gt; console.log(result));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of even:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;addAsync(2, 2, console.log);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important take-away here is that functions can be passed as arguments to other functions. These are &lt;strong&gt;functions acting like a return statement&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Node.js, conventions say that when you‚Äôre writing such CPS you must &lt;a href=&#34;https://nodejs.org/api/errors.html#errors_error_propagation_and_interception&#34;&gt;send the error to the first argument&lt;/a&gt; of the callback function.&lt;/p&gt;

&lt;p&gt;Let‚Äôs do something a bit more practical‚Ää‚Äî‚Äädefine a function which takes a list of files. If there are files, just return them, but if no files are supplied, return an error message.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function readFiles (files, cb) {
  if (files.length) {
    cb(null, files)
  } else {
    cb(&#39;no files supplied&#39;)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function will then be consumed in this way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;readFiles(process.argv.slice(2), (err, data) =&amp;gt; {
  if (err) return console.error(err)
  console.log(data)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I highly encourage you to test this if you‚Äôre not sure how it works. If you are lazy to open a terminal session, just fire a &lt;a href=&#34;https://runkit.com/home&#34;&gt;RunKit&lt;/a&gt; and copy-paste these in the browser¬†;)&lt;/p&gt;

&lt;p&gt;Notice the &lt;code&gt;return&lt;/code&gt; is used in the case of an error to exit the function. This pattern is very popular and comes handy for almost any case where the consumer of your module needs to do one single thing and get a result.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;observer-pattern-with-eventemitter&#34;&gt;Observer pattern with EventEmitter&lt;/h3&gt;

&lt;p&gt;Node.js developers use the &lt;a href=&#34;https://nodejs.org/api/events.html#events_emitter_on_eventname_listener&#34;&gt;EventEmitter&lt;/a&gt; interface from day one as it‚Äôs ‚Äúunder the hood‚Äù of almost all node core modules. Especially when we speak about functions which take time to finish.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Synopsis&lt;/strong&gt;: Using the event emitter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You create observable objects with &lt;em&gt;multiple listeners,&lt;/em&gt; where each listener is a callable function, i.e each &lt;em&gt;listener is a possible outcome.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;emitter.emit(eventName[,¬†‚Ä¶args])&lt;/code&gt; instead of &lt;code&gt;cb(null, data)&lt;/code&gt;to pass on a result on listener function.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;emit(&#39;error&#39;, err)&lt;/code&gt; to pass on an error and exit.&lt;/li&gt;
&lt;li&gt;Communicate multiple possible outcomes from your function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The EventEmitter provides a popular &lt;code&gt;on()&lt;/code&gt; method which ‚Äúhooks‚Äù functions on an object. Then, it invokes them synchronously one by one when a given event happens. This approach provides more granularity and control than CPS which gives one outcome per function.&lt;/p&gt;

&lt;p&gt;Let‚Äôs expand our previous function &lt;code&gt;readFiles()&lt;/code&gt; to &lt;code&gt;filterFiles()&lt;/code&gt; in order to provide a way to message all subscriber consumers on the event of finding a file during a search.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kalinchernev/15cbee0731612dc6388c2f0e1cafa6b7.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Then, in order to use this function, we‚Äôll have an implementation like:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kalinchernev/4fb5f5129a202bd14bb9518bcef74244.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;We can also use some sugar to make the same functionality sweeter:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kalinchernev/223e3170b53307b5ca0e3d02afcd93ea.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;If you‚Äôve visited the chapter about the observer patterns in the &lt;a href=&#34;https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented-ebook/dp/B000SEIBB8&#34;&gt;famous design patterns book&lt;/a&gt; you must already see a big difference in the way how you can implement the pattern. I like ‚Äúthe node-way‚Äù better‚Ää‚Äî‚Ääit‚Äôs simpler and you can express same ideas with less code. And honestly, if I were to teach this pattern to web developers, I am sure that I‚Äôd have a better chance of success relating on familiarity of jQuery‚Äôs popular¬†&lt;code&gt;.on()&lt;/code&gt; method, without too much talking about abstractions and interfaces.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;combining-cps-and-observer-patterns&#34;&gt;Combining CPS and Observer patterns&lt;/h3&gt;

&lt;p&gt;Our new function &lt;code&gt;findFiles()&lt;/code&gt; is definitely more flexible than &lt;code&gt;readFiles()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;findFiles()&lt;/code&gt; provides a way for the user to listen to events during the processing of each file, which could give useful control of the processing.&lt;/p&gt;

&lt;p&gt;But what if we want to make it even more flexible, like letting the user choose whether he wants this control or not? What if the user is not actually interested in each file, but wants to get only the final result?&lt;/p&gt;

&lt;p&gt;Well, let‚Äôs make our event emitter function CPS-friendly!&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kalinchernev/985b975fe6591675ce2272b53846b2c8.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This is only a demo implementation which you should not copy-paste into your code without including better checks on the various edge cases of the input, etc. However, the example gives a basic idea on how to make the callback argument optional and use it depending on the scenario.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;I hope that in the end of this article you have some useful high-level ideas about few options you have when designing your node modules. It‚Äôs good to start with the end in mind, imagining how you want your modules to be used. This will help you balance your decisions better between the level of flexibility and easiness of use that you want to provide to your users.&lt;/p&gt;

&lt;p&gt;And remember‚Ää‚Äî‚Ääin most cases your choice of a programming language to use is less important than the way you use the programming language.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>January Digest 2017</title>
      <link>https://kalinchernev.github.io/january-digest-2017/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/january-digest-2017/</guid>
      <description>

&lt;p&gt;I‚Äôve prepared a warm-up digest for those of you who made a resolution to improve their JavaScript skills in 2017, so let‚Äôs get it started!&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;stories&#34;&gt;Stories&lt;/h3&gt;

&lt;p&gt;I published 2 articles this month and I enjoyed writing both of them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://medium.com/@kalin.chernev/problem-first-problem-solving-87369b84551f#.zg5l97itd&#34;&gt;Problem-first problem-solving&lt;/a&gt;‚Ää‚Äî‚Äädon‚Äôt be mislead by the title, it‚Äôs about positive concepts going randomly through my brain.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://restful.io/agile-documentation-for-your-api-driven-project-based-on-open-api-standards-11e54d4326bb#.jaw6kcohk&#34;&gt;Agile documentation for your API-driven project&lt;/a&gt;‚Ää‚Äî‚Ääthis got a tweet from the community few minutes after being published. So, the spread started before I make a tweet about the new publication myself. Nothing makes me happier than that as a writer.&lt;/p&gt;

&lt;p&gt;I got enthusiastic to write this article after release 1.9.0 of &lt;a href=&#34;https://github.com/Surnet/swagger-jsdoc&#34;&gt;swagger-jsdoc&lt;/a&gt; which introduced 2 new features. Both of them being focused on developers‚Äô experience and productivity.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;javascript&#34;&gt;JavaScript&lt;/h3&gt;

&lt;p&gt;It‚Äôs just the beginning of 2017, so let‚Äôs warm up right for it!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nodesource.com/blog/the-21-most-awesome-awesome-lists-for-node-js-developers&#34;&gt;The 21 Most Awesome Awesome Lists for Node.js Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://risingstars2016.js.org/&#34;&gt;2016 rising stars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.mybridge.co/node-js-top-10-articles-of-the-year-v-2017-79df8269d0f3#.naz5q020y&#34;&gt;Node.JS Top 10 Articles of the Year (v.2017)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.risingstack.com/node-js-async-best-practices-avoiding-callback-hell-node-js-at-scale/&#34;&gt;Node.js Async Best Practices &amp;amp; Avoiding Callback Hell‚Ää‚Äî‚ÄäNode.js at Scale&lt;/a&gt;‚Ää‚Äî‚Ääthis article is full of advertisements just as a typical American TV show. It‚Äôs also as good as such because it shows you problems and solutions that you might actually have in your real life.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And one more which is not only about JavaScript but the broader spectrum of front-end development: &lt;a href=&#34;https://www.gitbook.com/book/frontendmasters/front-end-handbook-2017/details&#34;&gt;Front-End Developer Handbook 2017&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;cloud&#34;&gt;Cloud&lt;/h3&gt;

&lt;p&gt;I feel that video gives a useful overview of one of the new hypes: serverless.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Dh_UXXtSvjQ?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;In addition, this feels down-to-earth about production usage:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/c4rvh_Iq6LE?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;In my personal opinion, this ‚Äúserverless‚Äù hype is not a ground-breaking new technology, but a smooth transition towards customer-oriented architectures and services. Containers could be considered as a ground-breaking thing which solve problems in infrastructure management, and they will probably be still the background ‚Äúhidden‚Äù behind serverless.&lt;/p&gt;

&lt;p&gt;When I visualize a transition towards customer-oriented API architectures and services, I imagine services like &lt;a href=&#34;http://swagger.io/go-serverless-with-swaggerhub-and-amazon/&#34;&gt;SwaggerHub&lt;/a&gt; which hide complexity of infrastructure management and let‚Äôs the user focus on building products.&lt;/span&gt; I also imagine that at some point Amazon will be in a position to offer amazing user AND developers experience directly in the cloud when &lt;a href=&#34;http://www.forbes.com/sites/janakirammsv/2016/07/18/the-master-plan-behind-amazons-acquisition-of-cloud9-ide/#6e580c0028db&#34;&gt;Cloud9 comes move integrated&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At some point, AWS (? will¬†?) be the de-facto platform for building cloud applications where the user starts off easily‚Ää‚Äî‚Ääjust clicking here and there and making configurations which integrate what-ever is necessary, where-ever necessary. And when super-specific tweak is necessary, code editor with all &lt;a href=&#34;https://medium.com/@kalin.chernev/debugging-node-js-in-cloud9-ide-59712c043fb2&#34;&gt;debugging capabilities&lt;/a&gt; will be at hand. Thus, covering scenarios from small startup projects that don‚Äôt want to focus on infrastructure, to enterprise which is there because of the fine control over the server side.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;trends&#34;&gt;Trends&lt;/h3&gt;

&lt;p&gt;On a similar note about trends, &lt;a href=&#34;https://www.oracle.com/corporate/acquisitions/apiary/index.html&#34;&gt;Apiary got acquired by Oracle&lt;/a&gt;. Though I‚Äôm not a pro at understanding mergers, it‚Äôs obvious that API economy companies are on success reaping wave. Only few months ago &lt;a href=&#34;http://www.forbes.com/sites/greatspeculations/2016/09/13/heres-why-google-is-acquiring-apigee/#52eceafc693f&#34;&gt;Apigee was in the news in a similar way&lt;/a&gt;, and there is a compelling reason for these trending acquisitions.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;time-saving-tricks&#34;&gt;Time-saving tricks&lt;/h3&gt;

&lt;h4 id=&#34;phpstorm-convert-between-array-syntax&#34;&gt;PHPStorm convert between array syntax&lt;/h4&gt;

&lt;p&gt;Laugh at me, but I still sometimes see &lt;code&gt;array()&lt;/code&gt; syntax during my work (and not &lt;code&gt;[]&lt;/code&gt;) It appeared to be an easy thing to change automatically in the editor.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Code | Inspect Code...&lt;/code&gt;‚Ää‚Äî‚Äärun it on your files. One of the inspections called &lt;strong&gt;&amp;ldquo;Traditional syntax array literal detected&amp;rdquo;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Alternatively just run that specific inspection only via &lt;code&gt;Code | Run Inspection by Name...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Once done, you will see a list with results. Find that particular inspection in results (in case if 1st option was used (all inspections)).&lt;/li&gt;
&lt;li&gt;From there you can apply ‚ÄúFix it‚Äù action on all (or individual) results of that inspection.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*t5kfn0iW_I3uC3mWxA5Ntg.png&#34; alt=&#34;php storm converting array syntax&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Checking the daily ebook by&lt;/strong&gt; &lt;a href=&#34;https://www.packtpub.com/packt/offers/free-learning&#34;&gt;&lt;strong&gt;Packt‚Äôs Free Leaning campaign&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There‚Äôs an option to subscribe for updates via twitter or facebook, which is understandable. This is a good way to have leads and metrics of the campaign. However, it‚Äôs not very practical to open the website and see it every day, thus I made a lazy-logic implementation to be able to check this from the command line like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ node ~/scripts/freeEbook.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There‚Äôs the gist for it (it‚Äôs super-lazy)&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kalinchernev/5f67405d46914897ee8ff95b46b55898.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This script is just the basic concept that can be integrated with internal cron tasks or cloud services to automate the check. For example, I imagine that with some investigation it will be possible to work out an &lt;a href=&#34;https://auth0.com/blog/if-this-then-node-dot-js-extending-ifttt-with-webtask-dot-io/&#34;&gt;integration with IFTTT&lt;/a&gt; or a similar service.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Agile documentation for your API-driven project</title>
      <link>https://kalinchernev.github.io/agile-documentation-api-driven-project/</link>
      <pubDate>Sun, 22 Jan 2017 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/agile-documentation-api-driven-project/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Based on¬†&lt;a href=&#34;https://www.openapis.org/&#34;&gt;Open API standards&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúDocumentation is like sex; when it‚Äôs good, it‚Äôs very, very good, and when it‚Äôs bad, it‚Äôs better than nothing.‚Äù‚Ää‚Äî‚ÄäDick Brandon&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The goal of this article is to inspire improved workflows for building and maintaining documentation for API-driven projects. In the end of the story, you will hopefully try out new approaches of documenting your code. As such, it automatically increases the value of your work through making it more maintainable and re-usable in less time and efforts.&lt;/p&gt;

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://swagger.io/&#34;&gt;Swagger&lt;/a&gt;¬†is one of the most popular and widely adopted specifications for RESTful APIs. In fact, the specification got off so well that¬†&lt;a href=&#34;http://swagger.io/open-source-integrations/&#34;&gt;numerous community tools&lt;/a&gt;¬†are available. Also, the¬†&lt;a href=&#34;https://www.openapis.org/&#34;&gt;Open API initiative&lt;/a&gt;¬†was born as a result of successful projects that use these tools basing on this specification in one way or another.&lt;/p&gt;

&lt;p&gt;With the¬†&lt;a href=&#34;https://www.google.com/trends/explore?q=swagger%20api&#34;&gt;raise of popularity&lt;/a&gt;¬†in 2016, leading experts started sharing advice on as¬†&lt;a href=&#34;https://scotch.io/tutorials/speed-up-your-restful-api-development-in-node-js-with-swagger&#34;&gt;speeding the development phase with Swagger&lt;/a&gt;¬†and later making a¬†&lt;a href=&#34;https://scotch.io/tutorials/document-your-already-existing-apis-with-swagger&#34;&gt;good documentation of an existing API&lt;/a&gt;, again same spec being involved. These are few examples of well-written tutorials demonstrating benefits of having an API and a good toolchain, and documentation around it. There are¬†&lt;a href=&#34;https://egghead.io/courses/build-node-js-apis-with-openapi-spec-swagger&#34;&gt;more&lt;/a&gt;, of course, and I think this trend will stay solid for the next couple of years. That‚Äôs because the Open API specification makes sense just enough to empower developers and business people to have a common language of how an interface should work. It is as a contract of communication and data format between humans and machines.&lt;/p&gt;

&lt;p&gt;In summary, the Swagger specification brings several clear advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We can¬†&lt;a href=&#34;http://editor.swagger.io/#/&#34;&gt;write project specification&lt;/a&gt;¬†in¬†&lt;code&gt;yaml&lt;/code&gt;¬†or¬†
&lt;code&gt;json&lt;/code&gt;¬†formats. The¬†&lt;code&gt;yaml&lt;/code&gt; one is probably closer to humans, which is really nice.
(Yes, there are UI programs for that as well¬†;)&lt;/li&gt;
&lt;li&gt;We can¬†&lt;a href=&#34;http://swagger.io/swagger-codegen/&#34;&gt;generate server and client code automatically&lt;/a&gt;, because when the specification is solid, the tools are solid too.&lt;/li&gt;
&lt;li&gt;We can also¬†&lt;a href=&#34;http://swagger.io/swagger-ui/&#34;&gt;generate live documentation&lt;/a&gt;¬†based on the same project specification. This is particularly useful and that‚Äôs why I‚Äôll expand more on about this subject in this article.&lt;/li&gt;
&lt;li&gt;We can program in many languages and the result of our work will stay alive longer, because it conforms to a server &amp;lt;-&amp;gt; client ‚Äúcontract‚Äù. Meaning, as long as you can make a swagger specification out of you work, you can move from one technology stack to another.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Node.js is a popular choice for building the server part of applications, but it‚Äôs not the only one. The knowledge you can get from this article is transferable to almost any programming language.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;what-makes-a-good-api-documentation&#34;&gt;What makes a good API documentation&lt;/h3&gt;

&lt;p&gt;Let‚Äôs now expand on the subject of having an effective documentation. There are many ways to document your software (and API), still, there are few major points which you have to cover to make it right. There is a common denominator of what makes one documentation better than another.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*RV0AOyBUcpJ7vS1TuSx2ag.png&#34; alt=&#34;picture telling you to stop the documentation uglyness&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;auto-generation&#34;&gt;Auto-generation&lt;/h4&gt;

&lt;p&gt;I think that is the most important one. Writing documentation should take the least amount of time and efforts, and should minimize the maintenance.&lt;/p&gt;

&lt;p&gt;You have to find a good way to write the least amount of textual explanations for your API, which yields the highest value of practical guidelines for the user of the documentation.&lt;/p&gt;

&lt;h4 id=&#34;include-examples&#34;&gt;Include examples&lt;/h4&gt;

&lt;p&gt;I speak from my personal experience here‚Ää‚Äî‚Ääit‚Äôs really pleasing when the documentation does not make me think too much. My advice: include some sample request objects, or some code samples, etc.&lt;/p&gt;

&lt;p&gt;As a consumer or a developer of the API, I want to have a quick-gratification access to something that I use and it just works directly. Rarely I want to open my¬†&lt;a href=&#34;https://advancedrestclient.com/&#34;&gt;advanced REST client&lt;/a&gt;¬†or¬†&lt;a href=&#34;https://curl.haxx.se/docs/&#34;&gt;curl&lt;/a&gt;¬†while reading API documentation because it takes off my attention and is basically forcing me to get out of the page I‚Äôm reading in order to have ‚Äúthe real feeling‚Äù about how something works.&lt;/p&gt;

&lt;h4 id=&#34;portable&#34;&gt;Portable&lt;/h4&gt;

&lt;p&gt;That is a feature I consider equally important for an effective piece of documentation. This is when the auto-generated code can be either displayed as a page or an embedded window of information. It also means that the result of your documentation is re-usable.&lt;/p&gt;

&lt;p&gt;If you are a JavaScript developer reading this, you will know that how fascinating the number of possible view frameworks solutions are. One day we have to make a simple page with Bootstrap, then with React.js, Angular.js, Vue.js, etc. No matter the framework or the tool, integrating documentation in an app has to be as easy as an instantiation. (In order to keep the spirit of high productivity and low maintenance costs mentioned in one of the previous points)&lt;/p&gt;

&lt;h4 id=&#34;swagger-ui-comes-to-the-rescue&#34;&gt;Swagger UI comes to the rescue&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*dt246jpThKkFh7TPUva-9A.png&#34; alt=&#34;image of the swagger ui taken as an example&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Swagger UI is a widely-adopted solution to the problems above. The only drawback being that the markup generated by the tool is not¬†&lt;a href=&#34;http://getbem.com/introduction/&#34;&gt;BEM&lt;/a&gt;-ish or anything like this, thus preventing front-end developers to make really nice themes on top of the solution. (although it‚Äôs¬†&lt;a href=&#34;http://meostrander.com/swagger-ui-themes/&#34;&gt;partially going on&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;When you look at the¬†&lt;a href=&#34;http://petstore.swagger.io/#/&#34;&gt;demo&lt;/a&gt;¬†(or the editor), you will notice that there are similarities in the information presented.&lt;/p&gt;

&lt;p&gt;Each endpoint of the API that is documented contains:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Short description (the textual explanation we usually over-do)&lt;/li&gt;
&lt;li&gt;Example samples of request bodies, options to change request types, etc.&lt;/li&gt;
&lt;li&gt;Opportunity to try out the request &amp;lt;-&amp;gt; response operation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On top of that, swagger-ui documentation is auto-generated based on a simple¬†&lt;code&gt;yaml&lt;/code&gt;¬†or
&lt;code&gt;json&lt;/code&gt;¬†swagger specification file. That is super-nice, because the specification that a business person writes or configures through an UI can serve as both a contract AND live documentation!&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;we-can-do-better-than-that&#34;&gt;We can do better than that&lt;/h3&gt;

&lt;p&gt;Yes! Even after following popular tools and tutorials, I felt there is room for improvement. Mainly‚Ää‚Äî‚Ääwriting the documentation itself.&lt;/p&gt;

&lt;p&gt;See, the problem of writing a single specification file and then using tools to generate the documentation is easy until the maintenance comes into play. Imagine that the¬†&lt;/p&gt;

&lt;p&gt;yaml¬†spec is maintained by the same developer or development team that is responsible for the API endpoints of the app server. Surely, there will be back and forth between the specification file and the code files that contain the actual implementation. It takes extra time and efforts to stay focused while jumping between editors and making sure that both resources are well-matched.&lt;/p&gt;

&lt;p&gt;In my opinion, the process of ‚Äúspecification &amp;gt; development &amp;gt; documentation &amp;gt; implementation‚Äù can improve. Namely, it is possible to do all them at once.&lt;/p&gt;

&lt;p&gt;How? By writing swagger specification in the documentation blocks of our code and plugging watch tasks in-between! Yes, the specification might still be in ownership of another one, not the developer. But even then‚Ää‚Äî‚Ääwhat if can just see live documentation based on the comments we‚Äôre placing in our code? Wouldn‚Äôt it be a motivating factor to write better in-code documentation? What is more, wouldn‚Äôt it be easier for developers to maintain both the code and the documentation of endpoints where the two are just next to each other?&lt;/p&gt;

&lt;p&gt;Look at the following piece of code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**
 * @swagger
 * /login:
 *   post:
 *     description: Login to the application
 *     produces:
 *       - application/json
 *     parameters:
 *       - name: username
 *         description: Username to use for login.
 *         in: formData
 *         required: true
 *         type: string
 *       - name: password
 *         description: User&#39;s password.
 *         in: formData
 *         required: true
 *         type: string
 *     responses:
 *       200:
 *         description: login
 */
app.post(&#39;/login&#39;, (req, res) =&amp;gt; {
  ...
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you might have already guessed, this is a sample from¬†&lt;a href=&#34;https://github.com/Surnet/swagger-jsdoc&#34;&gt;swagger-jsdoc&lt;/a&gt;which takes the contents of the text after¬†
&lt;code&gt;@swagger&lt;/code&gt;¬†and parses the contents of the¬†&lt;a href=&#34;http://usejsdoc.org/&#34;&gt;jsdoc&lt;/a&gt;¬†documentation into a¬†&lt;a href=&#34;http://swagger.io/specification/&#34;&gt;swagger specification&lt;/a&gt;. This specification can be then visualized, for example, like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*K0swMwFEVHWqtcXnkxf0zg.png&#34; alt=&#34;nice swagger picture&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It‚Äôs true that I made the screenshot from the built of the example, not from this tiny sample, but you get the point¬†;) (Continue reading and you will see much nicer interface of the same info)&lt;/p&gt;

&lt;p&gt;Since I‚Äôm looking to improve this workflow even further (and make it more fun for developers to use the tool), I recently suggested a watch task in¬†&lt;code&gt;swagger-jsdoc&lt;/code&gt;¬†command line tool that works just like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ swagger-jsdoc -d swaggerDefinition.js routes.js routes2.js -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, after having a generated¬†&lt;code&gt;swagger.json&lt;/code&gt;¬†the command line will continue listening for changes in¬†&lt;code&gt;routes.js&lt;/code&gt;¬†and¬†&lt;code&gt;routes2.js&lt;/code&gt;¬†and then re-generate the specification¬†&lt;code&gt;swagger.json&lt;/code&gt;¬†on updates.&lt;/p&gt;

&lt;p&gt;Also recently, the command line tool got a new feature to output¬†&lt;code&gt;yaml&lt;/code&gt;¬†if the¬†&lt;code&gt;-o&lt;/code&gt;¬†flag is used like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ swagger-jsdoc -d swaggerDefinition.js apis.js -o swagger.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case,¬†&lt;code&gt;apis.js&lt;/code&gt;¬†will be searched for¬†&lt;code&gt;@swagger&lt;/code&gt;¬†tags, but the parsed specification will be written to¬†&lt;code&gt;swagger.yaml&lt;/code&gt;¬†file.&lt;/p&gt;

&lt;p&gt;Having the¬†&lt;code&gt;swagger.json&lt;/code&gt;¬†or¬†&lt;code&gt;swagger.yaml&lt;/code&gt;¬†specification at this moment is a nice start. This file is the key re-usable resource that can be integrated with other tools such as &lt;code&gt;swagger-ui&lt;/code&gt; which visualize the ‚Äúsoul‚Äù of the API in nice UI interfaces.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;improved-api-documentation-workflow&#34;&gt;Improved API documentation workflow&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/images/swagger-jsdoc-improves-documentation-workflow.png&#34; alt=&#34;Improved documentation workflow with swagger-jsdoc&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Some time ago, an article about &lt;a href=&#34;https://javascriptkicks.com/stories/94009/watching-file-changes-with-npm-scripts&#34;&gt;watching files changes with npm scripts got popular&lt;/a&gt;. I believe there is a reason why comments are not possible under the original article, but never mind, it got me on the path of researching the &lt;a href=&#34;https://nodejs.org/docs/latest/api/fs.html#fs_fs_watch_filename_options_listener&#34;&gt;fs.watch()&lt;/a&gt; and its behavior. After experimentation I reached to prefer &lt;a href=&#34;https://www.npmjs.com/package/chokidar&#34;&gt;&lt;code&gt;chokidar&lt;/code&gt;&lt;/a&gt; which is a module improving the &lt;code&gt;fs.watch()&lt;/code&gt; interface. In fact, I liked &lt;code&gt;chokidar&lt;/code&gt; so much that I took the opportunity to suggest a &lt;a href=&#34;https://github.com/Surnet/swagger-jsdoc/releases/tag/v1.9.0&#34;&gt;new feature in the CLI tool of&lt;/a&gt; &lt;a href=&#34;https://github.com/Surnet/swagger-jsdoc/releases/tag/v1.9.0&#34;&gt;&lt;code&gt;swagger-jsdoc&lt;/code&gt;&lt;/a&gt; which is, duh, a watch task working with the API files. (Briefly mentioned in the previous chapter)&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;chokidar&lt;/code&gt; module is also an integral part of the &lt;a href=&#34;https://www.npmjs.com/package/browser-sync&#34;&gt;&lt;code&gt;browser-sync&lt;/code&gt;&lt;/a&gt; module which, in turn, an already mature and battle-tested piece of software. It is widely adopted in various products and projects to increase development experience and productivity.&lt;/p&gt;

&lt;p&gt;Having this understanding, I saw another opportunity‚Ää‚Äî‚Äämaking a simple integration between instruments which integrate the &lt;code&gt;chokidar&lt;/code&gt; module. I only needed a better understanding of &lt;a href=&#34;http://swagger.io/swagger-ui/&#34;&gt;Swagger UI&lt;/a&gt; which is the ‚Äúglue‚Äù, or the ‚Äúcontract‚Äù, between the back-end server side (the API) and the front-end (client) side. I feel it‚Äôs comfortable (and smart) that the documentation pages are the first-hand client and consumer of the API. Also, I believe that this consumer should be easy to make and maintain, but still really nice-looking, so that there is something pleasant for our paying clients to see. With &lt;code&gt;browser-sync&lt;/code&gt; Swagger UI got a bit more fun to work with.&lt;/p&gt;

&lt;p&gt;In order to demonstrate the idea better in visual and kinesthetic way, I created a &lt;a href=&#34;https://github.com/kalinchernev/agile-open-api-docs&#34;&gt;supplementary repository&lt;/a&gt;. It contains examples of the first approach that came to my mind keeping &lt;a href=&#34;https://en.wikipedia.org/wiki/KISS_principle&#34;&gt;the KISS principle&lt;/a&gt;. Basically, there are few npm scripts that make the system work together.&lt;/p&gt;

&lt;p&gt;First, you can have a look at &lt;a href=&#34;https://github.com/kalinchernev/agile-open-api-docs/blob/master/package.json&#34;&gt;the&lt;/a&gt; &lt;a href=&#34;https://github.com/kalinchernev/agile-open-api-docs/blob/master/package.json&#34;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kalinchernev/agile-open-api-docs/blob/master/package.json&#34;&gt;manifest&lt;/a&gt;. Tasks are separated in two main categories: tasks for the server side (the API) and tasks related to the documentation. For the API development part, &lt;code&gt;npm run api&lt;/code&gt; fires a server with &lt;code&gt;nodemon&lt;/code&gt; and &lt;code&gt;swagger-jsdoc&lt;/code&gt; As a result, any changes in the &lt;code&gt;api/&lt;/code&gt; folder trigger server restart and re-generation of &lt;code&gt;swagger.json&lt;/code&gt; specification which goes to &lt;code&gt;api-docs/&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Secondly, the &lt;code&gt;npm run docs:develop&lt;/code&gt; task fires a &lt;code&gt;browser-sync&lt;/code&gt; server for the client side serving the &lt;code&gt;api-docs/&lt;/code&gt; folder which receives automatically updated &lt;code&gt;swagger.json&lt;/code&gt; specification from the previous task. You can run those two tasks in separate terminal sessions or just create another parallel task following the examples of the &lt;code&gt;package.json&lt;/code&gt; file with &lt;code&gt;npm-run-all&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At this stage, you can freely update both the server and client sides of your project having near real-time feedback and results visible in the browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*6bMTxVkYaUEEjyqpeiXBRA.png&#34; alt=&#34;Nice interface of the generated documentation&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You might be wondering‚Ää‚Äî‚Ääwhy isn‚Äôt this the interface of Swagger UI I am used to seeing around! What happened? Well, I used a &lt;a href=&#34;https://github.com/jensoleg/swagger-ui&#34;&gt;fork which looks nicer&lt;/a&gt;. Here‚Äôs an &lt;a href=&#34;http://swaggerui.herokuapp.com/?url=http://petstore.swagger.io/v2/swagger.json#!/pet/addPet&#34;&gt;online demo&lt;/a&gt; which you can play with to get the feeling of what your documentation may look like after you enjoyably use &lt;code&gt;swagger-jsdoc&lt;/code&gt; and &lt;code&gt;browser-sync&lt;/code&gt; as shown in &lt;a href=&#34;https://github.com/kalinchernev/agile-open-api-docs/blob/master/package.json&#34;&gt;this repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The same workflow is possible with other file extensions such as¬†&lt;code&gt;.php&lt;/code&gt; just changing the input parameters and removing the binding to the &lt;code&gt;nodemon&lt;/code&gt; server restart task, so that another standalone server is used instead. Here‚Äôs an example taken from a recent pull request which was included in &lt;code&gt;swagger-jsdoc&lt;/code&gt; to parse swagger documentation to &lt;code&gt;yaml&lt;/code&gt; output.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*W72Xll_3kHjiCtNkb7U3qg.png&#34; alt=&#34;swagger-jsdoc with php projects&#34; /&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;deployment&#34;&gt;Deployment&lt;/h3&gt;

&lt;p&gt;I have intentionally left out the deployment part out of this story, because I believe there are many good options on the market and it really depends on the personal preferences how to manage this part of the process. For example, you can follow the scotch.io tutorial mentioned earlier to place the docs on heroku, or you can also include an npm script which works with &lt;a href=&#34;https://github.com/tschaub/gh-pages&#34;&gt;&lt;code&gt;gh-pages&lt;/code&gt;&lt;/a&gt; to deploy the assets directly to your repository, etc. The main thing is that the &lt;code&gt;api-docs&lt;/code&gt; folder is already built and ready to be deployed as-is.&lt;/p&gt;

&lt;p&gt;Myself, I plan to experiment with &lt;a href=&#34;https://cloudplatform.googleblog.com/2016/09/manage-your-APIs-with-Google-Cloud-Endpoints.html&#34;&gt;Google Endpoints&lt;/a&gt; in near future although it‚Äôs a new service. That‚Äôs because it supports the &lt;a href=&#34;https://cloud.google.com/endpoints/docs/open-api-spec&#34;&gt;Open API specification&lt;/a&gt; and provides flexible options on deployment for both the API and the documentation on reasonable terms. An interesting point to notice is that the service guidelines show deployment only of the swagger/openapi specification file which can be generated by the &lt;code&gt;swagger-jsdoc&lt;/code&gt; This is a good example of re-using single specification for multiple purposes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*QHvYcf7gyUyIwNlBo-jHTQ.png&#34; alt=&#34;swagger to open api specification transition&#34; /&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;Writing this article and sharing some code around it, I‚Äôm integrating tools that solve problems which have already been under the radar of the &lt;a href=&#34;https://medium.com/@apievangelist&#34;&gt;API Evangelist&lt;/a&gt; such as &lt;a href=&#34;https://apievangelist.com/2015/02/02/we-need-better-api-documentation-and-ui-deployment-options/&#34;&gt;the need of better API documentation and UI deployment&lt;/a&gt; which was later followed up by findings about &lt;a href=&#34;https://apievangelist.com/2015/06/27/the-responsive-swagger-driven-version-of-slate-api-documentation-i-was-looking-for/&#34;&gt;improved Swagger UI design solution&lt;/a&gt;. Few months ago, there was also a &lt;a href=&#34;https://apievangelist.com/2016/09/16/learning-from-the-success-of-swagger-ui/&#34;&gt;reflection article about the success of Swagger UI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope that this article has inspired you to consider some new ways to improve your documentation workflows for your API project. I know that the idea of automated documentation generation with swagger tools is not new. Rather, I aim to introduce some new ideas on solving the problems which have been around on topic for a while with the tools available today to improve productivity.&lt;/p&gt;

&lt;p&gt;The tools shown in &lt;a href=&#34;https://github.com/kalinchernev/agile-open-api-docs&#34;&gt;the repository&lt;/a&gt; are free and vendor-neutral and the documentation build can be deployed to any place which serves you best. So, I encourage you to further experiment with the code and adapt it to work best for your specific needs.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you think this article was helpful, then consider making a comment, a share or a ‚ù§&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a node.js client for the EU Open Data Portal</title>
      <link>https://kalinchernev.github.io/eu-data-portal-nodejs-client/</link>
      <pubDate>Sun, 02 Oct 2016 12:10:11 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/eu-data-portal-nodejs-client/</guid>
      <description>

&lt;p&gt;Planning to make an open data GraphQL server, it was natural to first build a small abstraction wrapper which can be re-used in other projects. Basically, the &lt;a href=&#34;https://www.npmjs.com/package/odp&#34;&gt;odp library&lt;/a&gt; I&amp;rsquo;m going to talk about is just a simplified client for fetching data from the EU Open Data Portal.&lt;/p&gt;

&lt;h3 id=&#34;getting-the-library&#34;&gt;Getting the library&lt;/h3&gt;

&lt;p&gt;When you have &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;node.js&lt;/a&gt;, the module can be installed by npm:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install odp
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;library-api&#34;&gt;Library API&lt;/h3&gt;

&lt;p&gt;The API of the module is pretty simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Get a range of the whole list of datasets:
odp.getDatasets({query: {limit: 100, offset: 1}}).then((data) =&amp;gt; {
  console.log(data);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Currently, there are 4 methods which match the brief information from the &lt;a href=&#34;https://data.europa.eu/euodp/en/developerscorner&#34;&gt;developers&amp;rsquo; corner&lt;/a&gt;. Methods are: &lt;code&gt;getDatasets()&lt;/code&gt;, &lt;code&gt;getTags()&lt;/code&gt;, &lt;code&gt;getDataset()&lt;/code&gt; and &lt;code&gt;datasetSearch()&lt;/code&gt;. It could be that there are more options than that in the API, but these are all I know so far as user of the website.&lt;/p&gt;

&lt;p&gt;An &lt;a href=&#34;https://github.com/kalinchernev/odp/blob/master/README.md#examples&#34;&gt;Examples section&lt;/a&gt; is included in the README file for further details.&lt;/p&gt;

&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;

&lt;p&gt;Suggestions and pull requests are welcome at the &lt;a href=&#34;https://github.com/kalinchernev/odp&#34;&gt;github page of the project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For inspirations of use, more information about the data or introduction training of the benefits of using open data, visit the &lt;a href=&#34;https://www.europeandataportal.eu/&#34;&gt;europeandataportal.eu&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Debugging node.js in Cloud9 IDE</title>
      <link>https://kalinchernev.github.io/debugging-nodejs-in-cloud9-ide/</link>
      <pubDate>Sun, 04 Sep 2016 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/debugging-nodejs-in-cloud9-ide/</guid>
      <description>

&lt;p&gt;In this article I&amp;rsquo;ll be sharing some of my level-up experience learning how to debug node.js apps. It was not easy at first, but once I got it, I felt empowered that now I can work with any code base.&lt;/p&gt;

&lt;p&gt;Debugging is useful for solving vague problems in other people&amp;rsquo;s code and it&amp;rsquo;s also useful for learning how something actually works. The article might be particularly useful for those used to having debugger experience in WebStorm or similar IDEs.&lt;/p&gt;

&lt;h3 id=&#34;quick-reference&#34;&gt;Quick reference&lt;/h3&gt;

&lt;p&gt;That article is meant to be more like a cheat sheet rather than too detailed step by step guide, here&amp;rsquo;s a go-to list of techniques:&lt;/p&gt;

&lt;h3 id=&#34;node-debugger&#34;&gt;Node debugger&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s start by the basics‚Ää‚Äî‚Ääusing the &lt;a href=&#34;https://nodejs.org/api/debugger.html&#34;&gt;node&amp;rsquo;s native debugger&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, &lt;a href=&#34;https://github.com/Surnet/swagger-jsdoc/blob/master/example/app.js&#34;&gt;this app&lt;/a&gt; contains a simple server returning a JSON object which is a &lt;a href=&#34;https://www.google.be/url?sa=t&amp;amp;amp;rct=j&amp;amp;amp;q=&amp;amp;amp;esrc=s&amp;amp;amp;source=web&amp;amp;amp;cd=1&amp;amp;amp;cad=rja&amp;amp;amp;uact=8&amp;amp;amp;ved=0ahUKEwiG4Pi0qfbOAhUEOhQKHaQICOAQFggcMAA&amp;amp;amp;url=http%3A%2F%2Fswagger.io%2Fspecification%2F&amp;amp;amp;usg=AFQjCNH_jZB7rkJVVCg-JHFmeLAHwMnUfw&amp;amp;amp;sig2=R2rG7_9EH1ctFeFwtJ7cPw&amp;amp;amp;bvm=bv.131783435,d.d24&#34;&gt;swagger specification&lt;/a&gt; and I need to debug and see its value. So, in this example, I&amp;rsquo;ll follow this steps to see the contents of the variable:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set a break point with &lt;code&gt;debugger&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run the script with &lt;code&gt;node debug example/app.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Work with the controls of the debugger to reach a good value: &lt;code&gt;c&lt;/code&gt; to continue and &lt;code&gt;n&lt;/code&gt; for next&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;repl&lt;/code&gt; to execute some code which access current state of the system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*CHRmYU912yZDRmqz7Z490w.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;simple-script&#34;&gt;Simple script&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add a break point&lt;/li&gt;
&lt;li&gt;Press the Run button to execute the default node runner (ensure the debugger is enabled‚Ää‚Äî‚Ää&lt;a href=&#34;https://docs.c9.io/docs/debugging-your-code&#34;&gt;more info&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*I-mVNLptBFDG-EaJpLR6rQ.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;mocha-tests&#34;&gt;Mocha tests&lt;/h3&gt;

&lt;p&gt;This is an &lt;a href=&#34;https://docs.c9.io/docs/experimental-features&#34;&gt;experimental feature&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*-8oDjYBTEU4-G8H5_vw5lg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enable &amp;lsquo;Tests&amp;rdquo; from the editor settings&lt;/li&gt;
&lt;li&gt;Refresh the page and see the panel&lt;/li&gt;
&lt;li&gt;Put a break point in the test&lt;/li&gt;
&lt;li&gt;Enable debugging in the &amp;ldquo;Test&amp;rdquo; panel&lt;/li&gt;
&lt;li&gt;Run the test suite or scenario&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This feature actually worked for me, I felt just the same way when I made my first &lt;a href=&#34;http://mortalkombat.wikia.com/wiki/Animality&#34;&gt;animality in MK3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*OHINaf_jcvN75EN1M0ozlQ.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;command-line-apps&#34;&gt;Command-line apps&lt;/h3&gt;

&lt;p&gt;In fact it&amp;rsquo;s almost identical to debugging a simple script, the only detail you have to notice is an input box where you put the actual command as if ran in the command line.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open the command-line app and place a break point&lt;/li&gt;
&lt;li&gt;Use the Run menu to start the process in debug more&lt;/li&gt;
&lt;li&gt;Change the input process name and restart the runner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*V9xHSnqzwCasqzHiHyBD5Q.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;feedback-is-nbsp-welcome&#34;&gt;Feedback is&amp;nbsp;welcome&lt;/h3&gt;

&lt;p&gt;Use the comments below to share your techniques and opinions.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>