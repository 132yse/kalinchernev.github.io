<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kalin Chernev</title>
    <link>https://kalinchernev.github.io/index.xml</link>
    <description>Recent content on Kalin Chernev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>All rights reserved - 2017</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://kalinchernev.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Test-Driven Development for AWS Lambda functions with the Serverless framework and Jest</title>
      <link>https://kalinchernev.github.io/tdd-serverless-jest/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kalinchernev.github.io/tdd-serverless-jest/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://serverless.com/&#34;&gt;serverless framework&lt;/a&gt; makes it easy to develop and deploy cloud functions. In this article I&amp;rsquo;ll cover the &lt;a href=&#34;https://serverless.com/framework/docs/providers/aws/&#34;&gt;AWS&lt;/a&gt; provider of the framework, although the principles should be very similar for the other providers, especially given the fact the serverless team works hard for a truly multi-provider framework.&lt;/p&gt;

&lt;p&gt;There is a good document with guidelines for &lt;a href=&#34;https://serverless.com/framework/docs/providers/aws/guide/testing/&#34;&gt;writing tests in serverless&lt;/a&gt; already. Also, there is another &lt;a href=&#34;https://serverless.com/blog/tdd-serverless/&#34;&gt;blog post about the basics&lt;/a&gt;. However, currently there&amp;rsquo;s no much information on using &lt;a href=&#34;https://facebook.github.io/jest/&#34;&gt;Jest&lt;/a&gt; which is trending in the community.&lt;/p&gt;

&lt;p&gt;By the end of this article, you will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;have a working development environment with modern JavaScript (ES2005 and up)&lt;/li&gt;
&lt;li&gt;be able to use Jest effectively&lt;/li&gt;
&lt;li&gt;know how to test your library code - the helpers used by lambda functions&lt;/li&gt;
&lt;li&gt;be able to test lambda functions without killing yourself with abstractions&lt;/li&gt;
&lt;li&gt;learn how to use test doubles for AWS services&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;project-setup&#34;&gt;Project setup&lt;/h2&gt;

&lt;p&gt;Before going into the testing framework and the details about the testing itself, it&amp;rsquo;s worth spending some time configuring your environment so that you work effectively.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a high-level overview of the file structure for the tutorial:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├── config.example.json --&amp;gt; Copy and configure as config.json
├── package.json
├── README.md
├── serverless.yml --&amp;gt; Check if you want to tweak it
├── src --&amp;gt; You store your functions here, 1 file per each
│   └── upload.js --&amp;gt; the lambda function
├── test
│   └── upload.spec.js --&amp;gt; the test for the lambda function
├── webpack.config.js
└── yarn.lock
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The full code for the tutorial can be seen in &lt;a href=&#34;https://github.com/kalinchernev/aws-node-signed-uploads&#34;&gt;this repository&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;tools&#34;&gt;Tools&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s a list of the package used in this tutorial:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;serverless&lt;/code&gt; with &lt;code&gt;webpack&lt;/code&gt; and &lt;code&gt;serverless-webpack&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;babel&lt;/code&gt; with some add-ons, mainly &lt;code&gt;babel-preset-env&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eslint&lt;/code&gt; with more add-ons, and &lt;code&gt;prettier&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aws-sdk&lt;/code&gt; and &lt;code&gt;aws-sdk-mock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jest&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;optimizations&#34;&gt;Optimizations&lt;/h3&gt;

&lt;p&gt;Although this topic is not directly related to writing tests, it&amp;rsquo;s always good to consider any possible optimizations you can have in your stack.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;babel-preset-env&lt;/code&gt; with its &lt;code&gt;babel-*&lt;/code&gt; related packages. By using the &lt;code&gt;env&lt;/code&gt; &lt;a href=&#34;http://babeljs.io/env&#34;&gt;preset&lt;/a&gt; you both gain in less configurations and less amount of code necessary after transpilations for a given target runtime platform. For example, delivering a bundle targeting &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/programming-model.html&#34;&gt;node 6.x&lt;/a&gt; will be lighter than the one for earlier versions, because the runtime supports more features natively.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;serverless-webpack&lt;/code&gt; with its webpack settings can further optimize functions when they are &lt;a href=&#34;https://github.com/serverless-heaven/serverless-webpack#optimization--individual-packaging-per-function&#34;&gt;bundled individually&lt;/a&gt;. Also, a configuration for external resources make the bundled upload lighter, excluding dependencies to &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/current-supported-versions.html&#34;&gt;&lt;code&gt;aws-sdk&lt;/code&gt; already available&lt;/a&gt; on AWS premises.&lt;/p&gt;

&lt;h3 id=&#34;configurations&#34;&gt;Configurations&lt;/h3&gt;

&lt;p&gt;In the example project linked to this article you can have a look at the configurations necessary to have modern JavaScript running with serverless and Jest.&lt;/p&gt;

&lt;h2 id=&#34;jest&#34;&gt;Jest&lt;/h2&gt;

&lt;p&gt;To learn about the test framework, read the official &lt;a href=&#34;https://facebook.github.io/jest/&#34;&gt;documentation site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My high-level impressions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Working with promises is natural.&lt;/li&gt;
&lt;li&gt;There&amp;rsquo;s the watch mode.&lt;/li&gt;
&lt;li&gt;There&amp;rsquo;s also an integrated code coverage reporting.&lt;/li&gt;
&lt;li&gt;Snapshot testing for comparing and asserting differences in structures.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In general, Jest is a full-fledged framework with all necessary features for testing. It&amp;rsquo;s easy to learn and it has good documentation.&lt;/p&gt;

&lt;h2 id=&#34;unit-testing&#34;&gt;Unit testing&lt;/h2&gt;

&lt;p&gt;Organizing code in &lt;a href=&#34;https://claudiajs.com/tutorials/designing-testable-lambdas.html&#34;&gt;testable chunks&lt;/a&gt; is the the most challenging and important step before anything else.&lt;/p&gt;

&lt;p&gt;In the context of lambda functions and the serverless framework, unit testing is useful for covering mainly 2 types of code: library (helper) functions and the lambda functions in a given service. If you&amp;rsquo;re using the serverless framework only with &lt;code&gt;serverless.yml&lt;/code&gt; file in order to make your Cloud Formation templates more manageable, you don&amp;rsquo;t need unit testing. It&amp;rsquo;s only uesful when there is logic in the service.&lt;/p&gt;

&lt;h2 id=&#34;testing-a-library-used-by-a-lambda-function&#34;&gt;Testing a library used by a lambda function&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s imagine that our lambda function signature and beginning is the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export const handler = (event, context, callback) =&amp;gt; {
  const bucket = process.env.BUCKET;
  const region = process.env.REGION;

  ...

}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because we will most probably need to make checks about the input arguments of environment variables several times, we can make a &lt;a href=&#34;https://github.com/kalinchernev/aws-node-signed-uploads/blob/master/src/lib/envVarsChecker.js&#34;&gt;simple helper&lt;/a&gt; which takes an object of the &lt;code&gt;process.env&lt;/code&gt; and returns a list of required keys for the function to work.&lt;/p&gt;

&lt;p&gt;This scenario is easy, we can assert for various of useful edge cases like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
import checker from &#39;../../src/lib/envVarsChecker&#39;;

describe(`Utility library envVarsChecker`, () =&amp;gt; {
  test(`The helper exists`, () =&amp;gt; {
    expect(checker).toBeTruthy();
  });

  test(`Asks for both BUCKET and REGION environment variables`, () =&amp;gt; {
    const input = {};
    const result = checker(input);
    expect(result).toEqual([&#39;BUCKET&#39;, &#39;REGION&#39;]);
  });

  test(`Asks for a missing BUCKET environment variables`, () =&amp;gt; {
    const input = {
      REGION: &#39;foo&#39;,
    };
    const result = checker(input);
    expect(result).toEqual([&#39;BUCKET&#39;]);
  });

  test(`Asks for a missing REGION environment variables`, () =&amp;gt; {
    const input = {
      BUCKET: &#39;foo&#39;,
    };
    const result = checker(input);
    expect(result).toEqual([&#39;REGION&#39;]);
  });
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When functions are simple, but yet reusable for several lambda functions, we can test these helpers in a conventional way.&lt;/p&gt;

&lt;h2 id=&#34;testing-a-lambda-function&#34;&gt;Testing a lambda function&lt;/h2&gt;

&lt;p&gt;The lambda functions can be considered as a more complex piece of code to test.&lt;/p&gt;

&lt;p&gt;Initially, I started by spawning processes and running the serverless CLI and asserting for results. This didn&amp;rsquo;t work efficiently because every unresolved promise in the serverless framework abstraction is impossible to handle in a convenient way in the test suite.&lt;/p&gt;

&lt;p&gt;Since the original process of the lambda function was not easy to get done with, I also tried the &lt;code&gt;serverless-jest-plugin&lt;/code&gt; which was mentioned in the beginners article about TDD in serverless. As I already knew it&amp;rsquo;s ineffective to test against cli processes, I used the plugin programmatically to wrap the original lambda functions invocation. This also didn&amp;rsquo;t work well enough.&lt;/p&gt;

&lt;p&gt;In the end of a long day I finally decided to treat lambda functions as normal functions and just wrap them in promises in order to make them more convenient for the Jest runner.&lt;/p&gt;

&lt;p&gt;Like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
import { promisify } from &amp;quot;util&amp;quot;;
import lambda from &amp;quot;../src/upload&amp;quot;;
const handler = promisify(lambda);

describe(`Service aws-node-singned-uploads`, () =&amp;gt; {
  test(`Require environment variables`, () =&amp;gt; {
    const event = {};
    const context = {};

    const result = handler(event, context);
    result
      .then(data =&amp;gt; {
        expect(data).toBeFalsy();
      })
      .catch(e =&amp;gt; {
        expect(e).toBe(
          `Missing required environment variables: BUCKET, REGION`
        );
      });
  });
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This approach does the job ok and keeps things relatively simple. It handles the lambda handler as a normal exported function which takes the arguments as described in the official signature of the function, and wraps it all in a promise, for Jest.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://facebook.github.io/jest/docs/en/asynchronous.html#resolves-rejects&#34;&gt;syntax of promise assertions&lt;/a&gt; can be prettier, by the way.&lt;/p&gt;

&lt;h2 id=&#34;mocking-aws-services&#34;&gt;Mocking AWS services&lt;/h2&gt;

&lt;p&gt;Testing lambda functions with the assumption that they are just functions can take you long way if the logic inside these functions is relatively simple. However, the real reason for lambda functions to be, is that they are the glue between AWS services.&lt;/p&gt;

&lt;p&gt;So, sooner or later you will have to find a way to mock AWS services in your tests :)&lt;/p&gt;

&lt;p&gt;For us, the &lt;code&gt;aws-sdk-mock&lt;/code&gt; package works well so far. It supports mocking constructors and nested methods, it can restore originals. &lt;a href=&#34;https://www.npmjs.com/package/aws-sdk-mock&#34;&gt;Documentation&lt;/a&gt; and support seem mature.&lt;/p&gt;

&lt;p&gt;Together with mocking AWS services, we also take &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/eventsources.html&#34;&gt;examples for events from the official AWS documentation&lt;/a&gt;. These can serve as a fast-track to creating stubs for the &lt;code&gt;event&lt;/code&gt; argument of a lambda function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
import AWS from &amp;quot;aws-sdk-mock&amp;quot;;
import { promisify } from &amp;quot;util&amp;quot;;
import lambda from &amp;quot;../src/upload&amp;quot;;
import eventStub from &amp;quot;./stubs/eventHttpApiGateway.json&amp;quot;;

const handler = promisify(lambda);

describe(`Service aws-node-singned-uploads: S3 mock for successful operations`, () =&amp;gt; {
  beforeAll(() =&amp;gt; {
    AWS.mock(&amp;quot;S3&amp;quot;, &amp;quot;getSignedUrl&amp;quot;, (method, _, callback) =&amp;gt; {
      callback(null, {
        data: &amp;quot;https://example.com&amp;quot;
      });
    });
  });

  afterEach(() =&amp;gt; {
    delete process.env.BUCKET;
    delete process.env.REGION;
  });

  afterAll(() =&amp;gt; {
    AWS.restore(&amp;quot;S3&amp;quot;);
  });

  test(`Replies back with a JSON for a signed upload on success`, () =&amp;gt; {
    process.env.BUCKET = &amp;quot;foo&amp;quot;;
    process.env.REGION = &amp;quot;bar&amp;quot;;

    const event = eventStub;
    const context = {};

    const result = handler(event, context);
    expect(result).resolves.toMatchSnapshot();
  });
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the &lt;code&gt;beforeAll&lt;/code&gt; life cycle setups the AWS S3 mock for the &lt;code&gt;getSignedUrl&lt;/code&gt; method. &lt;code&gt;afterEach&lt;/code&gt; environment variables are reset and &lt;code&gt;afterAll&lt;/code&gt; the original S3 service is restored so that it operates to the AWS API after the test suite has finished.&lt;/p&gt;

&lt;h2 id=&#34;snapshot-testing&#34;&gt;Snapshot testing&lt;/h2&gt;

&lt;p&gt;Maybe you&amp;rsquo;ve noticed this line already &lt;code&gt;expect(result).resolves.toMatchSnapshot();&lt;/code&gt;.
This is how you use the Jest snapshot feature:&lt;/p&gt;

&lt;iframe width=&#34;853&#34; height=&#34;480&#34; src=&#34;https://www.youtube.com/embed/HAuXJVI_bUs?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;This feature helps you test structures in a simple way.&lt;/p&gt;

&lt;h3 id=&#34;further-resources&#34;&gt;Further resources&lt;/h3&gt;

&lt;p&gt;This tutorial covers mostly techniques with Jest on making unit tests. As you can see, to an extend we can say that testing lambda functions can be seen as a &lt;a href=&#34;https://read.acloud.guru/testing-and-the-serverless-approach-495cef7495ea&#34;&gt;simple&lt;/a&gt; process.&lt;/p&gt;

&lt;p&gt;However, mocking AWS services can get tricky and there are vocal opinions &lt;a href=&#34;http://theburningmonk.com/2017/02/yubls-road-to-serverless-architecture-part-2/&#34;&gt;against&lt;/a&gt; this practice for a reason.&lt;/p&gt;

&lt;p&gt;More specifically, take the &lt;a href=&#34;https://github.com/kalinchernev/aws-node-signed-uploads&#34;&gt;aws-node-signed-uploads&lt;/a&gt; package as an example. The unit tests and the mocks are showing 100% test coverage for the code which gets executed by Jest and this is really encouraging.&lt;/p&gt;

&lt;p&gt;Do the following for me as an exercise after this tutorial:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clone the repository.&lt;/li&gt;
&lt;li&gt;Install the dependencies.&lt;/li&gt;
&lt;li&gt;Reconfigure the serverless settings.&lt;/li&gt;
&lt;li&gt;Make a deployment to your AWS account.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;yarn start&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will see a server running and waiting for your requests. You can make an example request with &lt;a href=&#34;https://www.getpostman.com/&#34;&gt;Postman&lt;/a&gt; which will show you the same issues as tested in the unit tests :)
And if you manage to get your header key correctly, you&amp;rsquo;ll be even able to upload a large file to an S3 bucket.&lt;/p&gt;

&lt;p&gt;Now make the same test on the deployed service. You will get an error message for access denied because there is a specific configuration on the upload endpoint:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;functions:
  upsert-objects:
    handler: src/upload.handler
    name: ${self:provider.stage}-${self:service}-upload
    memorySize: 128
    events:
      - http:
          path: upload
          method: put
          private: true
          cors: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is &lt;code&gt;private: true&lt;/code&gt;. When deployed on real AWS premises, the endpoint will require an API key in the header, which neither &lt;code&gt;serverless&lt;/code&gt; nor &lt;code&gt;serverless-offline&lt;/code&gt;, nor tests will warn you about.&lt;/p&gt;

&lt;p&gt;Mocking AWS services however, will give you the basic safely net that your lambda functions are handling positive and negative scenarios and invoke the correct callbacks in the correct scenarios.&lt;/p&gt;

&lt;p&gt;Also, using Jest for testing the independent logic and making snapshot make an excellent addition to secure the very vital behaviors of your cloud functions even when working independently from the AWS service.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learn Gatsby.js</title>
      <link>https://kalinchernev.github.io/learn-gatsbyjs/</link>
      <pubDate>Tue, 03 Oct 2017 23:33:31 +0000</pubDate>
      
      <guid>https://kalinchernev.github.io/learn-gatsbyjs/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;“There are those that look at things the way they are, and ask why? I dream of things that never were, and ask why not?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Dedicated to all visionaries who move the Web forward&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this article, I let myself write about various topics before I reach the essence. The story line goes from how and why the MEAN stack got popular, to the JAM stack, Gatsby.js and there are also sprinkled thoughts about JavaScript and React.js.&lt;/p&gt;

&lt;p&gt;I believe it&amp;rsquo;s important to speak about the &lt;strong&gt;why&lt;/strong&gt; and the facts how technologies evolve in time before I speak about the tools themselves. Explaining the historic events and reasoning answer questions like &amp;ldquo;will technology X kill technology Y&amp;rdquo; before they are brought up.&lt;/p&gt;

&lt;p&gt;At any time, you can &lt;a href=&#34;#gatsby-js-https-www-gatsbyjs-org&#34;&gt;jump directly to the practical part&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;fast-forward-story-about-the-web-in-the-last-decade&#34;&gt;Fast-forward story about the Web in the last decade&lt;/h3&gt;

&lt;p&gt;Web, and web development have evolved unimaginatively in the last decade. And much of it came from a closely related market of mobile phones and how its market changed as well. For example, watch this presentation for the first iPhone:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/e7EfxMOElBE?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Damn, that was only 10 years ago! Probably one of the first occasions when people like Steve Jobs and Eric Schmidt sell the idea about data, web services and cloud technologies to consumers!&lt;/p&gt;

&lt;p&gt;In fact, recent history of mobile phones resemble the history of web stacks. Nokia - imagine the LAMP stack - was slowly getting replaced or less favored by users for iPhone and smart phones - imagine MEAN stack. Still both stacks are good for certain people and certain scenarios.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/MEAN_(software_bundle)&#34;&gt;MEAN stack&lt;/a&gt; term was coined in 2013. It&amp;rsquo;s a result of new emerging tools such as Node.js, Express.js, Angular.js and MongoDB. People started building more RESTful APIs and use JavaScript everywhere.&lt;/p&gt;

&lt;p&gt;The MEAN stack became the new best practice because of the better user experience, like building better and more responsive UI, but also with a new promise - having 1 language in the front-end and the back-end.&lt;/p&gt;

&lt;p&gt;Though, the MEAN stack still shares a lot of concepts and practices with the LAMP stack. For instance, having a clear separation between front-end (view) layer and a db (model) layer, which is managed by a back-end programming language. When you think about it, you will realize that we speak about same things LAMP and MEAN, with some major improvements in the view layer and the programming language: JavaScript.&lt;/p&gt;

&lt;h3 id=&#34;the-rise-of-react-js&#34;&gt;The rise of React.js&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/images/reactjs.png&#34; alt=&#34;The logo of React.js&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How can you know what is coming up if you never looked back?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;rsquo;s focus on the historic years of the view layer in 2013-2015. Remember, the &amp;ldquo;A&amp;rdquo; in the MEAN stack was a rock-star project of Google called Angular. Nowadays, even when a project&amp;rsquo;s back-end is API-driven, and only the view layer is more reactive with React.js, Vue, etc - the stack is still frequently called a MEAN stack!&lt;/p&gt;

&lt;p&gt;What happened, however, is that Angular team shot themselves in the foot by announcing that Angular 2.0 will be a totally different project than Angular 1.0. On top of that, they were not able to say anything specific about the release planning of version of 2.0! Not to mention that they virtually obliged developers to learn and use a new Type of JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/images/js-crazy.jpg&#34; alt=&#34;Crazy World of JavaScript&#34; /&gt;&lt;/p&gt;

&lt;p&gt;React.js was in the right place in the right time. People already knew that the DOM is slow and jQuery is not a great fit for building a nice non-blocking interfaces. Angular had already made the Single Page Applications (SPA) concepts popular.&lt;/p&gt;

&lt;p&gt;React.js is very focused on solving a very specific problem - components. But make no mistake, the fact that it&amp;rsquo;s used by millions of developers does not mean that it&amp;rsquo;s replacing jQuery. They solve different problems in different ways. It&amp;rsquo;s crazy when big projects try to evaluate these tools with similar procedures. Some projects like Drupal use jQuery and Backbone because of a long-term goals. Nowadays, communities will need speculate on using React.js &amp;ldquo;in core&amp;rdquo; to take attention.&lt;/p&gt;

&lt;p&gt;Probably the experienced users of React.js will be solving different problems at the some time - like deciding upon a state management package, offline capabilities, build tools, and many other questions in addition to the view layer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React is a way of thinking.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The JavaScript ecosystem does not work in the same way like Drupal. The fact that you have a mass followers today does not mean you will be able to keep your momentum for tomorrow. However, as long as Facebook team does not make a stupid mistake like Google in the past, and keep actually using React.js for solving their real projects, the tool will surely stay for years to come.&lt;/p&gt;

&lt;p&gt;When the fear or the craziness for selecting a tool pass, developers will hopefully understand that the real questions with JavaScript is not for how long, but how effectively. For using JavaScript most effectively (or to stay on top of the wave) one must be able to think and organize the whole stack differently.&lt;/p&gt;

&lt;h3 id=&#34;the-rise-of-the-jam-stack&#34;&gt;The rise of the JAM stack&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;JAM&amp;rdquo; stands for JavaScript, APIs and Markup. We speak about static sites consisted of HTML, CSS and JavaScript without a server-side rendering.&lt;/p&gt;

&lt;iframe height=&#34;400&#34; width=&#34;100%&#34; src=&#34;https://jamstack.org/#what&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;This makes JAM stack applications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;faster - no server rendering&lt;/li&gt;
&lt;li&gt;more secure - security best practices delegated to APIs&lt;/li&gt;
&lt;li&gt;cheaper - as expensive as it is to host static assets&lt;/li&gt;
&lt;li&gt;a bit easier to develop&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As &lt;a href=&#34;https://kalinchernev.github.io/tags/jam-stack/&#34;&gt;mentioned before&lt;/a&gt; this stack differs from the traditional LAMP/MEAN stacks in the A, where APIs replace back-end logic on a server. As simple as it may sound, it is a powerful concept where the database/persistence layer of the stack is taken out of the equation and delegated to external services.&lt;/p&gt;

&lt;p&gt;A simple example would be making a contact form which normally needs a server to accept the request and process it with a mailing server. In a static site, this could be delegated to a &lt;a href=&#34;http://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-lambda.html&#34;&gt;cloud function&lt;/a&gt; using &lt;a href=&#34;https://codehabitude.com/2016/04/05/forms-to-emails-using-aws-lambda-api-gateway/&#34;&gt;services&lt;/a&gt; behind an &lt;a href=&#34;https://github.com/eleven41/aws-lambda-send-ses-email&#34;&gt;API&lt;/a&gt; endpoint.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re coming from a LAMP stack background, you would have certainly already heard about the &lt;a href=&#34;https://headlesscms.org/&#34;&gt;&amp;ldquo;headless&amp;rdquo; CMS&lt;/a&gt; trend. In fact, this trend has been growing steadily in communities such as &lt;a href=&#34;https://dri.es/drupal-looking-to-adopt-react&#34;&gt;Drupal&lt;/a&gt; and &lt;a href=&#34;https://snipcart.com/blog/reactjs-wordpress-rest-api-example&#34;&gt;WordPress&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mature content management systems contribute to the rise of the JAM stack.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another great example for an API-driven CMS which is highly focused on the principles of the JAM stack is the &lt;a href=&#34;https://www.netlifycms.org/&#34;&gt;NetlifyCMS&lt;/a&gt;. It currently works almost solely with the Github&amp;rsquo;s API, but can also be plugged in to different providers of content.&lt;/p&gt;

&lt;p&gt;Also, static site generators contribute to the JAM stack. The most popular static site generators are &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; and &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;. There are &lt;a href=&#34;https://www.staticgen.com/&#34;&gt;plenty of options on the market&lt;/a&gt;. &lt;a href=&#34;https://www.gatsbyjs.org/&#34;&gt;Gatsby.js&lt;/a&gt; is the one which I currently study to be my number 1 :)&lt;/p&gt;

&lt;p&gt;One of my favorite pull requests recently was the one adding &lt;a href=&#34;https://github.com/netlify/netlify-cms/pull/527&#34;&gt;documentation about the integration between Gatsby.js and NetlifyCMS&lt;/a&gt;. With this integration, you can easily provide a nice-looking &lt;a href=&#34;https://kalinchernev.github.io/admin-ui-gatsby-static-site-generator/&#34;&gt;admin UI for your static site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some recommended videos:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/p8PHe8Hv8uw?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;And a more general one about the JAM stack:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/uWTMEDEPw8c?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;the-rise-of-graphql&#34;&gt;The rise of GraphQL&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/images/graphql_logo.png&#34; alt=&#34;The logo of GraphQL&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Together with the growth of the JAM stack, naturally the API part of the stack also grows with it. And that&amp;rsquo;s where the &lt;a href=&#34;https://kalinchernev.github.io/graphql-guide-wish-found-before/&#34;&gt;GraphQL&lt;/a&gt; comes into play. GraphQL optimizes queries.&lt;/p&gt;

&lt;p&gt;In static sites the optimization comes from bundling and delivering static assets without rendering. GraphQL can further optimize the communication part when it&amp;rsquo;s still needed.&lt;/p&gt;

&lt;p&gt;With GraphQL:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you query for information&lt;/li&gt;
&lt;li&gt;you get exactly the information in the way you requested it&lt;/li&gt;
&lt;li&gt;you make 1 request and you get 1 response which optimizes the request &amp;lt;-&amp;gt; response&lt;/li&gt;
&lt;li&gt;you get a self-documenting API&lt;/li&gt;
&lt;li&gt;you get awesome tools around it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Long story short, it &lt;a href=&#34;https://thenewstack.io/emerging-graphql-serverless-stack-building-static-web-sites/&#34;&gt;fits very well in the JAM stack&lt;/a&gt; for a reason.&lt;/p&gt;

&lt;h3 id=&#34;the-rise-of-cloud-functions&#34;&gt;The rise of cloud functions&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/images/aws_lambda.png&#34; alt=&#34;The logo of AWS Lambda&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And with the continuous optimizations on the API, the &amp;ldquo;Serverless&amp;rdquo; concept and practices came into being. Many call the same concept cloud functions which fits well into new ways we build SPA or virtually any type of apps calling external services.&lt;/p&gt;

&lt;p&gt;I think the &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/welcome.html&#34;&gt;AWS Lambda&lt;/a&gt; in combination with &lt;a href=&#34;http://docs.aws.amazon.com/apigateway/latest/developerguide/welcome.html&#34;&gt;Amazon API Gateway&lt;/a&gt; was the first mainstream toolset of building APIs in new ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;no servers or containers to manage&lt;/li&gt;
&lt;li&gt;pay only for the resources being used&lt;/li&gt;
&lt;li&gt;pay much less than any other type of computing service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good for developers, nowadays, the API part of a static site can also be developed locally with tools such as the &lt;a href=&#34;https://serverless.com/&#34;&gt;serverless framework&lt;/a&gt;, each specific task being handled in a separate micro-service without too much of provisioning work - &lt;a href=&#34;https://github.com/serverless/site/tree/master/backend&#34;&gt;user services for authentication and authorization, mailing&lt;/a&gt;, etc.&lt;/p&gt;

&lt;p&gt;In fact, some patterns described in &lt;a href=&#34;https://www.manning.com/books/serverless-architectures-on-aws&#34;&gt;Serverless Architectures on AWS&lt;/a&gt; show how GraphQL can be the user-facing single endpoint in a serverless environment. As cool as this sounds, like having a &amp;ldquo;touch-based keyboard which can&amp;rsquo;t be wrong&amp;rdquo;, these bring &lt;a href=&#34;https://www.youtube.com/watch?v=lnOIcKibKzc&#34;&gt;new problems to solve&lt;/a&gt; such as resource exhaustion and complex resolvers to map information about various resolvers.&lt;/p&gt;

&lt;p&gt;The problems of consolidating information from various sources and transforming it for various types of clients, are still there.&lt;/p&gt;

&lt;h3 id=&#34;the-stack-of-today-the-stack-of-tomorrow&#34;&gt;The stack of today, the stack of tomorrow&lt;/h3&gt;

&lt;p&gt;As you see, the higher demands towards our way of working and our results, the better the tooling becomes. You can quote me here if I didn&amp;rsquo;t sound like Yoda.&lt;/p&gt;

&lt;p&gt;The server-side rendering in runtime got slowly out of the equation being replaced by RESTful APIs, GraphQL APIs or simply statically generated assets which don&amp;rsquo;t have any server logic at all. Thus, GraphQL started to be seen as the magical language to get information from whatever sources in the way information is needed.&lt;/p&gt;

&lt;p&gt;Understanding these trends deeply is not a matter of following a movement of cool development practices. These trends come as a result of the following facts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Users will use your app with all sorts of devices with access to Web and Internet.&lt;/li&gt;
&lt;li&gt;Your application will have to work with multiple data sources.&lt;/li&gt;
&lt;li&gt;Users will expect faster and smoother interactions&lt;/li&gt;
&lt;li&gt;Your application will have to be working offline.&lt;/li&gt;
&lt;li&gt;Your client expects his application to withstand peaked traffic from Hacker News home page.&lt;/li&gt;
&lt;li&gt;Your stack will have to continuously reduce costs.&lt;/li&gt;
&lt;li&gt;Your stack will have to continuously perform faster.&lt;/li&gt;
&lt;li&gt;Your stack will have to stay (or at least try to) easily maintainable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The stack of today, and the stack of tomorrow will always focus on better performance, multiple data sources, best possible tooling and, of course, lowest possible costs of development and maintenance.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;gatsby-js-https-www-gatsbyjs-org&#34;&gt;&lt;a href=&#34;https://www.gatsbyjs.org/&#34;&gt;Gatsby.js&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/images/gatsby.jpg&#34; alt=&#34;Gatsby.js&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Gatsby.js consists of React.js, GraphQL, Webpack and other modern technologies. It follows the &amp;ldquo;no build configurations&amp;rdquo; principle, This means that if you are a PHP developer who wants to learn React.js or GraphQL you can go for it and do it without losing your time and motivation into learning build tools. You can install the project and continue building prototypes and products. To an extend, Gatsby.js is similar to &lt;a href=&#34;https://github.com/facebookincubator/create-react-app&#34;&gt;create-react-app&lt;/a&gt; and  &lt;a href=&#34;https://www.meteor.com/&#34;&gt;Meteor.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What separates Gatsby.js from the others is the way it handles data. In Gatsby.js data could come from several types of files in the project - markdown, CSV, JSON, or it could come from external services like NetlifyCMS, Medium, or even CMS like Drupal and Wordpress.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/images/gatsby-netlify-cover.png&#34; alt=&#34;Visualization of the concept of multiple data sources in Gatsby.js&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;the-benefits-of-leaning-gatsby-js&#34;&gt;The benefits of leaning Gatsby.js&lt;/h4&gt;

&lt;p&gt;Here&amp;rsquo;s a short list of benefits I personally see to why to spend the time learning Gatsby.js:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn modern front-end technologies gradually.&lt;/li&gt;
&lt;li&gt;Learn React in an easy way - no Webpack configurations necessary for starters.&lt;/li&gt;
&lt;li&gt;Learn how to query GraphQL API servers.&lt;/li&gt;
&lt;li&gt;Easy to extend.&lt;/li&gt;
&lt;li&gt;Data: I love the idea of multiple unified data sources.&lt;/li&gt;
&lt;li&gt;Prototyping: works well with typography.js.&lt;/li&gt;
&lt;li&gt;Good DX.&lt;/li&gt;
&lt;li&gt;Can have literally any Admin UI.&lt;/li&gt;
&lt;li&gt;PWA on the fingertips. (plugins)&lt;/li&gt;
&lt;li&gt;JavaScript everywhere - transferable skill.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;why-data-and-graphql-is-such-a-big-deal&#34;&gt;Why data and GraphQL is such a big deal?&lt;/h4&gt;

&lt;p&gt;Because a lot of the &lt;a href=&#34;https://github.com/gatsbyjs/gatsby/issues/420&#34;&gt;heavy-weight lifting&lt;/a&gt; of &lt;a href=&#34;https://www.youtube.com/watch?v=lAJWHHUz8_8&#34;&gt;building resolvers&lt;/a&gt; is done for you!&lt;/p&gt;

&lt;p&gt;The the process of building pages and components using data in Gatsby.js can be summarized in the following few steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Define data source&lt;/li&gt;
&lt;li&gt;Prepare/transform the data&lt;/li&gt;
&lt;li&gt;Querying the data with GraphQL&lt;/li&gt;
&lt;li&gt;Place the result of the query within a React component&lt;/li&gt;
&lt;li&gt;Display the information&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;practice-time-building-a-website-about-belgian-beers&#34;&gt;Practice time: building a website about Belgian beers&lt;/h3&gt;

&lt;p&gt;After going through the &lt;a href=&#34;https://www.gatsbyjs.org/tutorial/&#34;&gt;official tutorial&lt;/a&gt; I managed to make this project about &lt;a href=&#34;https://kalinchernev.github.io/belgian-beers/&#34;&gt;Belgian beers&lt;/a&gt;. As you might see from its Github &lt;a href=&#34;https://github.com/kalinchernev/belgian-beers&#34;&gt;repository&lt;/a&gt; the code is very little.&lt;/p&gt;

&lt;p&gt;If you feel like following more visual tutorial before reading forward, I found some &lt;a href=&#34;https://www.youtube.com/playlist?list=PLLnpHn493BHHfoINKLELxDch3uJlSapxg&#34;&gt;video tutorials about Gatsby.js&lt;/a&gt; for you. At the moment of writing this article there aren&amp;rsquo;t any other alternatives for video lessons.&lt;/p&gt;

&lt;p&gt;The official documentation is good and the &lt;a href=&#34;https://github.com/gatsbyjs/gatsby/tree/master/examples&#34;&gt;examples&lt;/a&gt; can take you long way.&lt;/p&gt;

&lt;p&gt;The approach for building the website:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I take information about Belgian Beers from &lt;a href=&#34;http://data.visitflanders.org/datatank/dataset/435/download&#34;&gt;open data&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I use some plugins to read files and transform CSV and Markdown files in to a GraphQL API.&lt;/li&gt;
&lt;li&gt;I take information from the build-time GraphQL endpoint and make some pages.&lt;/li&gt;
&lt;li&gt;Build and deploy the result as a static site working as a SPA.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1) Initiate your project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;setup dependencies&lt;/li&gt;
&lt;li&gt;select and configure linters&lt;/li&gt;
&lt;li&gt;make at least 1 working page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here, for example, I &lt;a href=&#34;https://github.com/kalinchernev/belgian-beers/commit/800934df6b1bb8fdffa7758793dc6a26d2d88a5e&#34;&gt;start off with 3 data sources&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By the end of this step you must have a working environment and a GraphQL endpoint:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/images/starting_gatsbyjs.png&#34; alt=&#34;Starting Gatsby.js&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Make a simple deployment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;https://github.com/kalinchernev/belgian-beers/commit/b33592a5e63dc7a5bc4460632614bf0c32810d98&#34;&gt;my example&lt;/a&gt; I&amp;rsquo;m using &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Needless to say: the hosting is free for static sites.&lt;/p&gt;

&lt;p&gt;By the end of this step, you will have the confidence that your work will get easily online and you will be able to show your results when you&amp;rsquo;re ready.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Query for data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Open the GraphQL endpoint and learn how to query information - it&amp;rsquo;s fun!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/images/graphql-beers-query.gif&#34; alt=&#34;Making a GraphQL query to get information about Belgian Beers&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The information you see in the interface is coming from this &lt;a href=&#34;https://github.com/kalinchernev/belgian-beers/tree/master/src/pages/beers&#34;&gt;CSV file&lt;/a&gt; being transformed by &lt;a href=&#34;https://www.npmjs.com/package/gatsby-transformer-csv&#34;&gt;&lt;code&gt;gatsby-transformer-csv&lt;/code&gt;&lt;/a&gt; working after &lt;a href=&#34;https://www.npmjs.com/package/gatsby-source-filesystem&#34;&gt;&lt;code&gt;gatsby-source-filesystem&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You don&amp;rsquo;t have to build any resolvers or define any interfaces to receive this data after the work of the plugins.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) Use the query into React components&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you&amp;rsquo;re ready with the query, &lt;a href=&#34;https://github.com/kalinchernev/belgian-beers/commit/b598d2c943c7cf834cb98cbfec3644d848a99af1#diff-511c0c2282c4ed52e620a9e92c03e1b5R1&#34;&gt;just drop it in a React component&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have a markdown source, you will get information in the form of HTML, which you might want to inject with &lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt; like &lt;a href=&#34;https://github.com/kalinchernev/belgian-beers/commit/71626b9819334d50fa8cc9a1d0160f690c4410cf#diff-94732222a5ce144156005f06e7d70c56R8&#34;&gt;this&lt;/a&gt;. It&amp;rsquo;s very scary this method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5) Create content with templates&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Although we speak React here, the concept of templates is still there and it&amp;rsquo;s possible to &lt;a href=&#34;https://www.gatsbyjs.org/tutorial/part-four/#programatically-creating-pages-from-data&#34;&gt;create content automatically&lt;/a&gt; using templates before the project build starts listening for changes. Some of the methods here are still a bit unclear to me, but a good exercise with the beers would be to create an inner page for each beer.&lt;/p&gt;

&lt;h3 id=&#34;staying-focused&#34;&gt;Staying focused&lt;/h3&gt;

&lt;p&gt;Tools are just tools. They come and go, and the way you can really benefit from a tool or a framework regardless of the time you spend with it is asking yourself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why does this tool exist in the first place?&lt;/li&gt;
&lt;li&gt;What are the problems it&amp;rsquo;s solving?&lt;/li&gt;
&lt;li&gt;What are the skills I can learn with it?&lt;/li&gt;
&lt;li&gt;Which concepts are transferable to other tools?&lt;/li&gt;
&lt;li&gt;Is this tool really optimizing my work?&lt;/li&gt;
&lt;li&gt;Is it optimizing costs for hosting and maintenance?&lt;/li&gt;
&lt;li&gt;Do you enjoy working with the tool?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short, when working with a new tool, framework or a library, think about the new concepts and approaches to solve problems you are going to learn and how you can reuse them in your career.&lt;/p&gt;

&lt;p&gt;If you optimize time, performance, budget or processes using a tool while learning reusable skills, that&amp;rsquo;s a golden place to be in the JavaScript community (and not only) that will stand in time regardless of the current modern fashion trends.&lt;/p&gt;

&lt;h3 id=&#34;last-words&#34;&gt;Last words&lt;/h3&gt;

&lt;p&gt;As my closing thoughts in the article I will be honest with you. There are similar stack setups as Gatsby.js - such as &lt;a href=&#34;https://github.com/clintonwoo/hackernews-react-graphql/tree/master/src&#34;&gt;this&lt;/a&gt;. They are, however, harder to start with and they require more knowledge about the separate elements of the stack.&lt;/p&gt;

&lt;p&gt;I hope that you&amp;rsquo;ve managed to find some interesting ideas to experiment with in your next project. I believe that Gatsby.js serves very well for building landing pages, blogs and sites which can be static.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fixing my mobile phone</title>
      <link>https://kalinchernev.github.io/fixing-mobile-phone/</link>
      <pubDate>Fri, 29 Sep 2017 23:33:31 +0000</pubDate>
      
      <guid>https://kalinchernev.github.io/fixing-mobile-phone/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;One of the most popular requests I get around Christmas when I meet family
is to fix mobile phones - you name it - some issues with different SIM cards,
mobile Internet, optimizing space and memory, etc. I personally don&amp;rsquo;t like
modifying my own phone and try to be really honest with people that I just don&amp;rsquo;t
know a lot about mobile technologies which are out of the scope of making apps.&lt;/p&gt;

&lt;p&gt;During my holidays this year I started to have struggles with my
ALE-L21: I was never able to share Internet from mobile data via hotspot,
the welcome screen was getting sluggish, and all Google apps were getting
slower. For me, that&amp;rsquo;s uncomfortable since we speak about a phone which,
although the not-so-high-end-specs, has always been practical enough for me.
I researched the latest phones in a similar model range, and my conclusion was
that this time I will have to find a way to tweak the phone a bit, rather than
buying a new one because &amp;ldquo;this one is getting old&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;losing-a-few-kilos-is-easy&#34;&gt;Losing a few kilos is easy&lt;/h3&gt;

&lt;p&gt;In the beginning, cleaning some app cache, removing unnecessary apps and things
like this helped a bit to speed up the performance, but the gains were mainly
in the freed storage space. For example, &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.facebook.lite&amp;amp;hl=en&#34;&gt;Facebook Lite&lt;/a&gt;
combines both main and messenger apps in less than 2MB, which is x70 times less
than 84MB + 56MB for both otherwise. And btw, the user experience is still good.&lt;/p&gt;

&lt;h3 id=&#34;the-factory-reset&#34;&gt;The factory reset&lt;/h3&gt;

&lt;p&gt;In ALE-L21 there are regular updates to the official EMUI. Normally, making a
hard reset means a clean start in a comparatively safe way after a backup.
Though, I had bad experience figuring that the factory version of Google Play Services
under the last official update of the EMUI was simply &lt;a href=&#34;Cannot connect or communicate with Google servers&#34;&gt;unable to log me in&lt;/a&gt;.
Particularly nasty when I needed to install the Google Authenticator
to be able to pass 2FA to a service which I had to demo during the day. The way
I managed to solve this problem was installing the latest version of the service
from &lt;a href=&#34;https://www.apkmirror.com/apk/google-inc/google-play-services/&#34;&gt;the mirror&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The factory reset was a huge performance gain. After it, even the welcome screen
does not freeze or slow down any more. Together with cache reset, the phone feels
like new.&lt;/p&gt;

&lt;h3 id=&#34;mobile-operator-drama&#34;&gt;Mobile operator drama&lt;/h3&gt;

&lt;p&gt;Interestingly enough, other problems I had, such as not being able to share mobile
data, appeared to be purely operator-specific. With a bit of phone-blame, of course.&lt;/p&gt;

&lt;p&gt;For Mobile Vikings, it appeared that a simple difference between &lt;code&gt;supl&lt;/code&gt; and &lt;code&gt;default, supl&lt;/code&gt;
&lt;a href=&#34;https://mobilevikings.be/en/v2/setup/?page=device/huawei/p8-lite/topic/internet/manual-configuration/14&#34;&gt;configurations&lt;/a&gt;
is telling the phone apart from being able to use some services or not. In addition,
&lt;a href=&#34;https://forums.lenovo.com/t5/Moto-G4-Moto-G4-Plus-Moto-G4/Moto-G-mobile-hotspot-no-internet-connection/m-p/3666348#M23145&#34;&gt;debugging&lt;/a&gt; the reason why an APN of my homeland Vivacom would work on SIM2, reglarless of the SIM slot, in
hotspot sharing, and Mobile Viking wouldn&amp;rsquo;t - it appeared that the default APN
of another mobile operator was the non-active first option which was messing around.
Resetting these settings and modifying the settings a bit enabled both mobile
operators to be equally good hotspot providers.&lt;/p&gt;

&lt;h3 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;I don&amp;rsquo;t feel like a specialist in tweaking my mobile phone, as I am a dumb
user who don&amp;rsquo;t want to root his phone, change ROM, etc. for speeding up a bit.
I&amp;rsquo;m happy reviving a 2-year-old phone and being able to maximize its use
for the functions I need.&lt;/p&gt;

&lt;p&gt;I also still don&amp;rsquo;t think that developers are to be expected to be able to fix
any technical problem at hand. Though, going through all these issues
and having my final positive result at hand, I tend to believe that anyone
with enough interest of debugging and optimizing systems would do a good phone
technician.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Admin UI for Gatsby static site generator</title>
      <link>https://kalinchernev.github.io/admin-ui-gatsby-static-site-generator/</link>
      <pubDate>Wed, 16 Aug 2017 23:33:31 +0000</pubDate>
      
      <guid>https://kalinchernev.github.io/admin-ui-gatsby-static-site-generator/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Recently, I was looking into &lt;a href=&#34;https://www.gatsbyjs.org/&#34;&gt;Gatsby.js&lt;/a&gt; as a generator for a blog site. As many others, I one of the first steps into using the system as other popular CMS solutions, I started to look around for an online back-end UI for the content creation part. I found this list of &lt;a href=&#34;https://headlesscms.org/&#34;&gt;headless CMS options&lt;/a&gt; and since &lt;a href=&#34;forestry.io&#34;&gt;forestry&lt;/a&gt; (the service I use for my blog) does not support Gatsby, I decided to try &lt;a href=&#34;https://www.netlifycms.org/&#34;&gt;NetlifyCMS&lt;/a&gt;. This tutorial will be about it :)&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not going into details on the separate services and software packages, their advantages and super features. Rather, I will keep the tutorial concise on how to integrate the systems.&lt;/p&gt;

&lt;p&gt;If you like more background about the JAM stack, you can see previous mentions &lt;a href=&#34;https://kalinchernev.github.io/march-digest-2017/#jam-stack&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://kalinchernev.github.io/releasing-new-blog/&#34;&gt;here&lt;/a&gt; ;)&lt;/p&gt;

&lt;h3 id=&#34;start&#34;&gt;Start&lt;/h3&gt;

&lt;p&gt;For the tutorial, assume I&amp;rsquo;m speaking about &lt;a href=&#34;https://github.com/Vagr9K/gatsby-advanced-starter&#34;&gt;gatsby advanced starterkit&lt;/a&gt; although same principles apply to which-ever starterkit or gatsby setup. The important part is to have markdown as data source, as well as well-defined front-matter parsed by &lt;a href=&#34;https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-transformer-remark&#34;&gt;gatsby-transformer-remark&lt;/a&gt; and exposed to a GraphQL API within the Gatsby. In short, make sure you have markdown files so that the information you write is &amp;ldquo;understood&amp;rdquo; by NetlifyCMS and Gatsby, and others.&lt;/p&gt;

&lt;h3 id=&#34;netlifycms&#34;&gt;NetlifyCMS&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s an open source decoupled back-end built on React, which &lt;a href=&#34;https://www.netlifycms.org/docs/intro/&#34;&gt;integrates with Github API&lt;/a&gt;. I personally like this idea, because publishing work-flows actually translate to steps developers already take on code repositories.&lt;/p&gt;

&lt;p&gt;To use this admin UI application easily, you can &lt;a href=&#34;https://github.com/netlify/netlify-cms/blob/master/docs/quick-start.md&#34;&gt;integrate it with the Netlify service&lt;/a&gt; which will watch for changes in your github repository and do the necessary builds, previews and deploys.&lt;/p&gt;

&lt;p&gt;To make Gatsby work with this tutorial, you will need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;make a &lt;a href=&#34;https://www.gatsbyjs.org/docs/building-with-components/#page-components&#34;&gt;page component&lt;/a&gt; for the admin page, this should include the scripts loading the NetlifyCMS app&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;include the &lt;code&gt;config.yml&lt;/code&gt; file in &lt;code&gt;static&lt;/code&gt; folder of Gatsby, as it does not need optimization by webpack&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have configured Netlify service to take your master branch and execute &lt;code&gt;npm run build&lt;/code&gt; on new deployments, a new push will already give you access to the admin UI app.&lt;/p&gt;

&lt;h3 id=&#34;gatsby&#34;&gt;Gatsby&lt;/h3&gt;

&lt;p&gt;This side might seem a bit more complex compared to copy-paste and rework to a small React component, but it&amp;rsquo;s actually a simple process.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;move all markdown files into 1 folder, you need a flat structure, otherwise NetlifyCMS won&amp;rsquo;t be able to list the existing content in the dashboard&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;configure the &lt;code&gt;SiteConfig.js&lt;/code&gt; ​to point to this folder containing the files&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;configure also, by the way, configure also the &lt;code&gt;config.yml&lt;/code&gt; of Netlify to be the same target&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check if all works, and if yes, make another deployment to the your repository. I personally removed all the unnecessary content manually and had to flush the cache of the last deploy in the console.&lt;/p&gt;

&lt;h3 id=&#34;the-result&#34;&gt;The result&lt;/h3&gt;

&lt;p&gt;You have a modern tool-chain of React, GraphQL, webpack, and similar, called Gatsby, and you have a working administration UI to manage your content when you&amp;rsquo;re lazy to open your editor ;)&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a &lt;a href=&#34;https://github.com/kalinchernev/kalinchernev.github.io/blob/blog/static/videos/netlify-cms-gatsby.mp4&#34;&gt;video of the process&lt;/a&gt; from making a draft which is a pull request, opening a preview and then publishing the change which gets automatically deployed on the site.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/uploads/2017/08/16/Aug%2017%202017%2012-41%20AM.mp4&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Serverless github bot with AWS Lambda and API Gateway </title>
      <link>https://kalinchernev.github.io/serverless-github-bot-aws-lambda-api-gateway-nodejs/</link>
      <pubDate>Tue, 11 Jul 2017 22:40:00 +0000</pubDate>
      
      <guid>https://kalinchernev.github.io/serverless-github-bot-aws-lambda-api-gateway-nodejs/</guid>
      <description>

&lt;p&gt;This tutorial will show you how to build a small github bot app which is &amp;ldquo;listening&amp;rdquo; for pull requests&amp;rsquo; events on &amp;ldquo;open&amp;rdquo; and &amp;ldquo;reopen&amp;rdquo; by &lt;a href=&#34;https://greenkeeper.io/&#34;&gt;greenkeeper.io&lt;/a&gt;. When the author is the greenkeeper bot, our bot will in turn, correct the title and the tags of the pull request to match conventions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/uploads/2017/07/12/github_bot_correcting_greenkeeper-1.png&#34; alt=&#34;Github bot correcting the greenkeeper bot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve come to this article because you already have knowledge about the technical topics, but you are more interested in the concrete steps, you can skip the following introductory parts and go directly to the technical specifics below. To go to the technical details scroll down to the &lt;strong&gt;&amp;ldquo;10 steps to make it happen&amp;rdquo;&lt;/strong&gt; section ;)&lt;/p&gt;

&lt;p&gt;The script will actually be pretty small and simple, though there are quite some interesting ideas you might get on the way.&lt;/p&gt;

&lt;h2 id=&#34;serverless&#34;&gt;Serverless&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Serverless_computing&#34;&gt;Serverless computing&lt;/a&gt; is a relatively new trend which is getting greater popularity after Amazon released their &lt;a href=&#34;https://aws.amazon.com/lambda/&#34;&gt;AWS Lambda&lt;/a&gt; service in the end of 2014. I published about this topic in a bit &lt;a href=&#34;https://kalinchernev.github.io/january-digest-2017/#cloud&#34;&gt;more details earlier this year&lt;/a&gt;. In one sentence, serverless architectures (aka cloud functions) are getting traction in cases where high-level architecture control is sufficient for developers who delegate the details about the infrastructure management to a hidden underlying layer managed by a cloud provider.&lt;/p&gt;

&lt;p&gt;In addition to the low maintenance efforts, pricing per resource is also a lucrative opportunity for app developers - at the moment 1 million requests to AWS Lambda are &lt;a href=&#34;https://aws.amazon.com/free/&#34;&gt;free&lt;/a&gt; - this is generous! Later, &lt;a href=&#34;https://aws.amazon.com/lambda/pricing/&#34;&gt;pricing&lt;/a&gt; continues to be calculated based on actual usage. This means that applications cost money when they actually compute. That&amp;rsquo;s good for both up-scaling and down-scaling.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a graphic from &lt;a href=&#34;https://acloud.guru/&#34;&gt;acloud.guru&lt;/a&gt; which explains this evolution step in simple terms, I think:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/uploads/2017/07/11/brief-history-of-cloud-acloud-guru.png&#34; alt=&#34;Where is the serverless in the history of the cloud&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Lastly, cloud functions such as AWS Lambda come well into play in event-oriented designs. Here&amp;rsquo;s a simplified list of some &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/use-cases.html&#34;&gt;official use cases&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;event-driven services where the cloud function is run in response to other events - usually triggered by AWS S3, SNS, DynamoDB, etc.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;services responding to HTTP requests - triggered by Amazon API Gateway or other AWS clients.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A github bot app can be considered as a service from the second set of scenarios. The end result is an API endpoint responding to &lt;code&gt;POST&lt;/code&gt; requests (events) from &lt;a href=&#34;https://developer.github.com/webhooks/&#34;&gt;github webhooks&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;notes-on-the-aws-serverless-stack&#34;&gt;Notes on the AWS serverless stack&lt;/h2&gt;

&lt;p&gt;Watching videos and reading tutorials on the topic can get you pretty excited. Here are some notes about steps which didn&amp;rsquo;t go totally smooth during my journey, i.e. I want to prepare you for the reality before you get frustrated ;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) The AWS services ain&amp;rsquo;t that easy, especially if you&amp;rsquo;re relatively new to AWS in overall&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/documentation/lambda/&#34;&gt;AWS Lambda developer guide&lt;/a&gt; - 300+ pages&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/documentation/apigateway/&#34;&gt;Amazon API Gateway developer guide&lt;/a&gt; - 450+ pages&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/documentation/iam/&#34;&gt;IAM documentation&lt;/a&gt; - I don&amp;rsquo;t even want to check &amp;hellip;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short - there&amp;rsquo;s a lot of information and you have to find your way through the important parts which will help you in the specific case.&lt;/p&gt;

&lt;p&gt;For our case in this tutorial, let&amp;rsquo;s assume we can follow the getting started guide and build a simple cloud function working behind an &lt;a href=&#34;http://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started.html&#34;&gt;API gateway endpoint&lt;/a&gt;. If you want to do it right, you will have to have an idea about concepts such as: &lt;a href=&#34;http://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html&#34;&gt;mapping request and response data&lt;/a&gt;, getting to know some new &lt;a href=&#34;http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html&#34;&gt;template language for mapping variables&lt;/a&gt;, etc. These are the basics of API Gateway to get you going with the request and response management. Then come some fundamentals you&amp;rsquo;ll need about the AWS Lambda too - knowing what is a &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-handler.html&#34;&gt;handler function&lt;/a&gt; (the cloud function), figure &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-context.html&#34;&gt;the parameters of the handler&lt;/a&gt; and &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-logging.html&#34;&gt;reading logs&lt;/a&gt; from another AWS service.&lt;/p&gt;

&lt;p&gt;In short, &amp;ldquo;keep calm and learn AWS services&amp;rdquo;, at least the basics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) We speak cloud abstraction here - it is not easily reproducible for local development&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I spent quite some time researching on ways to have the whole AWS API Gateway + AWS Lambda setup locally so that I can start hacking quickly on my computer, but I haven&amp;rsquo;t found anything so far. If you have one or some in mind - please tell me!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) We still write JavaScript and Node.js - be ready for the regular hurdles you&amp;rsquo;ll normally have&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The fact that you&amp;rsquo;re delegating the infrastructure complexity to someone else out there doesn&amp;rsquo;t mean that your code will automagically work, at least not in the Node.js world, not at the moment.&lt;/p&gt;

&lt;p&gt;For example, sometimes you would receive errors &lt;a href=&#34;https://forums.aws.amazon.com/thread.jspa?threadID=229528&#34;&gt;like this&lt;/a&gt; and you will have to apply your JavaScript knowledge and patience to switch between versions of Node, transpile the code for the Lambda to be able to show you useful error messages &amp;hellip;&lt;/p&gt;

&lt;p&gt;For me, the &lt;a href=&#34;https://serverless.com/&#34;&gt;serverless&lt;/a&gt; framework worked pretty well in the deployment part. It definitely hid most of the complexity of understanding template languages and setting up boilerplate code for the function to work.&lt;/p&gt;

&lt;h2 id=&#34;notes-on-the-serverless-https-serverless-com-framework&#34;&gt;Notes on the &lt;a href=&#34;https://serverless.com/&#34;&gt;serverless&lt;/a&gt; framework&lt;/h2&gt;

&lt;p&gt;If you, like me, feel that the setup of the framework is a bit too much, then just go directly to the &lt;a href=&#34;https://github.com/serverless/examples&#34;&gt;example repository&lt;/a&gt; and get to know the &lt;a href=&#34;https://github.com/serverless/examples/tree/master/aws-node-github-webhook-listener&#34;&gt;aws-node-github-webhook-listener&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By using this example boilerplate, you will need only 2 keys auth components to make the communication between services work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/&#34;&gt;Github user token&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/general/latest/gr/managing-aws-access-keys.html&#34;&gt;AWS user tokens&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Try to keep the scope of permissions to a minimum to ensure best security in your applications. Both AWS and serverless provide other authentication options you might feel more comfortable with.&lt;/p&gt;

&lt;h2 id=&#34;notes-on-the-github-part&#34;&gt;Notes on the github part&lt;/h2&gt;

&lt;p&gt;The setup on github is simpler than AWS. Basically, you&amp;rsquo;ll need to read about &lt;a href=&#34;https://developer.github.com/webhooks/&#34;&gt;webhooks&lt;/a&gt;. The documentation is without a doubt - great - it walks you through all the stages from setting up a local dev environment, testing a hook, and also having a good knowledge of the structure of the webhooks&amp;rsquo; payloads.&lt;/p&gt;

&lt;p&gt;This is a high-level action plan:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Have an account, a repo, etc.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Generate a user token. (&lt;a href=&#34;https://help.github.com/articles/differences-between-user-and-organization-accounts/&#34;&gt;user can be a bot&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Setup webhooks for a repository.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter information about the API Gateway endpoint which works with the cloud function, this is your bot.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;10-steps-to-make-it-happen&#34;&gt;10 steps to make it happen&lt;/h2&gt;

&lt;p&gt;Ok, enough introductory talks, that&amp;rsquo;s the more visual part of the article containing the main milestones making the things actually work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Create a user that can work with AWS Lambda and API Gateway services.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/uploads/2017/07/12/create_aws_user_lambda.gif&#34; alt=&#34;Creating an AWS user you can operate with&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For simplicity, I&amp;rsquo;m adding the user to the group of admins. Then I&amp;rsquo;m downloading the tokens for later use with the serverless framework.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Go to your github profile settings page and &lt;a href=&#34;https://github.com/settings/tokens/new&#34;&gt;generate a user token&lt;/a&gt; by which the bot will act on your behalf.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can make a cool bot separate from your account, of course.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/uploads/2017/07/12/new_user_token_github.png&#34; alt=&#34;Creating a new user token on github.com&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you save this form, you will see the token, which you have to save somewhere with the same attention you would have to your password:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;a href=&#34;https://developer.github.com/webhooks/securing&#34;&gt;Generate a webhook secret&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/uploads/2017/07/12/generate_webhook_secret-1.png&#34; alt=&#34;Generating a webhook on github.com&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Input the user token and the webhook secret in the serverless config file&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/uploads/2017/07/12/save_config.png&#34; alt=&#34;Saving configurations in the serverless framework config file&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Put function code in the &lt;code&gt;handler.js&lt;/code&gt; file&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/uploads/2017/07/12/handler.png&#34; alt=&#34;Editing the cloud function&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. You can try to deploy the function:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ serverless deploy

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Watch it fail ;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/uploads/2017/07/12/enter_credentials_serverless.png&#34; alt=&#34;Failing deployment in the serverless framework&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Export your keys (which you downloaded in the &lt;code&gt;credentials.csv&lt;/code&gt; files earlier as:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ export AWS_ACCESS_KEY_ID=
$ export AWS_SECRET_ACCESS_KEY=
# AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY are now available for serverless to use
serverless deploy

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;8. Run &lt;code&gt;serverless deploy&lt;/code&gt; again and watch it succeeding&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/uploads/2017/07/12/serverless_deploy_success.gif&#34; alt=&#34;Showing a successful deployment of a function on AWS&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Take the provided URL and add it to the webhooks of your repository where you want the bot to take effect&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/uploads/2017/07/12/adding_webhook_github.png&#34; alt=&#34;Adding a new webhook on github.com&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Few notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This is the secret you previously generated via the command line&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It&amp;rsquo;s a good practice to filter only the necessary events in order to minimize the load to the endpoint&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;10. Trigger the webhook either by github or by closing and re-opening an existing pull request which has been opened by greenkeeper bot.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s an example script you can use:
&lt;script src=&#34;https://gist.github.com/kalinchernev/d1e79a7f883a4d37f50519d9b05df0c5.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;extras&#34;&gt;Extras&lt;/h2&gt;

&lt;p&gt;When you have this automated corrections on pull request titles and tags, you might also need to &lt;a href=&#34;https://github.com/greenkeeperio/greenkeeper-lockfile&#34;&gt;update the lock files&lt;/a&gt; of the pull request to make all ready for merging.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>From personal computers to personal assistants</title>
      <link>https://kalinchernev.github.io/personal-computers-personal-assistants/</link>
      <pubDate>Tue, 09 May 2017 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/personal-computers-personal-assistants/</guid>
      <description>

&lt;p&gt;The &lt;a href=&#34;https://www.fbf8.com/&#34;&gt;F8 event&lt;/a&gt; took place recently and I managed to watch a video about
&lt;a href=&#34;https://developers.facebook.com/docs/messenger-platform&#34;&gt;the messenger platform&lt;/a&gt;. Since it was during the Easter holidays, I also had few hours to make a simple chat bot for Facebook. Since then, I touched upon few of the topics around
the growing popularity of the so called &lt;a href=&#34;http://www.crn.com/slide-shows/components-peripherals/300083432/10-cool-smart-home-assistants-at-ces-2017.htm&#34;&gt;home assistants&lt;/a&gt;. In this article I&amp;rsquo;ll summarize some of the corners stones I found.&lt;/p&gt;

&lt;h3 id=&#34;making-a-chat-bot-this-time-on-facebook&#34;&gt;Making a chat bot, this time on Facebook&lt;/h3&gt;

&lt;p&gt;For me the story began with &lt;a href=&#34;https://kalinchernev.github.io/coding-battle-microsoft-innovation-center&#34;&gt;a coding event&lt;/a&gt;
at Microsoft almost an year ago when I &amp;ldquo;met&amp;rdquo; LUIS for the first time. Later, there was &lt;a href=&#34;https://chatbotslife.com/building-a-chat-bot-who-understands-emotions-though-your-selfies-e9fa7cc4b627&#34;&gt;the selfie chat bot&lt;/a&gt;, which was fun and also easy to make. So, trying the messenger platform was easy and smooth experience. Here&amp;rsquo;s a very short story of this journey:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There&amp;rsquo;s quite some tokens to be generated.&lt;/li&gt;
&lt;li&gt;I learned &lt;a href=&#34;https://ngrok.com/&#34;&gt;ngrok&lt;/a&gt; a bit better.&lt;/li&gt;
&lt;li&gt;I found that all this can be much easier with &lt;a href=&#34;https://api.ai/&#34;&gt;api.ai&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even though api.ai saves a lot of time in the setup of a chat bot for many platforms, it&amp;rsquo;s still useful to go through the long configuration options in facebook in order to have a good idea about the possibilities.&lt;/p&gt;

&lt;p&gt;A bit of an inconvenience it is that one has to make a page for the bot to live. Probably that will change with time. Follow &lt;a href=&#34;https://developers.facebook.com/docs/messenger-platform/guides/quick-start&#34;&gt;this guide&lt;/a&gt; to see what I talk about.&lt;/p&gt;

&lt;h3 id=&#34;technical-implementation-of-chat-bots&#34;&gt;Technical implementation of chat bots&lt;/h3&gt;

&lt;p&gt;If you are like me and you have reached this far to have setup 1 or 2 chat bots, a normal question to ask would be - what are the other platforms to build chat bots only with configuration? In the end, if it&amp;rsquo;s so easy to make a bot for facebook, then probably there are other services right?&lt;/p&gt;

&lt;p&gt;You can bet:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wit.ai/&#34;&gt;wit.ai&lt;/a&gt; - owned by Facebook since &lt;a href=&#34;https://www.crunchbase.com/organization/wit-ai#/entity&#34;&gt;5th January 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://api.ai/&#34;&gt;api.ai&lt;/a&gt; - owned by Google since &lt;a href=&#34;https://www.crunchbase.com/organization/api-ai#/entity&#34;&gt;19th September 2016&lt;/a&gt; - Google Assistant which is integrated with this was announced in &lt;a href=&#34;https://en.wikipedia.org/wiki/Google_Assistant&#34;&gt;May 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.luis.ai/home/index&#34;&gt;LUIS&lt;/a&gt; by Microsoft&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rasa.ai/&#34;&gt;rasa.ai&lt;/a&gt; by &lt;a href=&#34;https://golastmile.com/&#34;&gt;LASTMILE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Can&amp;rsquo;t help but putting &lt;a href=&#34;https://darvin.ai/&#34;&gt;Darvin.ai&lt;/a&gt; close to this list as well, as it&amp;rsquo;s made in Bulgaria :)&lt;/p&gt;

&lt;p&gt;All these share similar goals and ideas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a bot that takes input of human speech.&lt;/li&gt;
&lt;li&gt;Apply some NLP (natural language processing) or/and NLU (natural language understanding).&lt;/li&gt;
&lt;li&gt;Extract entities, sentiments, etc. out of the human input of information.&lt;/li&gt;
&lt;li&gt;Return information or call an API webhook to do some action based on the context.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depending on your language needs, level of interests in the subjects and needs for privacy, you can go either way. Basically, the &amp;ldquo;brain&amp;rdquo; of the &lt;code&gt;.ai&lt;/code&gt; is a cloud service communicating with clients via REST APIs, so that the intelligence can be reused in many ways.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example of using &lt;a href=&#34;https://www.slideshare.net/PaulPrae/azure-as-a-chatbot-service-from-purpose-to-production-with-a-cloud-bot-architecture&#34;&gt;Microsoft stack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/images/cloud-bot-architecture.jpg&#34; alt=&#34;Chat bot cloud architecture&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Over the past decades computers have broadly automated tasks that programmers could describe with clear rules and algorithms. Modern machine learning techniques now allow us to do the same for tasks where describing the precise rules is much harder.” - &lt;a href=&#34;https://futurism.com/amazon-ceo-perfectly-explains-ai-just-two-sentences/&#34;&gt;Jeff Bezos&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;chat-bots-personal-assistants&#34;&gt;Chat bots =&amp;gt; Personal Assistants&lt;/h3&gt;

&lt;p&gt;In a recent &lt;a href=&#34;https://www.meetup.com/Brussels-chatbot-Meetup/events/238677762/&#34;&gt;chatbot meetup&lt;/a&gt; &lt;a href=&#34;https://www.meetup.com/Brussels-chatbot-Meetup/members/224607756/&#34;&gt;Frédéric Feytons&lt;/a&gt; made few points which resonated in me for a while. Here&amp;rsquo;s a short summary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We are shifting from
the Personal Computer era to the Personal Assistant era.&lt;/li&gt;
&lt;li&gt;There are cases where assisting bots really help - Google maps telling us about the traffic in the morning, the &lt;a href=&#34;https://chatbotsmagazine.com/5-use-cases-where-building-a-bot-makes-sense-c1bd3aab13db&#34;&gt;Pizza bot&lt;/a&gt; confirming we want the same as before, etc.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Bots will not kill apps (we kill tools nowadays see &amp;hellip;) although the &lt;a href=&#34;http://marketingland.com/facebook-messenger-adds-option-chat-bots-avoid-chatting-208255&#34;&gt;chat experience can resemble the app experience&lt;/a&gt; to an extend.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s important to manage expectations towards our bots. They have models, but can&amp;rsquo;t be super-smart at the moment. It&amp;rsquo;s good to have a human interaction as a fallback in case the bot can&amp;rsquo;t handle an important conversation out of a predefined script route.&lt;/li&gt;
&lt;li&gt;Facebook chat bots marketplace is still messy as discovering valuable bots (which are not actually people behind their facebook pages) is sometimes hard.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although the &lt;a href=&#34;https://www.technologyreview.com/s/601441/moores-law-is-dead-now-what/&#34;&gt;Moore&amp;rsquo;s law is dead&lt;/a&gt; (we kill ideas as well as technology stacks and tools nowadays) the big players are in yet another big game of AI which is related to the chat bots being personal assistants - the physical personal assistants! :D&lt;/p&gt;

&lt;h3 id=&#34;personal-assistants&#34;&gt;Personal assistants =&amp;gt; ?&lt;/h3&gt;

&lt;p&gt;Amazon has been doing &lt;a href=&#34;http://uk.businessinsider.com/amazon-echo-sales-figures-stats-chart-2016-12?r=US&amp;amp;IR=T&#34;&gt;quite well since the release&lt;/a&gt; of the Amazon Echo, which already has several versions. Almost an year ago, Google made a &lt;a href=&#34;https://www.cnet.com/news/google-home-vs-amazon-echo/&#34;&gt;fast reply with Google Home&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/2KpLHdAURGo?rel=0&amp;amp;showinfo=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Believe it or not, I realized just recently that Google announced &lt;a href=&#34;https://assistant.google.com/&#34;&gt;Google Assistant&lt;/a&gt; and Google Home together for a reason. For me, the assistant was this dummy chat bot with little sense of humour on Allo, but I never took him seriously, because the time it takes to open the app and start a conversation was taking more than actually doing the thing I wanted to do directly in the apps. Also, there are so many other chat apps on the market that I never even made a try to invite a friend to try Allo with some assistant spice.&lt;/p&gt;

&lt;p&gt;In Europe, it&amp;rsquo;s still not straight-forward to buy Google Home device in the same way it would be in the USA, so I was recently browsing for ways to emulate the device, and still have the Google Assistant in the box - it&amp;rsquo;s integrated with &lt;a href=&#34;https://developers.google.com/actions/&#34;&gt;api.ai&lt;/a&gt; that I already tried for making the chat bot on Facebook!&lt;/p&gt;

&lt;p&gt;Few days ago, the &lt;a href=&#34;https://www.raspberrypi.org/magpi/find-the-magpi-57/&#34;&gt;#57 issue of MagPi&lt;/a&gt; got published with an interesting toy - a &lt;a href=&#34;https://aiyprojects.withgoogle.com/&#34;&gt;Google AIY&lt;/a&gt; - a do-it-yourself AI similar to Google Home :D
Google say that the assistant will be soon be published as an app for wide range of Android phones, but if you want to play with the actions sooner, and test if the this new wave would work for you or not - the AIY might be a really nice weekend / hack project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS1&lt;/strong&gt;: Google I/O is coming really soon, and it&amp;rsquo;s quite possible to see another product improving upon Google Home. The idea of trying the Assistant with some custom code/actions/webhooks from api.ai will still be a viable project regardless.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS2&lt;/strong&gt;: If you prefer to have the shiny device at home, better wait a bit, because Apple &lt;a href=&#34;https://www.cnet.com/news/apple-exec-mocks-google-home-and-amazon-echo/&#34;&gt;probably has something in mind too&lt;/a&gt; for this year ;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS3&lt;/strong&gt;: If you are in the telco business, you might want to follow &lt;a href=&#34;https://www.bloomberg.com/news/articles/2017-04-20/european-telcos-team-up-to-take-ai-fight-to-google-amazon&#34;&gt;the story around the European mobile network operators&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Releasing new blog</title>
      <link>https://kalinchernev.github.io/releasing-new-blog/</link>
      <pubDate>Wed, 19 Apr 2017 11:04:38 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/releasing-new-blog/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s a fact - I moved my blog from &lt;a href=&#34;https://medium.com/@kalin.chernev&#34;&gt;Medium&lt;/a&gt;
to &lt;a href=&#34;https://kalinchernev.github.io/&#34;&gt;github.com&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;As previously mentioned &lt;a href=&#34;https://kalinchernev.github.io/holiday-digest-2016&#34;&gt;last year&lt;/a&gt;
and &lt;a href=&#34;https://kalinchernev.github.io/march-digest-2017&#34;&gt;last month&lt;/a&gt;, I&amp;rsquo;ve been considering moving away from
Medium as the platform is continuously shifting focus to vendors and businesses.
So, here it is - yet another blog, this time containing most of the content
previously published, just to make sure it does not disappear during the
transformation of Medium.&lt;/p&gt;

&lt;h3 id=&#34;technology-stack&#34;&gt;Technology stack&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s a brief overview of what&amp;rsquo;s behind this blog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;rsquo;s all, generated by &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The layout and design are not too different than before, rather, there are
some tweaks made on the way:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Print-friendly, make it easy to read when pages are exported as PDF.&lt;/li&gt;
&lt;li&gt;PWA - you can &amp;ldquo;install&amp;rdquo; the site as an app and read content offline&lt;/li&gt;
&lt;li&gt;Code is highlighted&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, comments are integrated with &lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus&lt;/a&gt;. I think
this is a particularly good improvement which maintains the community-oriented
recommendation and interaction flows.&lt;/p&gt;

&lt;h3 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;With this new place to write, I plan to continue sharing about various experiments
and tools I&amp;rsquo;m working on in the spirit of &lt;a href=&#34;https://medium.com/digital-beer/digital-beer-2a3fc5a12006&#34;&gt;Digital Beer&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://kalinchernev.github.io/about/</link>
      <pubDate>Sat, 08 Apr 2017 15:33:06 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/about/</guid>
      <description>&lt;p&gt;Hi, my name is Kalin Chernev, and this website is probably my 5th place to blog, I stopped counting.
My track of experience is filled with projects on Drupal and sometimes a bit of WordPress, i.e. content management systems. However, this time there&amp;rsquo;s no CMS behind this website. This website/blog is hosted on github pages for 2 main reasons: &lt;strong&gt;be close to code&lt;/strong&gt; from github, and &lt;strong&gt;keep things simple&lt;/strong&gt; hosting only HTML, CSS and JavaScript.&lt;/p&gt;

&lt;p&gt;Today, I&amp;rsquo;m working mostly with JavaScript in various forms. That&amp;rsquo;s why you will encounter the notes I&amp;rsquo;m taking
in this blog on my way of understanding concepts, trying frameworks, experimenting with libraries
and all sorts of tools solving problems with JavaScript. It&amp;rsquo;s just amazing how this language got so
versatile to solve so many types of problems.&lt;/p&gt;

&lt;p&gt;I love the Web. It has evolved so much in recent years, and the speed of evolution is still accelerating.
Developers solve more complex problems, which lead to even more sophisticated problems to solve.
Thus, this blog keeps things simple - it&amp;rsquo;s plain good old HTML, CSS and JavaScript :)&lt;/p&gt;

&lt;p&gt;I believe in experimentation and open source contribution as a way to learn and keep up
with the accelerated pace of change in Web. That&amp;rsquo;s what you can expect from this blog.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>March digest 2017</title>
      <link>https://kalinchernev.github.io/march-digest-2017/</link>
      <pubDate>Fri, 31 Mar 2017 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/march-digest-2017/</guid>
      <description>

&lt;p&gt;This one will be on various personal thoughts on Medium, the JAM stack, the OpenAPI specification, and coding katas.&lt;/p&gt;

&lt;h3 id=&#34;medium&#34;&gt;Medium&lt;/h3&gt;

&lt;p&gt;If you’re a regular reader or writer on Medium, you already know about the &lt;a href=&#34;https://medium.com/3minread&#34;&gt;latest changes&lt;/a&gt;. Together with the new features, a &lt;a href=&#34;https://help.medium.com/hc/en-us/articles/115004750267-Medium-Membership-Partner-Program-FAQ&#34;&gt;partner program&lt;/a&gt; came into play, where companies and vendors will be more motivated to publish content about their products and services.&lt;/p&gt;

&lt;p&gt;Being a small fish without financial interests in blogging (at least here and now), I decided to research new channels of communicating my ideas out of Medium. As a casual happy writer, I really wish Medium best of luck in their search of even more and better ways of monetizing their great platform and continue connecting deep thinkers.&lt;/p&gt;

&lt;p&gt;Medium is aiming to solve problems at large scale for businesses and important individuals in the mission of un-breaking the internet and the publishing again. As a technical blogger, I’m interested in achieving smaller goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;I want to share about my wider “deep” thinking working with various technologies and tools&lt;/strong&gt;. I am not vendor-interested in this communication channel. I’m more into experimenting with many tools and using only a few, later sharing my findings from hands-on work. For this, I can place my thoughts anywhere I decide to — I lately admire &lt;a href=&#34;https://dev.to/&#34;&gt;dev.to&lt;/a&gt; which feels like “the right place to be” — but the editor is not as easy as in Medium. So yeah, I can just do the markdowns in a static site generator and re-post wherever …&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I want to be part of a community somehow.&lt;/strong&gt; Here at Medium, things tend to happen naturally. For example, I post &lt;a href=&#34;https://medium.com/@kalin.chernev/the-guide-to-learn-graphql-i-wish-i-found-few-months-go-97f9d9ca6f12&#34;&gt;a story about GraphQL&lt;/a&gt; which reaches 1.5k visitors, 7 of which come &lt;a href=&#34;http://dev-blog.apollodata.com/&#34; title=&#34;dev-blog.apollodata.com&#34;&gt;dev-blog.apollodata.com&lt;/a&gt;. I mean, that’s amazing — If I hadn’t shared my short notes on Medium, no-one using or reading about Apollo would have ever have visited my blog post. For this, I plan on &lt;a href=&#34;https://disqus.com/&#34;&gt;disqus&lt;/a&gt; integration which seems straight-forward and covering this “business requirement”.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I want my code to look really good, and I want it to be more interactive.&lt;/strong&gt; This comes simply from the fact that I write mostly about code, so I want it to look nice. Medium allows effective snippets placement and github gists, yet there are many nice-looking styling options for code parsed out of markdown. Having control over the parsed version of your writing is an advantage in some aspects.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I want to have statistics.&lt;/strong&gt; Medium provides stats on each story and it’s really useful to have a global idea what’s going on. For the same GraphQL article I mentioned above, over 1k of the visits come from flipboard.com. That’s all I know as my application request to have a publication with Google Analytics required a payment I got informed a month after making the application. No Google Analytics on Medium unless you are having business goals. I think I’ll manage to integrate Google Analytics in my new stack without 70 dollars for the infrastructure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the moment, I’ve jotted just a few high-level milestones in the upcoming digital transformation …&lt;/p&gt;

&lt;h3 id=&#34;jam-stack&#34;&gt;JAM stack&lt;/h3&gt;

&lt;p&gt;As Medium evolves, as my interests into improving the ways of expressing my casual tech thoughts in writing. Researching on some of the nerdiest ways I can make a blog for myself — the JAM stack came into light. The &lt;a href=&#34;https://jamstack.org/&#34;&gt;JAM stack&lt;/a&gt; is an acronym of having JavaScript, APIs and Markup. It’s absolutely revolutionary — I mean — nobody ever though so far in history that the web could handle HTML, CSS and JavaScript in such ways. (That’s ironic) The stack is tightly related to the topic of &lt;a href=&#34;https://www.staticgen.com/&#34;&gt;static sites generators&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;J&lt;/strong&gt; will maybe be in React. At this stage, I’ve found a decent &lt;a href=&#34;https://www.packtpub.com/web-development/mastering-react&#34;&gt;book to follow&lt;/a&gt; on the way. At any case, investing into learning React will pay much better for me rather than writing new articles on a platform which can change its business goals tomorrow and just go offline.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;A&lt;/strong&gt; will be the &lt;a href=&#34;https://developer.github.com/v3/&#34;&gt;github API&lt;/a&gt;. With inspirations from &lt;a href=&#34;https://www.netlifycms.org/&#34;&gt;netlifycms&lt;/a&gt;, a well-known &lt;a href=&#34;https://www.netlifycms.org/docs/editorial-workflow/&#34;&gt;git flow translates to my upcoming publishing workflow&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;M&lt;/strong&gt; part of the stack — I didn’t manage to decide upon this yet as the trends are moving too fast.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So cool this is, google will show you a &lt;a href=&#34;https://www.kickstarter.com/projects/846364129/jamstack-the-worlds-first-attachable-guitar-amplif?lang=fr&#34;&gt;kickstarter campaign for the jam stack&lt;/a&gt; and there is a song to play while working:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/oFRbZJXjWIA?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;open-api-specification&#34;&gt;Open API specification&lt;/h3&gt;

&lt;p&gt;In this month, I wrote a story about &lt;a href=&#34;https://restful.io/prototyping-your-api-project-with-the-open-api-specification-and-node-js-tools-7cb19f47f72d&#34;&gt;prototyping with the OpenAPI specifcation&lt;/a&gt;. It’s describing some techniques using the &lt;a href=&#34;https://github.com/Rebilly/generator-openapi-repo&#34;&gt;generator-openapi&lt;/a&gt; — made by the team of &lt;a href=&#34;https://apis.guru/&#34;&gt;APIs.guru&lt;/a&gt; — really nice product to use!&lt;/p&gt;

&lt;p&gt;I’m personally impressed by the community progress made around v3 of the latest spec. A release candidate was published in the beginning of the month, and various software packages literally sprouted in weeks.&lt;/p&gt;

&lt;p&gt;I think there are mainly few links to follow the fast progress:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openapi.toolbox.apievangelist.com/&#34;&gt;OpenAPI toolbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mermade/awesome-openapi3&#34;&gt;Unofficial awesome list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification&#34;&gt;The github repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the awesome list, there are few tools I hadn’t seen before. They seem to be made in quite a different way than the swagger-ui and swagger-editor, etc. that still keep popular positions in the toolbox.&lt;/p&gt;

&lt;p&gt;Another good news this month for fans of the OpenAPI initiative was the &lt;a href=&#34;https://github.com/swagger-api/swagger-editor/releases/tag/v3.0.0&#34;&gt;v3 release of the swagger-editor&lt;/a&gt; which brought a warmly-welcomed auto-suggest feature:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*n9qpZymZykXOuG9zxdUryQ.png&#34; alt=&#34;Nice autocomplete feature of the swagger editor&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;coding-katas&#34;&gt;Coding katas&lt;/h3&gt;

&lt;p&gt;The first competitive learning event (coding battle) from the Hack League team took place.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*aqpQIY4DURgBoYGJTDyIQg.jpeg&#34; alt=&#34;An image from the hack event&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It was my first event since a very long time, so I could see some new people and technologies during the event :)&lt;/p&gt;

&lt;p&gt;As organizers mentioned, the &lt;a href=&#34;http://git.hackleague.io/root/cb-2017-03-20&#34;&gt;problems of the competition&lt;/a&gt; are open after the event and you are encouraged to see them and get encouraged to join the next event :)&lt;/p&gt;

&lt;p&gt;I think (and I feel) that the problems are not the most complex thing you can see as a developer, but they definitely get closer to testing developers’ shape in solving problems fast and with confidence in the small steps.&lt;/p&gt;

&lt;p&gt;As I really suck at making small steps really fast, I’m trying to get into the habit making regular exercise at &lt;a href=&#34;https://www.codewars.com&#34;&gt;codewars.com&lt;/a&gt; with the idea of improving shape through &lt;a href=&#34;https://en.wikipedia.org/wiki/Kata&#34;&gt;katas&lt;/a&gt;. This is not a radically new idea for me, as there are the &lt;a href=&#34;http://es6katas.org/&#34;&gt;ES6katas&lt;/a&gt; teaching TDD as codewards and &lt;a href=&#34;https://nodeschool.io/&#34;&gt;nodeschool&lt;/a&gt; which provides various exercises for developers. (If you really enjoy them, you can give me a hand at the &lt;a href=&#34;https://github.com/workshopper/stream-adventure/issues&#34;&gt;stream-adventure workshopper&lt;/a&gt; and I promise quick reviews and quick contribution gratification)&lt;/p&gt;

&lt;p&gt;I believe in the important of taking care of my coding shape. I think it’s similar to doing sports and exercising or playing musical instruments. The tricky part being that &lt;a href=&#34;https://hackhands.com/dont-code-katas/&#34;&gt;programmers tend to overthink it sometimes&lt;/a&gt; …&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Prototyping APIs with Open API Specification and Node.js</title>
      <link>https://kalinchernev.github.io/prototyping-apis-open-api-specification/</link>
      <pubDate>Fri, 10 Mar 2017 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/prototyping-apis-open-api-specification/</guid>
      <description>

&lt;p&gt;A story about using Node.js community-built tools effectively in order to speed up the prototyping phase of your API project. In the whole article, &lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification&#34;&gt;Open API specification&lt;/a&gt; (which recently reached a RC on version 3) refers to version 2, also known as &lt;a href=&#34;http://swagger.io/&#34;&gt;Swagger specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article I’ll briefly demonstrate how you can to make use of few community-driven tools which I came across recently and I definitely recommend: &lt;a href=&#34;https://medium.com/@typicode&#34;&gt;Typicode&lt;/a&gt;’s &lt;a href=&#34;https://github.com/typicode/json-server&#34;&gt;json-server&lt;/a&gt; and &lt;a href=&#34;https://medium.com/@Rebilly&#34;&gt;Rebilly&lt;/a&gt;’s &lt;a href=&#34;https://github.com/Rebilly/generator-openapi-repo&#34;&gt;Open API generator&lt;/a&gt;. By using a combination of them, you can quickly achieve a mock API server with really nice and useful documentation based in short deadlines.&lt;/p&gt;

&lt;h3 id=&#34;the-open-api-generator-http-generator-openapi-repo-specification-is-first&#34;&gt;The &lt;a href=&#34;http://generator-openapi-repo&#34;&gt;Open API generator&lt;/a&gt;: specification is first&lt;/h3&gt;

&lt;p&gt;I think it’s better to start with the specification as it answers many questions, even before making any real or fake data for the API.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/Rebilly/generator-openapi-repo/blob/master/README.md&#34;&gt;official documentation&lt;/a&gt; is sufficient to get started. There’s really no need for detailed tutorial here on how to use the tool in order to make a working project — just follow the steps. (And maybe push an empty commit on the &lt;code&gt;gh-pages&lt;/code&gt; branch before first deploy just to make sure)&lt;/p&gt;

&lt;p&gt;More importantly, you have to know why this generator is good and why I recommend it 😌&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It works with &lt;a href=&#34;http://swagger.io/swagger-editor/&#34;&gt;&lt;strong&gt;swagger editor&lt;/strong&gt;&lt;/a&gt; out of the box, which feels like having a back-end for building your specification and documentation&lt;/li&gt;
&lt;li&gt;Your specification (aka swagger spec) can be split into several files, which makes the project more manageable and mainteanable&lt;/li&gt;
&lt;li&gt;Sleek documentation with &lt;a href=&#34;http://swagger.io/redoc-openapi-powered-documentation/&#34;&gt;&lt;strong&gt;ReDoc&lt;/strong&gt;&lt;/a&gt; (though &lt;a href=&#34;http://swagger.io/swagger-ui/&#34;&gt;swagger-ui&lt;/a&gt; is also generated) I think ReDoc is excellent in following the API documentation trends.&lt;/li&gt;
&lt;li&gt;The results of your work can easily be deployed to &lt;a href=&#34;https://pages.github.com/&#34;&gt;&lt;strong&gt;github pages&lt;/strong&gt;&lt;/a&gt;. It’s possible to make requests from here to external API server like the one we’ll have with json-server, as it supports CORS out of the box. Basically, as long as the server can accept requests from your github pages, these server really effectively as living documentation.&lt;/li&gt;
&lt;li&gt;Continuous integration with &lt;strong&gt;Travis&lt;/strong&gt; comes out of the box. Every time you push an update in the specification on the master branch, Travis checks for errors and deploys to github pages if everything is ok.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you follow the steps correctly, you’ll end up with a simplified version of &lt;a href=&#34;https://github.com/Rebilly/RebillyAPI&#34;&gt;RebillyAPI repository&lt;/a&gt;. That’s the final outcome that’ll motivate you to try the generator now, if you haven’t already done so 😊&lt;/p&gt;

&lt;p&gt;Probably you might find other similar tools such as &lt;a href=&#34;https://github.com/sourcey/spectacle&#34;&gt;spectacle&lt;/a&gt;, however this tool worked really well for me and it covers everything I think one might need during a prototyping phase of an API project.&lt;/p&gt;

&lt;p&gt;Thus, you have a tool to develop an Open API specification and deploy its documentation to github pages, making it nice and accessible for the public. With this Open API specification, you can later generate server/client code with &lt;a href=&#34;http://swagger.io/swagger-codegen/&#34;&gt;Codegen&lt;/a&gt;, or just deploy the spec to services such as &lt;a href=&#34;https://cloud.google.com/endpoints/docs/open-api-spec&#34;&gt;Cloud Endpoints&lt;/a&gt; or any other that will soon come with similar integration.&lt;/p&gt;

&lt;p&gt;Basically, there are many opportunities available for you when you have the specification. Next step is to generate a server with mock data which matches the specification’s “contract” with the documentation or just any front-end app meant to work with the specification.&lt;/p&gt;

&lt;h3 id=&#34;the-json-server-generator-fake-it-till-you-make-it&#34;&gt;The JSON server generator: fake it till you make it&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/typicode/json-server/blob/master/README.md&#34;&gt;JSON server tool&lt;/a&gt; is not really a generator per se, however it’s easy to integrate it as such in your toolchain. What I mean is, the tool is based on &lt;a href=&#34;http://com&#34;&gt;express.js&lt;/a&gt; and its popular middleware. You won’t need the express generator as you focus on the server. The endpoints are automatically discovered out of JSON files and you do not need express’ sophisticated templates views, routes, etc.&lt;/p&gt;

&lt;p&gt;A simple &lt;a href=&#34;https://github.com/typicode/json-server/blob/master/README.md#generate-random-data&#34;&gt;function&lt;/a&gt; in a script run by a npm task can easily do for having a generator for the server part. Also, &lt;a href=&#34;https://www.npmjs.com/package/faker&#34;&gt;faker&lt;/a&gt; plays really well with this “generator” function. (no word play intended here) &lt;a href=&#34;https://coligo.io/create-mock-rest-api-with-json-server/&#34;&gt;Check an example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main ideas you should understand with JSON server:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It’s an easy start out of an example or existing JSON files&lt;/li&gt;
&lt;li&gt;It’s easy to make a generator script to work with the tool&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, another benefit is that the server can be easily deployed. For example, if you decide to deploy on heroku, you’ll only need to update your server to use &lt;code&gt;process.env.IP&lt;/code&gt; and &lt;code&gt;process.env.PORT&lt;/code&gt;. The documentation points to the &lt;a href=&#34;http://jsonplaceholder.typicode.com/&#34;&gt;jsonplaceholder&lt;/a&gt; example, but surely &lt;a href=&#34;http://hook.io/&#34;&gt;hook.io&lt;/a&gt; or a similar cloud service will work just fine. Just keep it simple and working — the main idea of using this tool is to move fast and effectively.&lt;/p&gt;

&lt;p&gt;Another option for generating a server on top of an existing specification is the &lt;a href=&#34;https://www.npmjs.com/package/swagger-server&#34;&gt;swagger-server&lt;/a&gt; package which also integrates with express.js, however does not necessarily provide the ready filters, sorts, etc. that json-server does.&lt;/p&gt;

&lt;h3 id=&#34;additional-ideas&#34;&gt;Additional ideas&lt;/h3&gt;

&lt;p&gt;I personally separated both tools in 2 repositories for the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The mock API server can be managed and deployed independently&lt;/li&gt;
&lt;li&gt;Data from the mock server can be easily fetched from the github pages documentation, as JSON Server comes with CORS enabled by default&lt;/li&gt;
&lt;li&gt;This same mock API server can be just thrown away when the real server comes into place to work with the documentation and/or application&lt;/li&gt;
&lt;li&gt;It’s also good to have the documentation repository separate to make it easier to manage in a similar way as the server. Good example is how both swagger ui, swagger editor and ReDoc are integrated into a single project focusing on developing specification and documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;further-notes&#34;&gt;Further notes&lt;/h3&gt;

&lt;p&gt;That was a brief article sharing some love about open source projects which deserve an applause for being simple and effective helpers for developers.&lt;/p&gt;

&lt;p&gt;If this article gets any positive feedback, I will make a follow-up story to this one showing few tips to improve the workflow of editing and publishing specification to documentation to a working API.&lt;/p&gt;

&lt;p&gt;At any case, the search of more effective and well-integrated API prototyping, documentation and deployment continues.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>February digest 2017</title>
      <link>https://kalinchernev.github.io/february-digest-2017/</link>
      <pubDate>Wed, 01 Mar 2017 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/february-digest-2017/</guid>
      <description>

&lt;p&gt;After my &lt;a href=&#34;https://kalinchernev.github.io/january-digest-2017&#34;&gt;January digest&lt;/a&gt;, I got feedback from a precious reader that these stories must be toilet-friendly, so I’ll keep it short, directly to the essence :)&lt;/p&gt;

&lt;h3 id=&#34;productivity&#34;&gt;Productivity&lt;/h3&gt;

&lt;p&gt;Without a question, the first thing coming to my mind in this month is the set of small changes I made with regards to my typing habits.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en&#34;&gt;Vimium&lt;/a&gt; turned out to be really useful utility in my daily work on my &lt;a href=&#34;http://shop.lenovo.com/us/en/laptops/thinkpad/x-series-tablet/x220tablet/&#34;&gt;x220t&lt;/a&gt;. Together with the &lt;a href=&#34;https://en.wikipedia.org/wiki/Pointing_stick&#34;&gt;clit mouse&lt;/a&gt;, browsing becomes more straight-forward, even when clicking is inevitable. Yes, I feel more comfortable in vim after having vimium in my life, but I still prefer to &lt;a href=&#34;https://www.toptal.com/php/how-to-be-efficient-in-phpstorm&#34;&gt;be pragmatic at work&lt;/a&gt;. In the end, it all comes to wiring up an effective association between the brain and the computer which boils down to having &lt;a href=&#34;http://www.ratatype.com/learn/&#34;&gt;effective typing habits&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another big discovery for me this month was the &lt;a href=&#34;https://www.imagemagick.org/script/convert.php&#34;&gt;imagemagick’s&lt;/a&gt; &lt;code&gt;[conver](https://www.imagemagick.org/script/convert.php)&lt;/code&gt; &lt;a href=&#34;https://www.imagemagick.org/script/convert.php&#34;&gt;cli tools&lt;/a&gt;. After spending more than 30 minutes of trying to make a &lt;a href=&#34;https://twitter.com/kalinchernev/status/835053566632964097&#34;&gt;screenshot of gmail message for a tweet&lt;/a&gt; and not managing to convert paged pdf into a single continuous image, that command in the CLI really did magic:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ convert in.pdf -append out.png
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;graphql&#34;&gt;GraphQL&lt;/h3&gt;

&lt;p&gt;I managed to spend few hours with this technology this month and I will remember few highlights as a result of that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@kalin.chernev/the-guide-to-learn-graphql-i-wish-i-found-few-months-go-97f9d9ca6f12#.7ss1zopsu&#34;&gt;My short sharing session&lt;/a&gt; got more than 1000 visits on day 1, scoring for more than 1.4k at present moment.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://graphql-docs.com/&#34;&gt;GraphQL docs&lt;/a&gt; got published by &lt;a href=&#34;https://scaphold.io/&#34;&gt;Scaphold&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/APIs-guru/graphql-voyager&#34;&gt;GraphQL voyager&lt;/a&gt; got published by &lt;a href=&#34;https://medium.com/@apis.guru&#34;&gt;APIs.guru&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The technology is getting further traction and community love.&lt;/p&gt;

&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;

&lt;p&gt;Although there have been numerous resources coming by on a daily basis, these are the most prominent to my humble opinion:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://opensource.guide/&#34;&gt;Open source guides&lt;/a&gt; by github&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dev-books.com/&#34;&gt;Dev books&lt;/a&gt; summary based on stackoverflow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoy, and keep reading and writing code for pleasure! :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The guide to learn GraphQL I wish I found few months go</title>
      <link>https://kalinchernev.github.io/graphql-guide-wish-found-before/</link>
      <pubDate>Thu, 16 Feb 2017 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/graphql-guide-wish-found-before/</guid>
      <description>

&lt;p&gt;Although I consider myself an intermediate JavaScript developer, I struggled for weeks to understand fundamental concepts which are obvious for those living in the React.js ecosystem. So, this is a list of things I now see which I consider to be not documented or explained well enough for people like myself — those who like the ideas behind GraphQL and want to use it, but not necessarily having any experience with the React.js toolchain.&lt;/p&gt;

&lt;p&gt;The list will follow the style of &lt;a href=&#34;https://medium.com/@dceddia&#34;&gt;Dave Ceddia&lt;/a&gt; who made &lt;a href=&#34;https://daveceddia.com/timeline-for-learning-react/&#34;&gt;a timeline to learn React&lt;/a&gt;. It was really handy when I was experimenting with React few months ago, because it’s splitting the topics clearly and logically, smoothing the learning curve for newcomers. (At least it smoothed mine)&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;0-introduction&#34;&gt;0. Introduction&lt;/h3&gt;

&lt;p&gt;As a most fundamental start of everything, you have to have an idea what GraphQL is, and what it’s not.&lt;/p&gt;

&lt;p&gt;Get motivated:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/UBGzsb2UkeY?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Get the basic concepts:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/WQLzZf34FJ8?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;For me, there are few reasons to invest time in learning GraphQL, even if I’m not a React developer, but an API enthusiast:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Less round trips to the server&lt;/li&gt;
&lt;li&gt;Declare what you want, get exactly what you need&lt;/li&gt;
&lt;li&gt;Introspection is convenient and useful&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://graphql.org/swapi-graphql/&#34;&gt;GraphiQL IDE&lt;/a&gt; is amazing&lt;/li&gt;
&lt;li&gt;Building proxy servers on top of existing REST APIs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GraphQL is a specification, it’s language independent, yet the most popular one is the JavaScript one. So, it’s useful to be comfortable with JavaScript for understanding the official documentation. (More or this later)&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;1-languages&#34;&gt;1. Languages&lt;/h3&gt;

&lt;p&gt;First, you have to be comfortable with at least one programming language and the concepts behind the GraphQL query language. Regardless of the language of choice, you have to be OK with 2 languages.&lt;/p&gt;

&lt;h3 id=&#34;2-syntax&#34;&gt;2. Syntax&lt;/h3&gt;

&lt;p&gt;Assuming that you follow the official track of &lt;a href=&#34;http://graphql.org/learn/&#34;&gt;learning GraphQL&lt;/a&gt; you will get some ideas about the syntax of GraphQL. You can improve your skills with it following &lt;a href=&#34;https://learngraphql.com/&#34;&gt;an online hands-on course&lt;/a&gt; as a complementary. By the end of these two, you will feel the power of querying information in a declarative way, which is as special as writing declarative components in React.&lt;/p&gt;

&lt;p&gt;Then, if you follow the &lt;a href=&#34;http://graphql.org/graphql-js/&#34;&gt;graphql.js&lt;/a&gt; track of the official website, which is something that I did, you will have to be comfortable with the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript syntax&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://es6katas.org/&#34;&gt;ES6&lt;/a&gt; syntax&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flowtype.org/&#34;&gt;Flow&lt;/a&gt; syntax&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The majority of developers will get around the ES6 for sure, but the Flow part was really problematic for me. Why? Because, it’s natural to head directly to the &lt;a href=&#34;http://graphql.org/graphql-js/type/&#34;&gt;types&lt;/a&gt; section as you already know that everything goes around types, but the syntax is nothing you have seen before. (I hadn’t)&lt;/p&gt;

&lt;p&gt;So, after a while, you will most probably end up on a higher-level scenario of using graphql.js with express, reading about &lt;a href=&#34;http://graphql.org/graphql-js/type/#graphqlobjecttype&#34;&gt;GraphQLObjectType&lt;/a&gt;. The documentation is highly concise on types and what is what and what is where, etc. Without having an idea that it’s written in Flow syntax (with ES6), you will be guessing a lot.&lt;/p&gt;

&lt;p&gt;The first eye-opening moment of syntax difference could be that you can &lt;a href=&#34;http://graphql.org/graphql-js/constructing-types/&#34;&gt;build types in several ways&lt;/a&gt;. The second one could be that &lt;a href=&#34;http://graphql.org/learn/execution/#root-fields-resolvers&#34;&gt;context, fields and resolvers&lt;/a&gt; start to speak to you. It’s one thing to follow the tutorials and achieving results mimicking the example code, but it’s a totally different thing when you can read the documentation and see that you can work with promises, globals, and how to work with fields in circular dependencies.&lt;/p&gt;

&lt;p&gt;At the moment of writing this article there is no single mentioning of Flow in the official documentation on the website.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;3-resolve&#34;&gt;3. Resolve()&lt;/h3&gt;

&lt;p&gt;If you come from React, &lt;code&gt;resolve()&lt;/code&gt; will maybe ring an association with &lt;code&gt;render()&lt;/code&gt; It serves a totally different purpose, as it’s basically answering the question of what a given field should consider part of the given type, but for me it bears a similar simplicity and importance to the declarative nature.&lt;/p&gt;

&lt;p&gt;Again, the documentation is good in giving a &lt;a href=&#34;http://graphql.org/learn/execution/#root-fields-resolvers&#34;&gt;simple explanation what you can do with these&lt;/a&gt;, however it took me some time to decipher the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fields: GraphQLFieldConfigMapThunk | GraphQLFieldConfigMap;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It was not easy to understand that &lt;code&gt;GraphQLFieldConfigMapThunk&lt;/code&gt; is used when fields should be able to handle circular dependencies.&lt;/p&gt;

&lt;p&gt;I have to be honest, it also took me more time to understand what are the magical parameters that go in this function. Different tutorials follow different ways to get the arguments they need, such as using &lt;code&gt;_&lt;/code&gt; for first arg (to skip using it), or using the &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&#34;&gt;destructing assignment&lt;/a&gt; to get part of the context, etc. Again, understanding documentation with Flow helps more than the &lt;code&gt;console.log(...args)&lt;/code&gt; I was using to figure them out.&lt;/p&gt;

&lt;h3 id=&#34;4-relay&#34;&gt;4. Relay&lt;/h3&gt;

&lt;p&gt;Relay is the tool that loosely couples with GraphQL. You need it for more sophisticated scenarios when you need caching, pagination, etc. I haven’t used it yet, as I’m on the fundamentals of GraphQL, but I know it’s out there and I will use it when “relay compliance” is necessary in bigger projects or special client scenarios.&lt;/p&gt;

&lt;p&gt;Not required to learn GraphQL.&lt;/p&gt;

&lt;h3 id=&#34;5-apollo&#34;&gt;5. Apollo&lt;/h3&gt;

&lt;p&gt;I follow it even more than relay, (because of &lt;a href=&#34;https://www.meteor.com/&#34;&gt;MDG&lt;/a&gt;) but I haven’t had the reasons to use it until now. From aside, it seems shiny and well supported. I think this is the direction to go when using non-React toolchain and when you need more sophisticated solutions with MDG-level of quality and coolness :)&lt;/p&gt;

&lt;p&gt;Also not required to learn GraphQL.&lt;/p&gt;

&lt;h3 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;I think that React.js developers are in a better position of understanding and working with GraphQL at this time. That is normal, as little by little I start to see how the different tools work together to solve problems in specific ways that come naturally by understanding concepts behind the declarative ways of thinking in facebook products at the moment.&lt;/p&gt;

&lt;p&gt;So, if you are a developer that does not know all the facebook products, like me, start small by understanding the syntax and the documentation well, experiment with small projects, and use the variety of more sophisticated tools when your projects grow and require more control and flexibility.&lt;/p&gt;

&lt;p&gt;Think client-first approach. The client as your consumer of the API, and the client who wants to get something done. There must be a reason why the documentation of GraphQL does not mention inter-related and more sophisticated tools directly — you use them when you need them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reflecting on node.js design patterns</title>
      <link>https://kalinchernev.github.io/reflecting-nodejs-design-patterns/</link>
      <pubDate>Sat, 04 Feb 2017 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/reflecting-nodejs-design-patterns/</guid>
      <description>

&lt;p&gt;Once upon on a time, there was a designer …&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*o-Igk7ZgpSz2Zu4syTG3-A.jpeg&#34; alt=&#34;funny JavaScript image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;No matter if the story is true or not, working with JavaScript on the server with Node.js at the moment is a very different experience compared to working with Python, Ruby or PHP. I’d personally say that the advantage of working with a single language everywhere comes with the price of having to learn different design patterns in order to use the language effectively.&lt;/p&gt;

&lt;p&gt;One of these fundamental concepts to learn is the asynchronous programming. There are many articles in the Node.js/JavaScript community about asynchronous programming in terms of what callbacks are and how to &lt;a href=&#34;https://www.npmjs.com/package/async&#34;&gt;solve problems of control flow with a library&lt;/a&gt;, a &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;promise&lt;/a&gt;, &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&#34;&gt;async/await&lt;/a&gt;, etc. These are useful when the question is generally:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How to use node modules in a good way?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And although it’s important to learn and follow best practices in implementation, I sometimes miss articles which answer another question:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How to organize my code in node modules in a good way?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this story I’ll be reflecting on few patterns which answer the latter.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;continuation-passing-style-pattern&#34;&gt;Continuation-passing style pattern&lt;/h3&gt;

&lt;p&gt;This is an easy concept to understand, but really fundamental for working with asynchronous code&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Synopsis&lt;/strong&gt;: In your continuation-passing style function (CPS):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;cb(null, data)&lt;/code&gt; instead of &lt;code&gt;return&lt;/code&gt; to pass on result.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;return cb(err)&lt;/code&gt; to pass on an error and exit the function.&lt;/li&gt;
&lt;li&gt;Communicate one single outcome from the function.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Synchronous
function add(a, b) {
  return a + b;
}

console.log(add(2, 2));

// Asynchronous
function addAsync(a, b, cb) {
  cb(a + b);
}

addAsync(2, 2, function add(result) {
  console.log(result);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it! Honestly, the first time I saw this type of snippet, I already felt an eye-opening moment. If you know this already, give yourself a tap on the shoulder! Good job!&lt;/p&gt;

&lt;p&gt;For aesthetics, you can re-factor the last function as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;addAsync(2, 2, result =&amp;gt; console.log(result));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of even:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;addAsync(2, 2, console.log);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important take-away here is that functions can be passed as arguments to other functions. These are &lt;strong&gt;functions acting like a return statement&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Node.js, conventions say that when you’re writing such CPS you must &lt;a href=&#34;https://nodejs.org/api/errors.html#errors_error_propagation_and_interception&#34;&gt;send the error to the first argument&lt;/a&gt; of the callback function.&lt;/p&gt;

&lt;p&gt;Let’s do something a bit more practical — define a function which takes a list of files. If there are files, just return them, but if no files are supplied, return an error message.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function readFiles (files, cb) {
  if (files.length) {
    cb(null, files)
  } else {
    cb(&#39;no files supplied&#39;)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function will then be consumed in this way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;readFiles(process.argv.slice(2), (err, data) =&amp;gt; {
  if (err) return console.error(err)
  console.log(data)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I highly encourage you to test this if you’re not sure how it works. If you are lazy to open a terminal session, just fire a &lt;a href=&#34;https://runkit.com/home&#34;&gt;RunKit&lt;/a&gt; and copy-paste these in the browser ;)&lt;/p&gt;

&lt;p&gt;Notice the &lt;code&gt;return&lt;/code&gt; is used in the case of an error to exit the function. This pattern is very popular and comes handy for almost any case where the consumer of your module needs to do one single thing and get a result.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;observer-pattern-with-eventemitter&#34;&gt;Observer pattern with EventEmitter&lt;/h3&gt;

&lt;p&gt;Node.js developers use the &lt;a href=&#34;https://nodejs.org/api/events.html#events_emitter_on_eventname_listener&#34;&gt;EventEmitter&lt;/a&gt; interface from day one as it’s “under the hood” of almost all node core modules. Especially when we speak about functions which take time to finish.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Synopsis&lt;/strong&gt;: Using the event emitter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You create observable objects with &lt;em&gt;multiple listeners,&lt;/em&gt; where each listener is a callable function, i.e each &lt;em&gt;listener is a possible outcome.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;emitter.emit(eventName[, …args])&lt;/code&gt; instead of &lt;code&gt;cb(null, data)&lt;/code&gt;to pass on a result on listener function.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;emit(&#39;error&#39;, err)&lt;/code&gt; to pass on an error and exit.&lt;/li&gt;
&lt;li&gt;Communicate multiple possible outcomes from your function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The EventEmitter provides a popular &lt;code&gt;on()&lt;/code&gt; method which “hooks” functions on an object. Then, it invokes them synchronously one by one when a given event happens. This approach provides more granularity and control than CPS which gives one outcome per function.&lt;/p&gt;

&lt;p&gt;Let’s expand our previous function &lt;code&gt;readFiles()&lt;/code&gt; to &lt;code&gt;filterFiles()&lt;/code&gt; in order to provide a way to message all subscriber consumers on the event of finding a file during a search.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kalinchernev/15cbee0731612dc6388c2f0e1cafa6b7.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Then, in order to use this function, we’ll have an implementation like:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kalinchernev/4fb5f5129a202bd14bb9518bcef74244.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;We can also use some sugar to make the same functionality sweeter:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kalinchernev/223e3170b53307b5ca0e3d02afcd93ea.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;If you’ve visited the chapter about the observer patterns in the &lt;a href=&#34;https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented-ebook/dp/B000SEIBB8&#34;&gt;famous design patterns book&lt;/a&gt; you must already see a big difference in the way how you can implement the pattern. I like “the node-way” better — it’s simpler and you can express same ideas with less code. And honestly, if I were to teach this pattern to web developers, I am sure that I’d have a better chance of success relating on familiarity of jQuery’s popular &lt;code&gt;.on()&lt;/code&gt; method, without too much talking about abstractions and interfaces.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;combining-cps-and-observer-patterns&#34;&gt;Combining CPS and Observer patterns&lt;/h3&gt;

&lt;p&gt;Our new function &lt;code&gt;findFiles()&lt;/code&gt; is definitely more flexible than &lt;code&gt;readFiles()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;findFiles()&lt;/code&gt; provides a way for the user to listen to events during the processing of each file, which could give useful control of the processing.&lt;/p&gt;

&lt;p&gt;But what if we want to make it even more flexible, like letting the user choose whether he wants this control or not? What if the user is not actually interested in each file, but wants to get only the final result?&lt;/p&gt;

&lt;p&gt;Well, let’s make our event emitter function CPS-friendly!&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kalinchernev/985b975fe6591675ce2272b53846b2c8.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This is only a demo implementation which you should not copy-paste into your code without including better checks on the various edge cases of the input, etc. However, the example gives a basic idea on how to make the callback argument optional and use it depending on the scenario.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;I hope that in the end of this article you have some useful high-level ideas about few options you have when designing your node modules. It’s good to start with the end in mind, imagining how you want your modules to be used. This will help you balance your decisions better between the level of flexibility and easiness of use that you want to provide to your users.&lt;/p&gt;

&lt;p&gt;And remember — in most cases your choice of a programming language to use is less important than the way you use the programming language.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>January Digest 2017</title>
      <link>https://kalinchernev.github.io/january-digest-2017/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/january-digest-2017/</guid>
      <description>

&lt;p&gt;I’ve prepared a warm-up digest for those of you who made a resolution to improve their JavaScript skills in 2017, so let’s get it started!&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;stories&#34;&gt;Stories&lt;/h3&gt;

&lt;p&gt;I published 2 articles this month and I enjoyed writing both of them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://medium.com/@kalin.chernev/problem-first-problem-solving-87369b84551f#.zg5l97itd&#34;&gt;Problem-first problem-solving&lt;/a&gt; — don’t be mislead by the title, it’s about positive concepts going randomly through my brain.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://restful.io/agile-documentation-for-your-api-driven-project-based-on-open-api-standards-11e54d4326bb#.jaw6kcohk&#34;&gt;Agile documentation for your API-driven project&lt;/a&gt; — this got a tweet from the community few minutes after being published. So, the spread started before I make a tweet about the new publication myself. Nothing makes me happier than that as a writer.&lt;/p&gt;

&lt;p&gt;I got enthusiastic to write this article after release 1.9.0 of &lt;a href=&#34;https://github.com/Surnet/swagger-jsdoc&#34;&gt;swagger-jsdoc&lt;/a&gt; which introduced 2 new features. Both of them being focused on developers’ experience and productivity.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;javascript&#34;&gt;JavaScript&lt;/h3&gt;

&lt;p&gt;It’s just the beginning of 2017, so let’s warm up right for it!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nodesource.com/blog/the-21-most-awesome-awesome-lists-for-node-js-developers&#34;&gt;The 21 Most Awesome Awesome Lists for Node.js Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://risingstars2016.js.org/&#34;&gt;2016 rising stars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.mybridge.co/node-js-top-10-articles-of-the-year-v-2017-79df8269d0f3#.naz5q020y&#34;&gt;Node.JS Top 10 Articles of the Year (v.2017)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.risingstack.com/node-js-async-best-practices-avoiding-callback-hell-node-js-at-scale/&#34;&gt;Node.js Async Best Practices &amp;amp; Avoiding Callback Hell — Node.js at Scale&lt;/a&gt; — this article is full of advertisements just as a typical American TV show. It’s also as good as such because it shows you problems and solutions that you might actually have in your real life.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And one more which is not only about JavaScript but the broader spectrum of front-end development: &lt;a href=&#34;https://www.gitbook.com/book/frontendmasters/front-end-handbook-2017/details&#34;&gt;Front-End Developer Handbook 2017&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;cloud&#34;&gt;Cloud&lt;/h3&gt;

&lt;p&gt;I feel that video gives a useful overview of one of the new hypes: serverless.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Dh_UXXtSvjQ?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;In addition, this feels down-to-earth about production usage:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/c4rvh_Iq6LE?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;In my personal opinion, this “serverless” hype is not a ground-breaking new technology, but a smooth transition towards customer-oriented architectures and services. Containers could be considered as a ground-breaking thing which solve problems in infrastructure management, and they will probably be still the background “hidden” behind serverless.&lt;/p&gt;

&lt;p&gt;When I visualize a transition towards customer-oriented API architectures and services, I imagine services like &lt;a href=&#34;http://swagger.io/go-serverless-with-swaggerhub-and-amazon/&#34;&gt;SwaggerHub&lt;/a&gt; which hide complexity of infrastructure management and let’s the user focus on building products.&lt;/span&gt; I also imagine that at some point Amazon will be in a position to offer amazing user AND developers experience directly in the cloud when &lt;a href=&#34;http://www.forbes.com/sites/janakirammsv/2016/07/18/the-master-plan-behind-amazons-acquisition-of-cloud9-ide/#6e580c0028db&#34;&gt;Cloud9 comes move integrated&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At some point, AWS (? will ?) be the de-facto platform for building cloud applications where the user starts off easily — just clicking here and there and making configurations which integrate what-ever is necessary, where-ever necessary. And when super-specific tweak is necessary, code editor with all &lt;a href=&#34;https://medium.com/@kalin.chernev/debugging-node-js-in-cloud9-ide-59712c043fb2&#34;&gt;debugging capabilities&lt;/a&gt; will be at hand. Thus, covering scenarios from small startup projects that don’t want to focus on infrastructure, to enterprise which is there because of the fine control over the server side.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;trends&#34;&gt;Trends&lt;/h3&gt;

&lt;p&gt;On a similar note about trends, &lt;a href=&#34;https://www.oracle.com/corporate/acquisitions/apiary/index.html&#34;&gt;Apiary got acquired by Oracle&lt;/a&gt;. Though I’m not a pro at understanding mergers, it’s obvious that API economy companies are on success reaping wave. Only few months ago &lt;a href=&#34;http://www.forbes.com/sites/greatspeculations/2016/09/13/heres-why-google-is-acquiring-apigee/#52eceafc693f&#34;&gt;Apigee was in the news in a similar way&lt;/a&gt;, and there is a compelling reason for these trending acquisitions.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;time-saving-tricks&#34;&gt;Time-saving tricks&lt;/h3&gt;

&lt;h4 id=&#34;phpstorm-convert-between-array-syntax&#34;&gt;PHPStorm convert between array syntax&lt;/h4&gt;

&lt;p&gt;Laugh at me, but I still sometimes see &lt;code&gt;array()&lt;/code&gt; syntax during my work (and not &lt;code&gt;[]&lt;/code&gt;) It appeared to be an easy thing to change automatically in the editor.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Code | Inspect Code...&lt;/code&gt; — run it on your files. One of the inspections called &lt;strong&gt;&amp;ldquo;Traditional syntax array literal detected&amp;rdquo;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Alternatively just run that specific inspection only via &lt;code&gt;Code | Run Inspection by Name...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Once done, you will see a list with results. Find that particular inspection in results (in case if 1st option was used (all inspections)).&lt;/li&gt;
&lt;li&gt;From there you can apply “Fix it” action on all (or individual) results of that inspection.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*t5kfn0iW_I3uC3mWxA5Ntg.png&#34; alt=&#34;php storm converting array syntax&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Checking the daily ebook by&lt;/strong&gt; &lt;a href=&#34;https://www.packtpub.com/packt/offers/free-learning&#34;&gt;&lt;strong&gt;Packt’s Free Leaning campaign&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There’s an option to subscribe for updates via twitter or facebook, which is understandable. This is a good way to have leads and metrics of the campaign. However, it’s not very practical to open the website and see it every day, thus I made a lazy-logic implementation to be able to check this from the command line like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ node ~/scripts/freeEbook.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There’s the gist for it (it’s super-lazy)&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/kalinchernev/5f67405d46914897ee8ff95b46b55898.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This script is just the basic concept that can be integrated with internal cron tasks or cloud services to automate the check. For example, I imagine that with some investigation it will be possible to work out an &lt;a href=&#34;https://auth0.com/blog/if-this-then-node-dot-js-extending-ifttt-with-webtask-dot-io/&#34;&gt;integration with IFTTT&lt;/a&gt; or a similar service.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Agile documentation for your API-driven project</title>
      <link>https://kalinchernev.github.io/agile-documentation-api-driven-project/</link>
      <pubDate>Sun, 22 Jan 2017 00:00:00 +0200</pubDate>
      
      <guid>https://kalinchernev.github.io/agile-documentation-api-driven-project/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Based on &lt;a href=&#34;https://www.openapis.org/&#34;&gt;Open API standards&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Documentation is like sex; when it’s good, it’s very, very good, and when it’s bad, it’s better than nothing.” — Dick Brandon&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The goal of this article is to inspire improved workflows for building and maintaining documentation for API-driven projects. In the end of the story, you will hopefully try out new approaches of documenting your code. As such, it automatically increases the value of your work through making it more maintainable and re-usable in less time and efforts.&lt;/p&gt;

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://swagger.io/&#34;&gt;Swagger&lt;/a&gt; is one of the most popular and widely adopted specifications for RESTful APIs. In fact, the specification got off so well that &lt;a href=&#34;http://swagger.io/open-source-integrations/&#34;&gt;numerous community tools&lt;/a&gt; are available. Also, the &lt;a href=&#34;https://www.openapis.org/&#34;&gt;Open API initiative&lt;/a&gt; was born as a result of successful projects that use these tools basing on this specification in one way or another.&lt;/p&gt;

&lt;p&gt;With the &lt;a href=&#34;https://www.google.com/trends/explore?q=swagger%20api&#34;&gt;raise of popularity&lt;/a&gt; in 2016, leading experts started sharing advice on as &lt;a href=&#34;https://scotch.io/tutorials/speed-up-your-restful-api-development-in-node-js-with-swagger&#34;&gt;speeding the development phase with Swagger&lt;/a&gt; and later making a &lt;a href=&#34;https://scotch.io/tutorials/document-your-already-existing-apis-with-swagger&#34;&gt;good documentation of an existing API&lt;/a&gt;, again same spec being involved. These are few examples of well-written tutorials demonstrating benefits of having an API and a good toolchain, and documentation around it. There are &lt;a href=&#34;https://egghead.io/courses/build-node-js-apis-with-openapi-spec-swagger&#34;&gt;more&lt;/a&gt;, of course, and I think this trend will stay solid for the next couple of years. That’s because the Open API specification makes sense just enough to empower developers and business people to have a common language of how an interface should work. It is as a contract of communication and data format between humans and machines.&lt;/p&gt;

&lt;p&gt;In summary, the Swagger specification brings several clear advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We can &lt;a href=&#34;http://editor.swagger.io/#/&#34;&gt;write project specification&lt;/a&gt; in &lt;code&gt;yaml&lt;/code&gt; or 
&lt;code&gt;json&lt;/code&gt; formats. The &lt;code&gt;yaml&lt;/code&gt; one is probably closer to humans, which is really nice.
(Yes, there are UI programs for that as well ;)&lt;/li&gt;
&lt;li&gt;We can &lt;a href=&#34;http://swagger.io/swagger-codegen/&#34;&gt;generate server and client code automatically&lt;/a&gt;, because when the specification is solid, the tools are solid too.&lt;/li&gt;
&lt;li&gt;We can also &lt;a href=&#34;http://swagger.io/swagger-ui/&#34;&gt;generate live documentation&lt;/a&gt; based on the same project specification. This is particularly useful and that’s why I’ll expand more on about this subject in this article.&lt;/li&gt;
&lt;li&gt;We can program in many languages and the result of our work will stay alive longer, because it conforms to a server &amp;lt;-&amp;gt; client “contract”. Meaning, as long as you can make a swagger specification out of you work, you can move from one technology stack to another.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Node.js is a popular choice for building the server part of applications, but it’s not the only one. The knowledge you can get from this article is transferable to almost any programming language.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;what-makes-a-good-api-documentation&#34;&gt;What makes a good API documentation&lt;/h3&gt;

&lt;p&gt;Let’s now expand on the subject of having an effective documentation. There are many ways to document your software (and API), still, there are few major points which you have to cover to make it right. There is a common denominator of what makes one documentation better than another.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*RV0AOyBUcpJ7vS1TuSx2ag.png&#34; alt=&#34;picture telling you to stop the documentation uglyness&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;auto-generation&#34;&gt;Auto-generation&lt;/h4&gt;

&lt;p&gt;I think that is the most important one. Writing documentation should take the least amount of time and efforts, and should minimize the maintenance.&lt;/p&gt;

&lt;p&gt;You have to find a good way to write the least amount of textual explanations for your API, which yields the highest value of practical guidelines for the user of the documentation.&lt;/p&gt;

&lt;h4 id=&#34;include-examples&#34;&gt;Include examples&lt;/h4&gt;

&lt;p&gt;I speak from my personal experience here — it’s really pleasing when the documentation does not make me think too much. My advice: include some sample request objects, or some code samples, etc.&lt;/p&gt;

&lt;p&gt;As a consumer or a developer of the API, I want to have a quick-gratification access to something that I use and it just works directly. Rarely I want to open my &lt;a href=&#34;https://advancedrestclient.com/&#34;&gt;advanced REST client&lt;/a&gt; or &lt;a href=&#34;https://curl.haxx.se/docs/&#34;&gt;curl&lt;/a&gt; while reading API documentation because it takes off my attention and is basically forcing me to get out of the page I’m reading in order to have “the real feeling” about how something works.&lt;/p&gt;

&lt;h4 id=&#34;portable&#34;&gt;Portable&lt;/h4&gt;

&lt;p&gt;That is a feature I consider equally important for an effective piece of documentation. This is when the auto-generated code can be either displayed as a page or an embedded window of information. It also means that the result of your documentation is re-usable.&lt;/p&gt;

&lt;p&gt;If you are a JavaScript developer reading this, you will know that how fascinating the number of possible view frameworks solutions are. One day we have to make a simple page with Bootstrap, then with React.js, Angular.js, Vue.js, etc. No matter the framework or the tool, integrating documentation in an app has to be as easy as an instantiation. (In order to keep the spirit of high productivity and low maintenance costs mentioned in one of the previous points)&lt;/p&gt;

&lt;h4 id=&#34;swagger-ui-comes-to-the-rescue&#34;&gt;Swagger UI comes to the rescue&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*dt246jpThKkFh7TPUva-9A.png&#34; alt=&#34;image of the swagger ui taken as an example&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Swagger UI is a widely-adopted solution to the problems above. The only drawback being that the markup generated by the tool is not &lt;a href=&#34;http://getbem.com/introduction/&#34;&gt;BEM&lt;/a&gt;-ish or anything like this, thus preventing front-end developers to make really nice themes on top of the solution. (although it’s &lt;a href=&#34;http://meostrander.com/swagger-ui-themes/&#34;&gt;partially going on&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;When you look at the &lt;a href=&#34;http://petstore.swagger.io/#/&#34;&gt;demo&lt;/a&gt; (or the editor), you will notice that there are similarities in the information presented.&lt;/p&gt;

&lt;p&gt;Each endpoint of the API that is documented contains:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Short description (the textual explanation we usually over-do)&lt;/li&gt;
&lt;li&gt;Example samples of request bodies, options to change request types, etc.&lt;/li&gt;
&lt;li&gt;Opportunity to try out the request &amp;lt;-&amp;gt; response operation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On top of that, swagger-ui documentation is auto-generated based on a simple &lt;code&gt;yaml&lt;/code&gt; or
&lt;code&gt;json&lt;/code&gt; swagger specification file. That is super-nice, because the specification that a business person writes or configures through an UI can serve as both a contract AND live documentation!&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;we-can-do-better-than-that&#34;&gt;We can do better than that&lt;/h3&gt;

&lt;p&gt;Yes! Even after following popular tools and tutorials, I felt there is room for improvement. Mainly — writing the documentation itself.&lt;/p&gt;

&lt;p&gt;See, the problem of writing a single specification file and then using tools to generate the documentation is easy until the maintenance comes into play. Imagine that the &lt;/p&gt;

&lt;p&gt;yaml spec is maintained by the same developer or development team that is responsible for the API endpoints of the app server. Surely, there will be back and forth between the specification file and the code files that contain the actual implementation. It takes extra time and efforts to stay focused while jumping between editors and making sure that both resources are well-matched.&lt;/p&gt;

&lt;p&gt;In my opinion, the process of “specification &amp;gt; development &amp;gt; documentation &amp;gt; implementation” can improve. Namely, it is possible to do all them at once.&lt;/p&gt;

&lt;p&gt;How? By writing swagger specification in the documentation blocks of our code and plugging watch tasks in-between! Yes, the specification might still be in ownership of another one, not the developer. But even then — what if can just see live documentation based on the comments we’re placing in our code? Wouldn’t it be a motivating factor to write better in-code documentation? What is more, wouldn’t it be easier for developers to maintain both the code and the documentation of endpoints where the two are just next to each other?&lt;/p&gt;

&lt;p&gt;Look at the following piece of code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**
 * @swagger
 * /login:
 *   post:
 *     description: Login to the application
 *     produces:
 *       - application/json
 *     parameters:
 *       - name: username
 *         description: Username to use for login.
 *         in: formData
 *         required: true
 *         type: string
 *       - name: password
 *         description: User&#39;s password.
 *         in: formData
 *         required: true
 *         type: string
 *     responses:
 *       200:
 *         description: login
 */
app.post(&#39;/login&#39;, (req, res) =&amp;gt; {
  ...
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you might have already guessed, this is a sample from &lt;a href=&#34;https://github.com/Surnet/swagger-jsdoc&#34;&gt;swagger-jsdoc&lt;/a&gt;which takes the contents of the text after 
&lt;code&gt;@swagger&lt;/code&gt; and parses the contents of the &lt;a href=&#34;http://usejsdoc.org/&#34;&gt;jsdoc&lt;/a&gt; documentation into a &lt;a href=&#34;http://swagger.io/specification/&#34;&gt;swagger specification&lt;/a&gt;. This specification can be then visualized, for example, like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*K0swMwFEVHWqtcXnkxf0zg.png&#34; alt=&#34;nice swagger picture&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It’s true that I made the screenshot from the built of the example, not from this tiny sample, but you get the point ;) (Continue reading and you will see much nicer interface of the same info)&lt;/p&gt;

&lt;p&gt;Since I’m looking to improve this workflow even further (and make it more fun for developers to use the tool), I recently suggested a watch task in &lt;code&gt;swagger-jsdoc&lt;/code&gt; command line tool that works just like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ swagger-jsdoc -d swaggerDefinition.js routes.js routes2.js -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, after having a generated &lt;code&gt;swagger.json&lt;/code&gt; the command line will continue listening for changes in &lt;code&gt;routes.js&lt;/code&gt; and &lt;code&gt;routes2.js&lt;/code&gt; and then re-generate the specification &lt;code&gt;swagger.json&lt;/code&gt; on updates.&lt;/p&gt;

&lt;p&gt;Also recently, the command line tool got a new feature to output &lt;code&gt;yaml&lt;/code&gt; if the &lt;code&gt;-o&lt;/code&gt; flag is used like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ swagger-jsdoc -d swaggerDefinition.js apis.js -o swagger.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, &lt;code&gt;apis.js&lt;/code&gt; will be searched for &lt;code&gt;@swagger&lt;/code&gt; tags, but the parsed specification will be written to &lt;code&gt;swagger.yaml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Having the &lt;code&gt;swagger.json&lt;/code&gt; or &lt;code&gt;swagger.yaml&lt;/code&gt; specification at this moment is a nice start. This file is the key re-usable resource that can be integrated with other tools such as &lt;code&gt;swagger-ui&lt;/code&gt; which visualize the “soul” of the API in nice UI interfaces.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;improved-api-documentation-workflow&#34;&gt;Improved API documentation workflow&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://kalinchernev.github.io/images/swagger-jsdoc-improves-documentation-workflow.png&#34; alt=&#34;Improved documentation workflow with swagger-jsdoc&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Some time ago, an article about &lt;a href=&#34;https://javascriptkicks.com/stories/94009/watching-file-changes-with-npm-scripts&#34;&gt;watching files changes with npm scripts got popular&lt;/a&gt;. I believe there is a reason why comments are not possible under the original article, but never mind, it got me on the path of researching the &lt;a href=&#34;https://nodejs.org/docs/latest/api/fs.html#fs_fs_watch_filename_options_listener&#34;&gt;fs.watch()&lt;/a&gt; and its behavior. After experimentation I reached to prefer &lt;a href=&#34;https://www.npmjs.com/package/chokidar&#34;&gt;&lt;code&gt;chokidar&lt;/code&gt;&lt;/a&gt; which is a module improving the &lt;code&gt;fs.watch()&lt;/code&gt; interface. In fact, I liked &lt;code&gt;chokidar&lt;/code&gt; so much that I took the opportunity to suggest a &lt;a href=&#34;https://github.com/Surnet/swagger-jsdoc/releases/tag/v1.9.0&#34;&gt;new feature in the CLI tool of&lt;/a&gt; &lt;a href=&#34;https://github.com/Surnet/swagger-jsdoc/releases/tag/v1.9.0&#34;&gt;&lt;code&gt;swagger-jsdoc&lt;/code&gt;&lt;/a&gt; which is, duh, a watch task working with the API files. (Briefly mentioned in the previous chapter)&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;chokidar&lt;/code&gt; module is also an integral part of the &lt;a href=&#34;https://www.npmjs.com/package/browser-sync&#34;&gt;&lt;code&gt;browser-sync&lt;/code&gt;&lt;/a&gt; module which, in turn, an already mature and battle-tested piece of software. It is widely adopted in various products and projects to increase development experience and productivity.&lt;/p&gt;

&lt;p&gt;Having this understanding, I saw another opportunity — making a simple integration between instruments which integrate the &lt;code&gt;chokidar&lt;/code&gt; module. I only needed a better understanding of &lt;a href=&#34;http://swagger.io/swagger-ui/&#34;&gt;Swagger UI&lt;/a&gt; which is the “glue”, or the “contract”, between the back-end server side (the API) and the front-end (client) side. I feel it’s comfortable (and smart) that the documentation pages are the first-hand client and consumer of the API. Also, I believe that this consumer should be easy to make and maintain, but still really nice-looking, so that there is something pleasant for our paying clients to see. With &lt;code&gt;browser-sync&lt;/code&gt; Swagger UI got a bit more fun to work with.&lt;/p&gt;

&lt;p&gt;In order to demonstrate the idea better in visual and kinesthetic way, I created a &lt;a href=&#34;https://github.com/kalinchernev/agile-open-api-docs&#34;&gt;supplementary repository&lt;/a&gt;. It contains examples of the first approach that came to my mind keeping &lt;a href=&#34;https://en.wikipedia.org/wiki/KISS_principle&#34;&gt;the KISS principle&lt;/a&gt;. Basically, there are few npm scripts that make the system work together.&lt;/p&gt;

&lt;p&gt;First, you can have a look at &lt;a href=&#34;https://github.com/kalinchernev/agile-open-api-docs/blob/master/package.json&#34;&gt;the&lt;/a&gt; &lt;a href=&#34;https://github.com/kalinchernev/agile-open-api-docs/blob/master/package.json&#34;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kalinchernev/agile-open-api-docs/blob/master/package.json&#34;&gt;manifest&lt;/a&gt;. Tasks are separated in two main categories: tasks for the server side (the API) and tasks related to the documentation. For the API development part, &lt;code&gt;npm run api&lt;/code&gt; fires a server with &lt;code&gt;nodemon&lt;/code&gt; and &lt;code&gt;swagger-jsdoc&lt;/code&gt; As a result, any changes in the &lt;code&gt;api/&lt;/code&gt; folder trigger server restart and re-generation of &lt;code&gt;swagger.json&lt;/code&gt; specification which goes to &lt;code&gt;api-docs/&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Secondly, the &lt;code&gt;npm run docs:develop&lt;/code&gt; task fires a &lt;code&gt;browser-sync&lt;/code&gt; server for the client side serving the &lt;code&gt;api-docs/&lt;/code&gt; folder which receives automatically updated &lt;code&gt;swagger.json&lt;/code&gt; specification from the previous task. You can run those two tasks in separate terminal sessions or just create another parallel task following the examples of the &lt;code&gt;package.json&lt;/code&gt; file with &lt;code&gt;npm-run-all&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At this stage, you can freely update both the server and client sides of your project having near real-time feedback and results visible in the browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*6bMTxVkYaUEEjyqpeiXBRA.png&#34; alt=&#34;Nice interface of the generated documentation&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You might be wondering — why isn’t this the interface of Swagger UI I am used to seeing around! What happened? Well, I used a &lt;a href=&#34;https://github.com/jensoleg/swagger-ui&#34;&gt;fork which looks nicer&lt;/a&gt;. Here’s an &lt;a href=&#34;http://swaggerui.herokuapp.com/?url=http://petstore.swagger.io/v2/swagger.json#!/pet/addPet&#34;&gt;online demo&lt;/a&gt; which you can play with to get the feeling of what your documentation may look like after you enjoyably use &lt;code&gt;swagger-jsdoc&lt;/code&gt; and &lt;code&gt;browser-sync&lt;/code&gt; as shown in &lt;a href=&#34;https://github.com/kalinchernev/agile-open-api-docs/blob/master/package.json&#34;&gt;this repository.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The same workflow is possible with other file extensions such as &lt;code&gt;.php&lt;/code&gt; just changing the input parameters and removing the binding to the &lt;code&gt;nodemon&lt;/code&gt; server restart task, so that another standalone server is used instead. Here’s an example taken from a recent pull request which was included in &lt;code&gt;swagger-jsdoc&lt;/code&gt; to parse swagger documentation to &lt;code&gt;yaml&lt;/code&gt; output.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*W72Xll_3kHjiCtNkb7U3qg.png&#34; alt=&#34;swagger-jsdoc with php projects&#34; /&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;deployment&#34;&gt;Deployment&lt;/h3&gt;

&lt;p&gt;I have intentionally left out the deployment part out of this story, because I believe there are many good options on the market and it really depends on the personal preferences how to manage this part of the process. For example, you can follow the scotch.io tutorial mentioned earlier to place the docs on heroku, or you can also include an npm script which works with &lt;a href=&#34;https://github.com/tschaub/gh-pages&#34;&gt;&lt;code&gt;gh-pages&lt;/code&gt;&lt;/a&gt; to deploy the assets directly to your repository, etc. The main thing is that the &lt;code&gt;api-docs&lt;/code&gt; folder is already built and ready to be deployed as-is.&lt;/p&gt;

&lt;p&gt;Myself, I plan to experiment with &lt;a href=&#34;https://cloudplatform.googleblog.com/2016/09/manage-your-APIs-with-Google-Cloud-Endpoints.html&#34;&gt;Google Endpoints&lt;/a&gt; in near future although it’s a new service. That’s because it supports the &lt;a href=&#34;https://cloud.google.com/endpoints/docs/open-api-spec&#34;&gt;Open API specification&lt;/a&gt; and provides flexible options on deployment for both the API and the documentation on reasonable terms. An interesting point to notice is that the service guidelines show deployment only of the swagger/openapi specification file which can be generated by the &lt;code&gt;swagger-jsdoc&lt;/code&gt; This is a good example of re-using single specification for multiple purposes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*QHvYcf7gyUyIwNlBo-jHTQ.png&#34; alt=&#34;swagger to open api specification transition&#34; /&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;Writing this article and sharing some code around it, I’m integrating tools that solve problems which have already been under the radar of the &lt;a href=&#34;https://medium.com/@apievangelist&#34;&gt;API Evangelist&lt;/a&gt; such as &lt;a href=&#34;https://apievangelist.com/2015/02/02/we-need-better-api-documentation-and-ui-deployment-options/&#34;&gt;the need of better API documentation and UI deployment&lt;/a&gt; which was later followed up by findings about &lt;a href=&#34;https://apievangelist.com/2015/06/27/the-responsive-swagger-driven-version-of-slate-api-documentation-i-was-looking-for/&#34;&gt;improved Swagger UI design solution&lt;/a&gt;. Few months ago, there was also a &lt;a href=&#34;https://apievangelist.com/2016/09/16/learning-from-the-success-of-swagger-ui/&#34;&gt;reflection article about the success of Swagger UI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope that this article has inspired you to consider some new ways to improve your documentation workflows for your API project. I know that the idea of automated documentation generation with swagger tools is not new. Rather, I aim to introduce some new ideas on solving the problems which have been around on topic for a while with the tools available today to improve productivity.&lt;/p&gt;

&lt;p&gt;The tools shown in &lt;a href=&#34;https://github.com/kalinchernev/agile-open-api-docs&#34;&gt;the repository&lt;/a&gt; are free and vendor-neutral and the documentation build can be deployed to any place which serves you best. So, I encourage you to further experiment with the code and adapt it to work best for your specific needs.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you think this article was helpful, then consider making a comment, a share or a ❤&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>